#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è AI Assistant MVP

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:
1. AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è RFC –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
2. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º –¥–∞–Ω–Ω—ã–º  
3. –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
4. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
5. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python demo_ai_assistant.py [--server-url http://localhost:8000]
"""

import asyncio
import json
import sys
from typing import Dict, Any
import httpx
import argparse
from datetime import datetime


class AIAssistantDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π AI Assistant MVP."""
    
    def __init__(self, server_url: str = "http://localhost:8000"):
        self.server_url = server_url
        self.client = httpx.AsyncClient(timeout=30.0)
    
    async def check_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞."""
        try:
            response = await self.client.get(f"{self.server_url}/health")
            return response.status_code == 200
        except Exception as e:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    async def demo_rfc_generation(self) -> None:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é RFC –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        print("\nüöÄ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò RFC –î–û–ö–£–ú–ï–ù–¢–ê ===")
        
        # 1. –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
        print("\n1Ô∏è‚É£ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é RFC –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞...")
        
        generation_request = {
            "task_type": "new_feature",
            "initial_request": "–ù—É–∂–Ω–æ —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∞—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
            "context": "–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
            "user_id": "demo_user",
            "search_sources": ["confluence-main", "gitlab-rfcs"]
        }
        
        try:
            response = await self.client.post(
                f"{self.server_url}/api/v1/generate",
                json=generation_request
            )
            
            if response.status_code == 200:
                result = response.json()
                session_id = result["session_id"]
                questions = result["questions"]
                
                print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_id}")
                print(f"üìù AI –∑–∞–¥–∞–ª {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤:")
                
                for i, question in enumerate(questions, 1):
                    print(f"\n   {i}. {question['question']}")
                    if question.get('options'):
                        for j, option in enumerate(question['options'], 1):
                            print(f"      {j}) {option}")
                    if question.get('context'):
                        print(f"      üí° {question['context']}")
                
                # 2. –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
                print("\n2Ô∏è‚É£ –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã AI...")
                
                answers = [
                    {"question_id": "q1", "answer": "–£–≤–µ–ª–∏—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö"},
                    {"question_id": "q2", "answer": ["–í–Ω–µ—à–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—ã", "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"]},
                    {"question_id": "q3", "answer": "–í—ã—Å–æ–∫–∞—è (10K-100K)"}
                ]
                
                answer_response = await self.client.post(
                    f"{self.server_url}/api/v1/generate/answer",
                    json={"session_id": session_id, "answers": answers}
                )
                
                if answer_response.status_code == 200:
                    answer_result = answer_response.json()
                    print(f"‚úÖ –û—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                    print(f"üéØ –ì–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {answer_result['is_ready_to_generate']}")
                    
                    if answer_result['is_ready_to_generate']:
                        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π RFC
                        print("\n3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π RFC –¥–æ–∫—É–º–µ–Ω—Ç...")
                        
                        final_response = await self.client.post(
                            f"{self.server_url}/api/v1/generate/finalize",
                            json={
                                "session_id": session_id,
                                "additional_requirements": "–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
                            }
                        )
                        
                        if final_response.status_code == 200:
                            rfc_result = final_response.json()
                            rfc = rfc_result["rfc"]
                            
                            print(f"‚úÖ RFC –¥–æ–∫—É–º–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
                            print(f"üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ: {rfc['title']}")
                            print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {rfc['summary']}")
                            print(f"üìö –†–∞–∑–¥–µ–ª–æ–≤: {len(rfc['sections'])}")
                            print(f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(rfc['sources_used'])}")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É RFC
                            print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ RFC:")
                            for section in rfc['sections']:
                                print(f"   {section['title']}")
                                content_preview = section['content'][:100] + "..." if len(section['content']) > 100 else section['content']
                                print(f"      {content_preview}")
                            
                            return rfc
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ RFC: {final_response.text}")
                    else:
                        print("‚ùì –ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤: {answer_response.text}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ RFC: {e}")
    
    async def demo_semantic_search(self) -> None:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫."""
        print("\nüîç === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–ò–°–ö–ê ===")
        
        search_queries = [
            "–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ API gateway",
            "—Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π push notifications",
            "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
            "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ metrics"
        ]
        
        for i, query in enumerate(search_queries, 1):
            print(f"\n{i}Ô∏è‚É£ –ü–æ–∏—Å–∫: '{query}'")
            
            try:
                search_request = {
                    "query": query,
                    "sources": [],  # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
                    "source_types": ["confluence", "gitlab", "uploaded_file"],
                    "limit": 3,
                    "threshold": 0.7,
                    "include_content": False
                }
                
                response = await self.client.post(
                    f"{self.server_url}/api/v1/search",
                    json=search_request
                )
                
                if response.status_code == 200:
                    result = response.json()
                    results = result["results"]
                    
                    print(f"   üìä –ù–∞–π–¥–µ–Ω–æ: {result['total_found']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ {result['search_time_ms']}–º—Å")
                    print(f"   üîç –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(result['sources_searched'])}")
                    
                    if results:
                        print("   üìÑ –¢–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                        for j, doc in enumerate(results, 1):
                            print(f"      {j}. {doc['title']} ({doc['relevance_score']:.2f})")
                            print(f"         üìÅ {doc['source_name']} | üë§ {doc.get('author', 'N/A')}")
                            print(f"         üí¨ {doc['snippet'][:80]}...")
                            if doc.get('highlights'):
                                print(f"         üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(doc['highlights'][:3])}")
                    else:
                        print("   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.text}")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
    
    async def demo_feedback_system(self, rfc_id: str = None) -> None:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        print("\nüëç === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò ===")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º RFC ID –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ ID
        target_id = rfc_id or "demo_rfc_12345"
        
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        print("\n1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å...")
        
        try:
            feedback_request = {
                "target_id": target_id,
                "context": "rfc_generation",
                "feedback_type": "like",
                "rating": 5,
                "comment": "–û—Ç–ª–∏—á–Ω—ã–π RFC! –í—Å–µ –∞—Å–ø–µ–∫—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞–Ω—ã, –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ä–∞–∑–¥–µ–ª –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
                "session_id": "demo_session"
            }
            
            response = await self.client.post(
                f"{self.server_url}/api/v1/feedback",
                json=feedback_request
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"   ‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {result['feedback_id']}")
                print(f"   üéâ {result['message']}")
                print(f"   üèÜ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—á–∫–æ–≤: {result['points_earned']}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.text}")
        
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        print("\n2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å...")
        
        try:
            critical_feedback = {
                "target_id": target_id,
                "context": "rfc_generation", 
                "feedback_type": "dislike",
                "rating": 2,
                "reason": "incomplete",
                "comment": "RFC –Ω–µ–ø–æ–ª–Ω—ã–π, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ—Ç–∞–ª–µ–π –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.",
                "session_id": "demo_session"
            }
            
            response = await self.client.post(
                f"{self.server_url}/api/v1/feedback",
                json=critical_feedback
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"   ‚úÖ –ö—Ä–∏—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {result['feedback_id']}")
                print(f"   üìù {result['message']}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.text}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # 3. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        print("\n3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...")
        
        try:
            response = await self.client.get(
                f"{self.server_url}/api/v1/feedback/stats/{target_id}"
            )
            
            if response.status_code == 200:
                stats = response.json()
                print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {target_id}:")
                print(f"      üìù –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {stats['total_feedback']}")
                print(f"      üëç –õ–∞–π–∫–æ–≤: {stats['likes']}")
                print(f"      üëé –î–∏–∑–ª–∞–π–∫–æ–≤: {stats['dislikes']}")
                print(f"      üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ª–∞–π–∫–æ–≤: {stats['like_percentage']:.1f}%")
                if stats.get('average_rating'):
                    print(f"      ‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {stats['average_rating']:.1f}/5")
                if stats.get('most_common_dislike_reason'):
                    print(f"      ‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: {stats['most_common_dislike_reason']}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.text}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # 4. –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
        print("\n4Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏...")
        
        try:
            response = await self.client.get(
                f"{self.server_url}/api/v1/feedback/analytics?context=rfc_generation&days=30"
            )
            
            if response.status_code == 200:
                analytics = response.json()
                if analytics:
                    for analytic in analytics:
                        print(f"   ü§ñ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è {analytic['context']}:")
                        print(f"      üìä –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {analytic['total_items']}")
                        print(f"      üìà –ü–æ–∫—Ä—ã—Ç–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é: {analytic['feedback_coverage']:.1%}")
                        print(f"      üëç –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: {analytic['positive_ratio']:.1%}")
                        if analytic.get('top_issues'):
                            print(f"      ‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: {', '.join(analytic['top_issues'][:3])}")
                        if analytic.get('recommendations'):
                            print(f"      üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                            for rec in analytic['recommendations'][:2]:
                                print(f"         ‚Ä¢ {rec}")
                else:
                    print("   üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {response.text}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def demo_data_sources(self) -> None:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö."""
        print("\nüîó === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ò–°–¢–û–ß–ù–ò–ö–ê–ú–ò –î–ê–ù–ù–´–• ===")
        
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        
        try:
            response = await self.client.get(f"{self.server_url}/api/v1/sources")
            
            if response.status_code == 200:
                sources = response.json()
                print(f"   üìö –ù–∞–π–¥–µ–Ω–æ {len(sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:")
                
                for source in sources:
                    status = "üü¢" if source['is_enabled'] else "üî¥"
                    last_sync = source.get('last_sync', '–ù–∏–∫–æ–≥–¥–∞')
                    print(f"      {status} {source['name']} ({source['source_type']})")
                    print(f"         üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {last_sync}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {response.text}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # 2. –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        
        try:
            response = await self.client.get(f"{self.server_url}/api/v1/sources/types")
            
            if response.status_code == 200:
                source_types = response.json()
                print(f"   üõ†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è {len(source_types)} —Ç–∏–ø–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:")
                
                for source_type in source_types:
                    print(f"      üìå {source_type['name']} ({source_type['type']})")
                    print(f"         üìù {source_type['description']}")
                    
                    config_keys = list(source_type['required_config'].keys())[:3]
                    print(f"         üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {', '.join(config_keys)}...")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤: {response.text}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # 3. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        print("\n3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
        
        try:
            response = await self.client.get(f"{self.server_url}/api/v1/sync/status")
            
            if response.status_code == 200:
                sync_status = response.json()
                print(f"   üîÑ {sync_status['message']}")
                print(f"   üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {sync_status['overall_status']}")
                
                if sync_status.get('results'):
                    print("   üìã –î–µ—Ç–∞–ª–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
                    for result in sync_status['results']:
                        status_icon = "‚úÖ" if result['status'] == "completed" else "‚ùå"
                        print(f"      {status_icon} {result['source_name']}: {result['documents_processed']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                        if result.get('duration_seconds'):
                            print(f"         ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result['duration_seconds']:.1f}—Å")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.text}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def demo_examples(self) -> None:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤."""
        print("\nüìö === –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ===")
        
        try:
            response = await self.client.get(f"{self.server_url}/api/v1/generate/examples")
            
            if response.status_code == 200:
                examples = response.json()
                
                for task_type, example in examples.items():
                    print(f"\nüìù {example['title']}:")
                    print(f"   üí° –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:")
                    print(f"      \"{example['example']}\"")
                    print(f"   üí≠ –°–æ–≤–µ—Ç—ã:")
                    for tip in example['tips']:
                        print(f"      ‚Ä¢ {tip}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def run_full_demo(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."""
        print("ü§ñ AI ASSISTANT MVP - –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        if not await self.check_health():
            print("\n‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ AI Assistant –∑–∞–ø—É—â–µ–Ω:")
            print("   python3 app/main.py")
            return
        
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
        try:
            response = await self.client.get(f"{self.server_url}/")
            if response.status_code == 200:
                info = response.json()
                print(f"\nüè∑Ô∏è {info['name']} v{info['version']}")
                print(f"üìù {info['description']}")
                print(f"üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: {info['environment']}")
                print(f"üìä –°—Ç–∞—Ç—É—Å: {info['status']}")
                
                print("\nüöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
                for feature in info['features']:
                    print(f"   {feature}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        try:
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è RFC –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            rfc = await self.demo_rfc_generation()
            rfc_id = rfc.get('id') if rfc else None
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
            await self.demo_semantic_search()
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            await self.demo_feedback_system(rfc_id)
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
            await self.demo_data_sources()
            
            # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            await self.demo_examples()
            
            print("\nüéâ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ===")
            print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("   1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö (Confluence, Jira, GitLab)")
            print("   2. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ —Å OpenAI –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π LLM")
            print("   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ cron")
            print("   4. –†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            print("   5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É")
            
            print(f"\nüìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {self.server_url}/docs")
            print(f"üîç –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {self.server_url}/redoc")
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        finally:
            await self.client.aclose()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    parser = argparse.ArgumentParser(
        description="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AI Assistant MVP"
    )
    parser.add_argument(
        "--server-url",
        default="http://localhost:8000",
        help="URL —Å–µ—Ä–≤–µ—Ä–∞ AI Assistant (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:8000)"
    )
    parser.add_argument(
        "--quick",
        action="store_true",
        help="–ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)"
    )
    
    args = parser.parse_args()
    
    print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: {args.server_url}")
    
    demo = AIAssistantDemo(args.server_url)
    
    if args.quick:
        print("‚ö° –†–µ–∂–∏–º –±—ã—Å—Ç—Ä–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
        if await demo.check_health():
            await demo.demo_rfc_generation()
            await demo.demo_semantic_search()
        await demo.client.aclose()
    else:
        await demo.run_full_demo()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        sys.exit(0)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 