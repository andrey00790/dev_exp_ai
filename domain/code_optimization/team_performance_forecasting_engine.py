"""
üìä Team Performance Forecasting Engine - Phase 4B.4

–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
"""

import asyncio
import logging
import math
import statistics
from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Tuple
from uuid import uuid4

logger = logging.getLogger(__name__)


class TeamMetricType(Enum):
    """–¢–∏–ø—ã –º–µ—Ç—Ä–∏–∫ –∫–æ–º–∞–Ω–¥—ã"""

    VELOCITY = "velocity"
    CYCLE_TIME = "cycle_time"
    QUALITY_SCORE = "quality_score"
    BUG_RATE = "bug_rate"


class PerformanceTrend(Enum):
    """–¢—Ä–µ–Ω–¥—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""

    IMPROVING = "improving"
    STABLE = "stable"
    DECLINING = "declining"
    VOLATILE = "volatile"


class ForecastAccuracy(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞"""

    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    UNCERTAIN = "uncertain"


class TeamRisk(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Ä–∏—Å–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã"""

    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    MINIMAL = "minimal"


@dataclass
class TeamMember:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–ª–µ–Ω–µ –∫–æ–º–∞–Ω–¥—ã"""

    member_id: str = field(default_factory=lambda: str(uuid4()))
    name: str = ""
    role: str = ""
    experience_level: str = ""
    performance_score: float = 0.0
    availability: float = 1.0


@dataclass
class PerformanceMetric:
    """–ú–µ—Ç—Ä–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""

    metric_type: TeamMetricType
    value: float
    timestamp: datetime
    unit: str = ""


@dataclass
class TeamPerformanceForecast:
    """–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã"""

    forecast_id: str = field(default_factory=lambda: str(uuid4()))
    team_id: str = ""
    forecast_period_days: int = 30
    predicted_velocity: float = 0.0
    predicted_quality_score: float = 0.0
    predicted_bug_rate: float = 0.0
    confidence_level: ForecastAccuracy = ForecastAccuracy.MEDIUM
    risk_level: TeamRisk = TeamRisk.MEDIUM
    trend: PerformanceTrend = PerformanceTrend.STABLE
    recommendations: List[str] = field(default_factory=list)
    risk_factors: List[str] = field(default_factory=list)
    created_at: datetime = field(default_factory=datetime.now)


@dataclass
class TeamAnalysisReport:
    """–û—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–º–∞–Ω–¥—ã"""

    report_id: str = field(default_factory=lambda: str(uuid4()))
    team_id: str = ""
    current_performance_score: float = 0.0
    performance_trend: PerformanceTrend = PerformanceTrend.STABLE
    strengths: List[str] = field(default_factory=list)
    weaknesses: List[str] = field(default_factory=list)
    improvement_opportunities: List[str] = field(default_factory=list)
    forecasts: List[TeamPerformanceForecast] = field(default_factory=list)
    team_metrics: Dict[str, float] = field(default_factory=dict)
    analysis_duration: float = 0.0
    created_at: datetime = field(default_factory=datetime.now)


class VelocityAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã"""

    async def analyze_velocity_trends(
        self, velocity_data: List[PerformanceMetric]
    ) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        if len(velocity_data) < 3:
            return {
                "trend": PerformanceTrend.STABLE,
                "average_velocity": 0.0,
                "velocity_variance": 0.0,
                "confidence": ForecastAccuracy.UNCERTAIN,
            }

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        sorted_data = sorted(velocity_data, key=lambda x: x.timestamp)
        velocities = [metric.value for metric in sorted_data]

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
        avg_velocity = statistics.mean(velocities)
        velocity_variance = (
            statistics.variance(velocities) if len(velocities) > 1 else 0
        )

        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
        trend = self._calculate_trend(velocities)
        confidence = self._calculate_confidence(velocities, velocity_variance)

        return {
            "trend": trend,
            "average_velocity": avg_velocity,
            "velocity_variance": velocity_variance,
            "confidence": confidence,
            "velocity_stability": self._calculate_stability(velocities),
        }

    async def predict_future_velocity(
        self, historical_data: List[PerformanceMetric], periods_ahead: int = 3
    ) -> Dict[str, Any]:
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥—É—â–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        if len(historical_data) < 3:
            return {
                "predicted_velocity": 0.0,
                "confidence": ForecastAccuracy.UNCERTAIN,
                "prediction_range": (0.0, 0.0),
            }

        velocities = [
            metric.value
            for metric in sorted(historical_data, key=lambda x: x.timestamp)
        ]

        # –ü—Ä–æ—Å—Ç–æ–π –ª–∏–Ω–µ–π–Ω—ã–π —Ç—Ä–µ–Ω–¥
        predicted_velocity = self._linear_trend_prediction(velocities, periods_ahead)

        # –†–∞—Å—á–µ—Ç –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        variance = statistics.variance(velocities) if len(velocities) > 1 else 0
        std_dev = math.sqrt(variance)

        prediction_range = (
            max(0, predicted_velocity - 2 * std_dev),
            predicted_velocity + 2 * std_dev,
        )

        confidence = self._calculate_confidence(velocities, variance)

        return {
            "predicted_velocity": predicted_velocity,
            "confidence": confidence,
            "prediction_range": prediction_range,
            "trend_direction": self._calculate_trend(velocities),
        }

    def _calculate_trend(self, values: List[float]) -> PerformanceTrend:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞"""
        if len(values) < 3:
            return PerformanceTrend.STABLE

        recent_values = values[-min(6, len(values)) :]

        # –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
        n = len(recent_values)
        x = list(range(n))
        y = recent_values

        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞–∫–ª–æ–Ω–∞
        if n > 1:
            slope = (n * sum(i * y[i] for i in range(n)) - sum(x) * sum(y)) / (
                n * sum(i * i for i in range(n)) - sum(x) ** 2
            )
        else:
            slope = 0

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
        if slope > 0.1:
            return PerformanceTrend.IMPROVING
        elif slope < -0.1:
            return PerformanceTrend.DECLINING
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            variance = (
                statistics.variance(recent_values) if len(recent_values) > 1 else 0
            )
            avg = statistics.mean(recent_values)
            cv = (math.sqrt(variance) / avg) if avg > 0 else 0

            if cv > 0.3:
                return PerformanceTrend.VOLATILE
            else:
                return PerformanceTrend.STABLE

    def _calculate_confidence(
        self, values: List[float], variance: float
    ) -> ForecastAccuracy:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        if len(values) < 3:
            return ForecastAccuracy.UNCERTAIN

        avg = statistics.mean(values)
        cv = (math.sqrt(variance) / avg) if avg > 0 else 1

        if cv < 0.1:
            return ForecastAccuracy.HIGH
        elif cv < 0.25:
            return ForecastAccuracy.MEDIUM
        elif cv < 0.5:
            return ForecastAccuracy.LOW
        else:
            return ForecastAccuracy.UNCERTAIN

    def _calculate_stability(self, values: List[float]) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (0-1)"""
        if len(values) < 2:
            return 1.0

        variance = statistics.variance(values)
        avg = statistics.mean(values)
        cv = (math.sqrt(variance) / avg) if avg > 0 else 1

        return max(0, 1 - cv)

    def _linear_trend_prediction(
        self, values: List[float], periods_ahead: int
    ) -> float:
        """–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏–Ω–µ–π–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞"""
        if len(values) < 2:
            return values[0] if values else 0.0

        n = len(values)
        x = list(range(n))
        y = values

        x_mean = sum(x) / n
        y_mean = sum(y) / n

        numerator = sum((x[i] - x_mean) * (y[i] - y_mean) for i in range(n))
        denominator = sum((x[i] - x_mean) ** 2 for i in range(n))

        if denominator == 0:
            return y_mean

        slope = numerator / denominator
        intercept = y_mean - slope * x_mean

        future_x = n + periods_ahead - 1
        prediction = slope * future_x + intercept

        return max(0, prediction)


class TeamPerformanceForecastingEngine:
    """–î–≤–∏–∂–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã"""

    def __init__(self):
        self.velocity_analyzer = VelocityAnalyzer()

        # –ú–µ—Ç—Ä–∏–∫–∏ –¥–≤–∏–∂–∫–∞
        self.metrics = {
            "forecasts_generated": 0,
            "teams_analyzed": 0,
            "average_forecast_accuracy": 0.0,
            "total_recommendations": 0,
        }

    async def analyze_team_performance(
        self,
        team_id: str,
        historical_metrics: Dict[str, List[PerformanceMetric]],
        team_members: List[TeamMember] = None,
    ) -> TeamAnalysisReport:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã"""
        analysis_start = datetime.now()

        try:
            logger.info(f"üìä –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã: {team_id}")

            report = TeamAnalysisReport(team_id=team_id)

            # –ê–Ω–∞–ª–∏–∑ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            velocity_analysis = await self.velocity_analyzer.analyze_velocity_trends(
                historical_metrics.get("velocity", [])
            )

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            forecasts = await self._generate_forecasts(team_id, historical_metrics)

            # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            current_performance = self._calculate_current_performance(velocity_analysis)

            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report.current_performance_score = current_performance
            report.performance_trend = velocity_analysis.get(
                "trend", PerformanceTrend.STABLE
            )
            report.forecasts = forecasts
            report.team_metrics = {
                "average_velocity": velocity_analysis.get("average_velocity", 0.0),
                "velocity_stability": velocity_analysis.get("velocity_stability", 0.0),
            }

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            report.improvement_opportunities = [
                "–†–µ–≥—É–ª—è—Ä–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã",
                "–ü—Ä–æ–≤–æ–¥–∏—Ç–µ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤—ã –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —É–ª—É—á—à–µ–Ω–∏—è",
            ]

            analysis_duration = (datetime.now() - analysis_start).total_seconds()
            report.analysis_duration = analysis_duration

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            self.metrics["teams_analyzed"] += 1
            self.metrics["forecasts_generated"] += len(forecasts)

            logger.info(
                f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω: {len(forecasts)} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ"
            )
            return report

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã: {e}")
            raise

    def _calculate_current_performance(self, velocity_analysis: Dict) -> float:
        """–†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (0-10)"""
        velocity_score = min(10, velocity_analysis.get("average_velocity", 0) / 10)
        return min(10.0, max(0.0, velocity_score))

    async def _generate_forecasts(
        self, team_id: str, historical_metrics: Dict[str, List[PerformanceMetric]]
    ) -> List[TeamPerformanceForecast]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
        forecasts = []

        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        forecast_periods = [7, 14, 30]

        for period in forecast_periods:
            forecast = TeamPerformanceForecast(
                team_id=team_id, forecast_period_days=period
            )

            # –ü—Ä–æ–≥–Ω–æ–∑ —Å–∫–æ—Ä–æ—Å—Ç–∏
            velocity_data = historical_metrics.get("velocity", [])
            if velocity_data:
                velocity_forecast = (
                    await self.velocity_analyzer.predict_future_velocity(
                        velocity_data, periods_ahead=period // 7
                    )
                )
                forecast.predicted_velocity = velocity_forecast.get(
                    "predicted_velocity", 0.0
                )
                forecast.confidence_level = velocity_forecast.get(
                    "confidence", ForecastAccuracy.MEDIUM
                )

            # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –∫–∞—á–µ—Å—Ç–≤–∞
            forecast.predicted_quality_score = 7.5  # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞
            forecast.predicted_bug_rate = 2.0  # –ù–∏–∑–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –±–∞–≥–æ–≤

            # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
            forecast.risk_level = self._assess_risk_level(forecast)
            forecast.recommendations = self._generate_forecast_recommendations(forecast)

            forecasts.append(forecast)

        return forecasts

    def _assess_risk_level(self, forecast: TeamPerformanceForecast) -> TeamRisk:
        """–û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
        risk_score = 0

        if forecast.predicted_velocity < 5:
            risk_score += 2

        if forecast.predicted_quality_score < 6.0:
            risk_score += 3

        if forecast.confidence_level == ForecastAccuracy.UNCERTAIN:
            risk_score += 2

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
        if risk_score >= 6:
            return TeamRisk.CRITICAL
        elif risk_score >= 4:
            return TeamRisk.HIGH
        elif risk_score >= 2:
            return TeamRisk.MEDIUM
        elif risk_score >= 1:
            return TeamRisk.LOW
        else:
            return TeamRisk.MINIMAL

    def _generate_forecast_recommendations(
        self, forecast: TeamPerformanceForecast
    ) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        recommendations = []

        if forecast.risk_level in [TeamRisk.CRITICAL, TeamRisk.HIGH]:
            recommendations.append("–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞")

        if forecast.predicted_velocity < 5:
            recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã")

        recommendations.append("–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

        return recommendations

    async def quick_team_assessment(
        self, team_id: str, basic_metrics: Dict[str, float]
    ) -> Dict[str, Any]:
        """–ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
        start_time = datetime.now()

        velocity = basic_metrics.get("velocity", 0.0)
        quality = basic_metrics.get("quality_score", 7.0)

        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏
        performance_score = min(10, velocity / 10) * 0.6 + quality * 0.4

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
        if performance_score >= 8.0:
            risk_level = TeamRisk.MINIMAL
        elif performance_score >= 6.5:
            risk_level = TeamRisk.LOW
        elif performance_score >= 5.0:
            risk_level = TeamRisk.MEDIUM
        else:
            risk_level = TeamRisk.HIGH

        duration = (datetime.now() - start_time).total_seconds()

        return {
            "team_id": team_id,
            "performance_score": round(performance_score, 2),
            "risk_level": risk_level.value,
            "quick_recommendations": [
                "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
                "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã",
            ],
            "assessment_duration": duration,
            "timestamp": datetime.now().isoformat(),
        }

    def get_forecasting_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–≤–∏–∂–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return {
            "engine_status": "active",
            "metrics": self.metrics,
            "capabilities": {
                "velocity_forecasting": True,
                "risk_assessment": True,
                "team_analysis": True,
            },
            "last_updated": datetime.now().isoformat(),
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_forecasting_engine: Optional[TeamPerformanceForecastingEngine] = None


async def get_team_performance_forecasting_engine() -> TeamPerformanceForecastingEngine:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–≤–∏–∂–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global _forecasting_engine
    if _forecasting_engine is None:
        _forecasting_engine = TeamPerformanceForecastingEngine()
    return _forecasting_engine
