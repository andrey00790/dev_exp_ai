"""
Test Pyramid Executor for AI Assistant MVP
–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –ø–∏—Ä–∞–º–∏–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
- Unit Tests (–±–∞–∑–∞ –ø–∏—Ä–∞–º–∏–¥—ã)
- Integration Tests (—Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å)
- E2E Tests (–≤–µ—Ä—à–∏–Ω–∞ –ø–∏—Ä–∞–º–∏–¥—ã)
- Performance/Load Tests (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã)
"""

import json
import logging
import subprocess
import sys
import time
from dataclasses import dataclass, field
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@dataclass
class TestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤"""
    test_type: str
    passed: int
    failed: int
    skipped: int
    duration: float
    coverage: float = 0.0
    exit_code: int = 0
    details: Dict[str, Any] = field(default_factory=dict)

class TestPyramidExecutor:
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–∏—Ä–∞–º–∏–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, project_root: Path = None):
        self.project_root = project_root or Path.cwd()
        self.results: List[TestResult] = []
        self.start_time = datetime.now()
        
    def run_unit_tests(self) -> TestResult:
        """
        –ó–∞–ø—É—Å–∫ Unit-—Ç–µ—Å—Ç–æ–≤ (–±–∞–∑–∞ –ø–∏—Ä–∞–º–∏–¥—ã)
        –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π
        """
        logger.info("üî¨ Running Unit Tests...")
        
        cmd = [
            "python", "-m", "pytest",
            "tests/unit/",
            "--cov=app",
            "--cov=models", 
            "--cov=services",
            "--cov-report=term-missing",
            "--cov-report=html:htmlcov/unit",
            "--cov-report=json:htmlcov/unit-coverage.json",
            "--json-report",
            "--json-report-file=test-results/unit-results.json",
            "-v",
            "--tb=short",
            "--durations=10"
        ]
        
        start_time = time.time()
        result = subprocess.run(cmd, capture_output=True, text=True, cwd=self.project_root)
        duration = time.time() - start_time
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        passed, failed, skipped = self._parse_pytest_output(result.stdout)
        coverage = self._extract_coverage("htmlcov/unit-coverage.json")
        
        test_result = TestResult(
            test_type="Unit Tests",
            passed=passed,
            failed=failed,
            skipped=skipped,
            duration=duration,
            coverage=coverage,
            exit_code=result.returncode,
            details={
                "stdout": result.stdout[-1000:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤
                "stderr": result.stderr[-1000:] if result.stderr else ""
            }
        )
        
        self.results.append(test_result)
        self._log_test_result(test_result)
        return test_result
    
    def run_integration_tests(self) -> TestResult:
        """
        –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ (—Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å)
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        """
        logger.info("üîÑ Running Integration Tests...")
        
        cmd = [
            "python", "-m", "pytest",
            "tests/integration/",
            "--cov=app",
            "--cov-report=html:htmlcov/integration",
            "--cov-report=json:htmlcov/integration-coverage.json",
            "--json-report",
            "--json-report-file=test-results/integration-results.json",
            "-v",
            "--tb=short",
            "--durations=10",
            "-x"  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        ]
        
        start_time = time.time()
        result = subprocess.run(cmd, capture_output=True, text=True, cwd=self.project_root)
        duration = time.time() - start_time
        
        passed, failed, skipped = self._parse_pytest_output(result.stdout)
        coverage = self._extract_coverage("htmlcov/integration-coverage.json")
        
        test_result = TestResult(
            test_type="Integration Tests",
            passed=passed,
            failed=failed,
            skipped=skipped,
            duration=duration,
            coverage=coverage,
            exit_code=result.returncode,
            details={
                "stdout": result.stdout[-1000:],
                "stderr": result.stderr[-1000:] if result.stderr else ""
            }
        )
        
        self.results.append(test_result)
        self._log_test_result(test_result)
        return test_result
    
    def run_e2e_tests(self) -> TestResult:
        """
        –ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤ (–≤–µ—Ä—à–∏–Ω–∞ –ø–∏—Ä–∞–º–∏–¥—ã) 
        –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        """
        logger.info("üéØ Running E2E Tests...")
        
        cmd = [
            "python", "-m", "pytest",
            "tests/e2e/",
            "--json-report",
            "--json-report-file=test-results/e2e-results.json",
            "-v",
            "--tb=short",
            "--durations=10",
            "-x"
        ]
        
        start_time = time.time()
        result = subprocess.run(cmd, capture_output=True, text=True, cwd=self.project_root)
        duration = time.time() - start_time
        
        passed, failed, skipped = self._parse_pytest_output(result.stdout)
        
        test_result = TestResult(
            test_type="E2E Tests",
            passed=passed,
            failed=failed,
            skipped=skipped,
            duration=duration,
            exit_code=result.returncode,
            details={
                "stdout": result.stdout[-1000:],
                "stderr": result.stderr[-1000:] if result.stderr else ""
            }
        )
        
        self.results.append(test_result)
        self._log_test_result(test_result)
        return test_result
    
    def run_performance_tests(self) -> TestResult:
        """
        –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        """
        logger.info("‚ö° Running Performance Tests...")
        
        cmd = [
            "python", "-m", "pytest",
            "tests/performance/",
            "--json-report",
            "--json-report-file=test-results/performance-results.json",
            "-v",
            "--tb=short",
            "--durations=10"
        ]
        
        start_time = time.time()
        result = subprocess.run(cmd, capture_output=True, text=True, cwd=self.project_root)
        duration = time.time() - start_time
        
        passed, failed, skipped = self._parse_pytest_output(result.stdout)
        
        test_result = TestResult(
            test_type="Performance Tests",
            passed=passed,
            failed=failed,
            skipped=skipped,
            duration=duration,
            exit_code=result.returncode,
            details={
                "stdout": result.stdout[-1000:],
                "stderr": result.stderr[-1000:] if result.stderr else ""
            }
        )
        
        self.results.append(test_result)
        self._log_test_result(test_result)
        return test_result
    
    def run_smoke_tests(self) -> TestResult:
        """
        –ó–∞–ø—É—Å–∫ smoke —Ç–µ—Å—Ç–æ–≤
        –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        """
        logger.info("üí® Running Smoke Tests...")
        
        cmd = [
            "python", "-m", "pytest",
            "tests/smoke/",
            "--json-report",
            "--json-report-file=test-results/smoke-results.json",
            "-v",
            "--tb=line"
        ]
        
        start_time = time.time()
        result = subprocess.run(cmd, capture_output=True, text=True, cwd=self.project_root)
        duration = time.time() - start_time
        
        passed, failed, skipped = self._parse_pytest_output(result.stdout)
        
        test_result = TestResult(
            test_type="Smoke Tests",
            passed=passed,
            failed=failed,
            skipped=skipped,
            duration=duration,
            exit_code=result.returncode,
            details={
                "stdout": result.stdout[-1000:],
                "stderr": result.stderr[-1000:] if result.stderr else ""
            }
        )
        
        self.results.append(test_result)
        self._log_test_result(test_result)
        return test_result
    
    def run_full_pyramid(self, skip_on_failure: bool = False) -> List[TestResult]:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø–∏—Ä–∞–º–∏–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        """
        logger.info("üèóÔ∏è Starting Full Test Pyramid Execution...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self._setup_result_directories()
        
        test_functions = [
            self.run_smoke_tests,      # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            self.run_unit_tests,       # –ë–∞–∑–∞ –ø–∏—Ä–∞–º–∏–¥—ã
            self.run_integration_tests, # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
            self.run_e2e_tests,        # –í–µ—Ä—à–∏–Ω–∞ –ø–∏—Ä–∞–º–∏–¥—ã
            self.run_performance_tests  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        ]
        
        for test_func in test_functions:
            try:
                result = test_func()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                if skip_on_failure and result.exit_code != 0:
                    logger.error(f"‚ùå {result.test_type} failed, stopping pyramid execution")
                    break
                    
            except Exception as e:
                logger.error(f"üí• Error executing {test_func.__name__}: {e}")
                error_result = TestResult(
                    test_type=test_func.__name__.replace("run_", "").replace("_", " ").title(),
                    passed=0,
                    failed=1,
                    skipped=0,
                    duration=0,
                    exit_code=1,
                    details={"error": str(e)}
                )
                self.results.append(error_result)
                
                if skip_on_failure:
                    break
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        self.generate_pyramid_report()
        return self.results
    
    def _parse_pytest_output(self, output: str) -> tuple[int, int, int]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ pytest –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        passed = failed = skipped = 0
        
        # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        for line in output.split('\n'):
            if 'passed' in line or 'failed' in line or 'error' in line:
                # –ü—Ä–∏–º–µ—Ä—ã: "15 passed, 2 failed, 1 skipped"
                parts = line.split(',')
                for part in parts:
                    part = part.strip()
                    if 'passed' in part:
                        passed = int(part.split()[0])
                    elif 'failed' in part or 'error' in part:
                        failed = int(part.split()[0])
                    elif 'skipped' in part:
                        skipped = int(part.split()[0])
                break
        
        return passed, failed, skipped
    
    def _extract_coverage(self, coverage_file: str) -> float:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            coverage_path = self.project_root / coverage_file
            if coverage_path.exists():
                with open(coverage_path, 'r') as f:
                    data = json.load(f)
                    return data.get('totals', {}).get('percent_covered', 0.0)
        except Exception as e:
            logger.warning(f"Could not extract coverage from {coverage_file}: {e}")
        
        return 0.0
    
    def _log_test_result(self, result: TestResult):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        status_emoji = "‚úÖ" if result.exit_code == 0 else "‚ùå"
        logger.info(
            f"{status_emoji} {result.test_type}: "
            f"{result.passed} passed, {result.failed} failed, {result.skipped} skipped "
            f"({result.duration:.2f}s)"
            + (f", coverage: {result.coverage:.1f}%" if result.coverage > 0 else "")
        )
    
    def _setup_result_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        directories = ['test-results', 'htmlcov', 'htmlcov/unit', 'htmlcov/integration']
        for directory in directories:
            (self.project_root / directory).mkdir(parents=True, exist_ok=True)
    
    def generate_pyramid_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–∏—Ä–∞–º–∏–¥–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        total_duration = (datetime.now() - self.start_time).total_seconds()
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–∏—Ö –º–µ—Ç—Ä–∏–∫
        total_passed = sum(r.passed for r in self.results)
        total_failed = sum(r.failed for r in self.results)
        total_skipped = sum(r.skipped for r in self.results)
        total_tests = total_passed + total_failed + total_skipped
        
        # –°—Ä–µ–¥–Ω–∏–π coverage (–¥–ª—è —Ç–µ—Ö —Ç–µ—Å—Ç–æ–≤, –≥–¥–µ –æ–Ω –µ—Å—Ç—å)
        coverage_results = [r for r in self.results if r.coverage > 0]
        avg_coverage = sum(r.coverage for r in coverage_results) / len(coverage_results) if coverage_results else 0
        
        report = f"""
# üèóÔ∏è Test Pyramid Execution Report
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Total Duration: {total_duration:.2f} seconds

## üìä Overall Summary
- **Total Tests**: {total_tests}
- **Passed**: {total_passed} ‚úÖ
- **Failed**: {total_failed} ‚ùå
- **Skipped**: {total_skipped} ‚è∏Ô∏è
- **Average Coverage**: {avg_coverage:.1f}%

## üìà Test Pyramid Results

"""
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —É—Ä–æ–≤–Ω—é
        for result in self.results:
            status = "‚úÖ PASSED" if result.exit_code == 0 else "‚ùå FAILED"
            coverage_info = f" | Coverage: {result.coverage:.1f}%" if result.coverage > 0 else ""
            
            report += f"""### {result.test_type} {status}
- Tests: {result.passed + result.failed + result.skipped}
- Passed: {result.passed}
- Failed: {result.failed}  
- Skipped: {result.skipped}
- Duration: {result.duration:.2f}s{coverage_info}

"""
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        if total_failed > 0:
            report += """## üîß Recommendations for Failed Tests

1. **Check test-results/*.json** for detailed failure information
2. **Review htmlcov/index.html** for coverage gaps
3. **Run individual test types** to isolate issues:
   ```bash
   pytest tests/unit/ -v --tb=long
   pytest tests/integration/ -v --tb=long  
   ```
4. **Check service dependencies** for integration test failures
5. **Verify test data and mocks** for E2E test issues

"""
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_path = self.project_root / "test-results" / "pyramid-report.md"
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report)
        
        # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º JSON –æ—Ç—á–µ—Ç –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        json_report = {
            "timestamp": datetime.now().isoformat(),
            "total_duration": total_duration,
            "summary": {
                "total_tests": total_tests,
                "passed": total_passed,
                "failed": total_failed,
                "skipped": total_skipped,
                "average_coverage": avg_coverage
            },
            "results": [
                {
                    "test_type": r.test_type,
                    "passed": r.passed,
                    "failed": r.failed,
                    "skipped": r.skipped,
                    "duration": r.duration,
                    "coverage": r.coverage,
                    "exit_code": r.exit_code
                }
                for r in self.results
            ]
        }
        
        json_report_path = self.project_root / "test-results" / "pyramid-report.json"
        with open(json_report_path, 'w', encoding='utf-8') as f:
            json.dump(json_report, f, indent=2, ensure_ascii=False)
        
        logger.info(f"üìã Test pyramid report saved to {report_path}")
        logger.info(f"üìä JSON report saved to {json_report_path}")
        
        print(report)

if __name__ == "__main__":
    """
    –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø–∏—Ä–∞–º–∏–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Usage:
        python tests/test_pyramid_executor.py [--skip-on-failure]
    """
    import argparse
    
    parser = argparse.ArgumentParser(description="AI Assistant MVP Test Pyramid Executor")
    parser.add_argument(
        "--skip-on-failure", 
        action="store_true",
        help="Stop pyramid execution on first test failure"
    )
    parser.add_argument(
        "--test-type",
        choices=["unit", "integration", "e2e", "performance", "smoke", "all"],
        default="all",
        help="Type of tests to run"
    )
    
    args = parser.parse_args()
    
    executor = TestPyramidExecutor()
    
    if args.test_type == "all":
        results = executor.run_full_pyramid(skip_on_failure=args.skip_on_failure)
    elif args.test_type == "unit":
        results = [executor.run_unit_tests()]
    elif args.test_type == "integration":
        results = [executor.run_integration_tests()]
    elif args.test_type == "e2e":
        results = [executor.run_e2e_tests()]
    elif args.test_type == "performance":
        results = [executor.run_performance_tests()]
    elif args.test_type == "smoke":
        results = [executor.run_smoke_tests()]
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ exit –∫–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    exit_code = 0 if all(r.exit_code == 0 for r in results) else 1
    sys.exit(exit_code) 