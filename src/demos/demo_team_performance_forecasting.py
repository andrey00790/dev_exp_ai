"""
üìä Team Performance Forecasting Engine Demo - Phase 4B.4

–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã.
"""

import asyncio
import time
import logging
import sys
import os
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Team Performance Forecasting Engine"""
    
    print("\n" + "="*80)
    print("üìä TEAM PERFORMANCE FORECASTING ENGINE DEMO - PHASE 4B.4")
    print("="*80)
    
    try:
        # –ò–º–ø–æ—Ä—Ç –¥–≤–∏–∂–∫–∞
        from domain.code_optimization.team_performance_forecasting_engine import (
            get_team_performance_forecasting_engine,
            PerformanceMetric,
            TeamMember,
            TeamMetricType
        )
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–≤–∏–∂–∫–∞
        engine = await get_team_performance_forecasting_engine()
        print(f"‚úÖ Team Performance Forecasting Engine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        await demo_basic_team_analysis(engine, PerformanceMetric, TeamMember, TeamMetricType)
        await demo_quick_assessments(engine)
        await demo_performance_trends(engine, PerformanceMetric, TeamMetricType)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        await show_final_metrics(engine)
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Team Performance Forecasting Engine —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–º–æ: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}", exc_info=True)

async def demo_basic_team_analysis(engine, PerformanceMetric, TeamMember, TeamMetricType):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã"""
    print("\n" + "-"*60)
    print("üìä –ë–ê–ó–û–í–´–ô –ê–ù–ê–õ–ò–ó –ö–û–ú–ê–ù–î–´")
    print("-"*60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
    team_members = [
        TeamMember(
            name="Alice Johnson",
            role="Tech Lead",
            experience_level="senior",
            performance_score=9.0,
            availability=1.0
        ),
        TeamMember(
            name="Bob Smith",
            role="Senior Developer",
            experience_level="senior", 
            performance_score=8.5,
            availability=0.9
        ),
        TeamMember(
            name="Carol Williams",
            role="QA Engineer",
            experience_level="middle",
            performance_score=7.5,
            availability=1.0
        )
    ]
    
    # –ü—Ä–æ—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã
    basic_velocity_data = [
        PerformanceMetric(
            metric_type=TeamMetricType.VELOCITY,
            value=45.0,
            timestamp=datetime.now() - timedelta(days=21)
        ),
        PerformanceMetric(
            metric_type=TeamMetricType.VELOCITY,
            value=52.0,
            timestamp=datetime.now() - timedelta(days=14)
        ),
        PerformanceMetric(
            metric_type=TeamMetricType.VELOCITY,
            value=58.0,
            timestamp=datetime.now() - timedelta(days=7)
        )
    ]
    
    historical_metrics = {'velocity': basic_velocity_data}
    
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ 3 —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    start_time = time.time()
    report = await engine.analyze_team_performance("demo-team-1", historical_metrics, team_members)
    analysis_time = time.time() - start_time
    
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {analysis_time:.3f}s")
    print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
    print(f"   ‚Ä¢ –¢–µ–∫—É—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {report.current_performance_score:.1f}/10")
    print(f"   ‚Ä¢ –¢—Ä–µ–Ω–¥: {report.performance_trend.value.upper()}")
    print(f"   ‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(report.forecasts)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    print(f"\nüìä –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã:")
    for metric_name, metric_value in report.team_metrics.items():
        print(f"   ‚Ä¢ {metric_name.replace('_', ' ').title()}: {metric_value:.2f}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
    if report.forecasts:
        print(f"\nüîÆ –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã:")
        for forecast in report.forecasts[:2]:
            print(f"   üìÖ {forecast.forecast_period_days} –¥–Ω–µ–π:")
            print(f"      ‚îî‚îÄ –°–∫–æ—Ä–æ—Å—Ç—å: {forecast.predicted_velocity:.1f}")
            print(f"      ‚îî‚îÄ –ö–∞—á–µ—Å—Ç–≤–æ: {forecast.predicted_quality_score:.1f}")
            print(f"      ‚îî‚îÄ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {forecast.confidence_level.value.upper()}")
            print(f"      ‚îî‚îÄ –†–∏—Å–∫: {forecast.risk_level.value.upper()}")

async def demo_quick_assessments(engine):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ü–µ–Ω–æ–∫ –∫–æ–º–∞–Ω–¥"""
    print("\n" + "-"*60)
    print("‚ö° –ë–´–°–¢–†–´–ï –û–¶–ï–ù–ö–ò –ö–û–ú–ê–ù–î")
    print("-"*60)
    
    teams_for_assessment = [
        {
            'id': 'high-performance-team',
            'name': '–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞',
            'metrics': {'velocity': 85.0, 'quality_score': 9.2}
        },
        {
            'id': 'average-team',
            'name': '–°—Ä–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞',
            'metrics': {'velocity': 55.0, 'quality_score': 7.0}
        },
        {
            'id': 'struggling-team',
            'name': '–ö–æ–º–∞–Ω–¥–∞ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏',
            'metrics': {'velocity': 25.0, 'quality_score': 5.5}
        }
    ]
    
    print("üîç –ü—Ä–æ–≤–æ–¥–∏–º –±—ã—Å—Ç—Ä—ã–µ –æ—Ü–µ–Ω–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:")
    
    for team_info in teams_for_assessment:
        print(f"\nüìä {team_info['name']}:")
        
        start_time = time.time()
        result = await engine.quick_team_assessment(team_info['id'], team_info['metrics'])
        assessment_time = time.time() - start_time
        
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ü–µ–Ω–∫–∏: {assessment_time:.4f}s")
        print(f"   üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result['performance_score']}/10")
        print(f"   üö® –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {result['risk_level'].upper()}")
        
        # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è —Ä–∏—Å–∫–∞
        risk_emoji = {
            'minimal': 'ÔøΩÔøΩ',
            'low': 'üü°', 
            'medium': 'üü†',
            'high': 'üî¥',
            'critical': 'üö®'
        }
        print(f"   {risk_emoji.get(result['risk_level'], '‚ùì')} –°—Ç–∞—Ç—É—Å: {'–û—Ç–ª–∏—á–Ω–æ' if result['risk_level'] in ['minimal', 'low'] else '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'}")

async def demo_performance_trends(engine, PerformanceMetric, TeamMetricType):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n" + "-"*60)
    print("üìà –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("-"*60)
    
    trend_scenarios = [
        {
            'name': '–£–ª—É—á—à–∞—é—â–∞—è—Å—è –∫–æ–º–∞–Ω–¥–∞',
            'pattern': 'improving',
            'velocities': [30, 35, 42, 48, 55, 62]
        },
        {
            'name': '–°—Ç–∞–±–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞',
            'pattern': 'stable',
            'velocities': [50, 52, 48, 51, 49, 53]
        },
        {
            'name': '–£—Ö—É–¥—à–∞—é—â–∞—è—Å—è –∫–æ–º–∞–Ω–¥–∞',
            'pattern': 'declining',
            'velocities': [65, 60, 55, 48, 42, 38]
        }
    ]
    
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    
    for scenario in trend_scenarios:
        print(f"\nüìä {scenario['name']}:")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–∫–æ—Ä–æ—Å—Ç–∏
        base_time = datetime.now()
        velocity_data = []
        for i, velocity in enumerate(scenario['velocities']):
            velocity_data.append(PerformanceMetric(
                metric_type=TeamMetricType.VELOCITY,
                value=velocity,
                timestamp=base_time - timedelta(days=(len(scenario['velocities'])-i-1)*7)
            ))
        
        historical_metrics = {'velocity': velocity_data}
        
        # –ê–Ω–∞–ª–∏–∑
        report = await engine.analyze_team_performance(f"trend-{scenario['pattern']}", historical_metrics, [])
        
        print(f"   üìà –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥: {report.performance_trend.value.upper()}")
        print(f"   üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {report.current_performance_score:.1f}/10")
        print(f"   üìè –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {report.team_metrics.get('average_velocity', 0):.1f}")
        print(f"   üéØ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {report.team_metrics.get('velocity_stability', 0):.2f}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        if report.forecasts:
            short_term_forecast = report.forecasts[0]
            print(f"   üîÆ –ü—Ä–æ–≥–Ω–æ–∑: {short_term_forecast.predicted_velocity:.1f} (—Ä–∏—Å–∫: {short_term_forecast.risk_level.value})")

async def show_final_metrics(engine):
    """–ü–æ–∫–∞–∑ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–≤–∏–∂–∫–∞"""
    print("\n" + "="*60)
    print("üìä –§–ò–ù–ê–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò –î–í–ò–ñ–ö–ê")
    print("="*60)
    
    metrics = engine.get_forecasting_metrics()
    
    print(f"üîß –°—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞: {metrics['engine_status']}")
    print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:")
    print(f"   ‚Ä¢ –ö–æ–º–∞–Ω–¥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {metrics['metrics']['teams_analyzed']}")
    print(f"   ‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {metrics['metrics']['forecasts_generated']}")
    print(f"   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—ã–¥–∞–Ω–æ: {metrics['metrics']['total_recommendations']}")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {metrics['metrics']['average_forecast_accuracy']:.1%}")
    
    print(f"\nüéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–≤–∏–∂–∫–∞:")
    capabilities = [
        "‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
        "‚úÖ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã",
        "‚úÖ –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –∏ –∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤",
        "‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–∞–Ω–¥—ã",
        "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é",
        "‚úÖ –ë—ã—Å—Ç—Ä—ã–µ –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–∞–Ω–¥"
    ]
    for capability in capabilities:
        print(f"   {capability}")
    
    print(f"\nüöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
    print(f"   ‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞: <0.1s")
    print(f"   ‚Ä¢ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑: <1s –¥–ª—è –∫–æ–º–∞–Ω–¥—ã")
    print(f"   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    print(f"\n" + "="*60)
    print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print("‚ú® Team Performance Forecasting Engine –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üìä Phase 4B.4 - Team Performance Forecasting —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω!")
    print("="*60)

if __name__ == "__main__":
    asyncio.run(main())
