#!/usr/bin/env python3
"""
Test Fixer Tool
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ failed —Ç–µ—Å—Ç–æ–≤

Usage:
    python tools/scripts/test_fixer_tool.py --analyze
    python tools/scripts/test_fixer_tool.py --fix --category=imports
    python tools/scripts/test_fixer_tool.py --run --pattern="*auth*"
"""

import os
import re
import ast
import subprocess
import argparse
from pathlib import Path
from typing import List, Dict, Tuple, Optional, Set
from dataclasses import dataclass
from collections import defaultdict
import logging

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


@dataclass
class TestFailure:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ failed —Ç–µ—Å—Ç–µ"""
    test_name: str
    file_path: str
    error_type: str
    error_message: str
    line_number: Optional[int] = None
    category: str = "unknown"
    fix_priority: str = "medium"
    suggested_fix: str = ""


class TestFailureAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—à–∏–±–æ–∫ —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.error_patterns = {
            "imports": [
                r"ModuleNotFoundError: No module named '([^']+)'",
                r"ImportError: cannot import name '([^']+)'",
                r"AttributeError: module '([^']+)' has no attribute '([^']+)'"
            ],
            "attributes": [
                r"AttributeError: '([^']+)' object has no attribute '([^']+)'",
                r"AttributeError: type object '([^']+)' has no attribute '([^']+)'"
            ],
            "async_await": [
                r"TypeError: object dict can't be used in 'await' expression",
                r"AttributeError: 'coroutine' object has no attribute '([^']+)'",
                r"RuntimeWarning: coroutine '([^']+)' was never awaited"
            ],
            "mocks": [
                r"TypeError: ([^()]+)\(\) got an unexpected keyword argument '([^']+)'",
                r"TypeError: ([^()]+)\(\) missing \d+ required positional argument",
                r"TypeError: Can't instantiate abstract class"
            ],
            "enum_comparison": [
                r"AssertionError: assert <([^>]+)> == '([^']+)'",
                r"AssertionError: assert '([^']+)' in <([^>]+)>"
            ],
            "validation": [
                r"pydantic_core\._pydantic_core\.ValidationError",
                r"ValueError: ([^']+)",
                r"TypeError: __init__\(\) missing \d+ required positional argument"
            ]
        }
        
    def categorize_failure(self, error_message: str) -> Tuple[str, str]:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        for category, patterns in self.error_patterns.items():
            for pattern in patterns:
                if re.search(pattern, error_message, re.MULTILINE):
                    priority = self._get_priority(category)
                    return category, priority
        return "unknown", "low"
        
    def _get_priority(self, category: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        high_priority = ["imports", "attributes", "async_await"]
        medium_priority = ["mocks", "enum_comparison"]
        
        if category in high_priority:
            return "high"
        elif category in medium_priority:
            return "medium"
        else:
            return "low"
            
    def suggest_fix(self, failure: TestFailure) -> str:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        suggestions = {
            "imports": self._suggest_import_fix,
            "attributes": self._suggest_attribute_fix,
            "async_await": self._suggest_async_fix,
            "mocks": self._suggest_mock_fix,
            "enum_comparison": self._suggest_enum_fix,
            "validation": self._suggest_validation_fix
        }
        
        suggest_func = suggestions.get(failure.category)
        if suggest_func:
            return suggest_func(failure)
        return "–¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        
    def _suggest_import_fix(self, failure: TestFailure) -> str:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è import –æ—à–∏–±–æ–∫"""
        if "ModuleNotFoundError" in failure.error_message:
            missing_module = re.search(r"No module named '([^']+)'", failure.error_message)
            if missing_module:
                module = missing_module.group(1)
                return f"–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –º–æ–¥—É–ª—å: {module} –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å import path"
                
        elif "cannot import name" in failure.error_message:
            match = re.search(r"cannot import name '([^']+)' from '([^']+)'", failure.error_message)
            if match:
                name, module = match.groups()
                return f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç {name} –≤ –º–æ–¥—É–ª–µ {module}"
                
        elif "has no attribute" in failure.error_message:
            match = re.search(r"module '([^']+)' has no attribute '([^']+)'", failure.error_message)
            if match:
                module, attr = match.groups()
                return f"–î–æ–±–∞–≤–∏—Ç—å {attr} –≤ –º–æ–¥—É–ª—å {module} –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å import"
                
        return "–ò—Å–ø—Ä–∞–≤–∏—Ç—å import statement"
        
    def _suggest_attribute_fix(self, failure: TestFailure) -> str:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è attribute –æ—à–∏–±–æ–∫"""
        match = re.search(r"'([^']+)' object has no attribute '([^']+)'", failure.error_message)
        if match:
            obj_type, attr = match.groups()
            return f"–î–æ–±–∞–≤–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç {attr} –≤ –∫–ª–∞—Å—Å {obj_type} –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤"
        return "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞—Ç—Ä–∏–±—É—Ç—É"
        
    def _suggest_async_fix(self, failure: TestFailure) -> str:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è async/await –æ—à–∏–±–æ–∫"""
        if "can't be used in 'await' expression" in failure.error_message:
            return "–£–±—Ä–∞—Ç—å await –ø–µ—Ä–µ–¥ sync —Ñ—É–Ω–∫—Ü–∏–µ–π –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é async"
        elif "coroutine' object has no attribute" in failure.error_message:
            return "–î–æ–±–∞–≤–∏—Ç—å await –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º async —Ñ—É–Ω–∫—Ü–∏–∏"
        elif "was never awaited" in failure.error_message:
            return "–î–æ–±–∞–≤–∏—Ç—å await –ø–µ—Ä–µ–¥ coroutine"
        return "–ò—Å–ø—Ä–∞–≤–∏—Ç—å async/await pattern"
        
    def _suggest_mock_fix(self, failure: TestFailure) -> str:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è mock –æ—à–∏–±–æ–∫"""
        if "unexpected keyword argument" in failure.error_message:
            return "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ mock setup"
        elif "missing" in failure.error_message and "required" in failure.error_message:
            return "–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ mock"
        elif "abstract class" in failure.error_message:
            return "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Mock"
        return "–ò—Å–ø—Ä–∞–≤–∏—Ç—å mock configuration"
        
    def _suggest_enum_fix(self, failure: TestFailure) -> str:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è enum —Å—Ä–∞–≤–Ω–µ–Ω–∏–π"""
        match = re.search(r"assert <([^>]+)> == '([^']+)'", failure.error_message)
        if match:
            enum_val, string_val = match.groups()
            return f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {enum_val}.value –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ —Å—Ç—Ä–æ–∫–æ–π '{string_val}'"
        return "–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ enum —Å string"
        
    def _suggest_validation_fix(self, failure: TestFailure) -> str:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è validation –æ—à–∏–±–æ–∫"""
        if "ValidationError" in failure.error_message:
            return "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è Pydantic –º–æ–¥–µ–ª–∏"
        elif "missing" in failure.error_message and "positional argument" in failure.error_message:
            return "–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä"
        return "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö"


class TestRunner:
    """–ó–∞–ø—É—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root)
        self.analyzer = TestFailureAnalyzer()
        
    def run_tests(self, pattern: str = "tests/unit/", verbose: bool = True) -> Dict:
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        logger.info(f"üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: {pattern}")
        
        cmd = [
            "python", "-m", "pytest", pattern,
            "--tb=short", "--no-header", "-v" if verbose else "-q"
        ]
        
        try:
            result = subprocess.run(
                cmd, 
                capture_output=True, 
                text=True, 
                timeout=300,  # 5 –º–∏–Ω—É—Ç
                cwd=self.project_root
            )
            
            return self._parse_test_results(result.stdout, result.stderr)
            
        except subprocess.TimeoutExpired:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤")
            return {"error": "timeout"}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
            return {"error": str(e)}
            
    def _parse_test_results(self, stdout: str, stderr: str) -> Dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
        stats_match = re.search(
            r'(\d+) failed,?\s*(\d+) passed,?\s*(?:(\d+) skipped,?)?\s*(?:(\d+) errors?)?',
            stdout
        )
        
        stats = {
            "failed": 0, "passed": 0, "skipped": 0, "errors": 0
        }
        
        if stats_match:
            stats["failed"] = int(stats_match.group(1) or 0)
            stats["passed"] = int(stats_match.group(2) or 0) 
            stats["skipped"] = int(stats_match.group(3) or 0)
            stats["errors"] = int(stats_match.group(4) or 0)
            
        # –ü–∞—Ä—Å–∏–Ω–≥ failed —Ç–µ—Å—Ç–æ–≤
        failures = self._extract_failures(stdout + stderr)
        
        return {
            "stats": stats,
            "failures": failures,
            "success_rate": stats["passed"] / (stats["passed"] + stats["failed"]) * 100 if (stats["passed"] + stats["failed"]) > 0 else 0
        }
        
    def _extract_failures(self, output: str) -> List[TestFailure]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ failed —Ç–µ—Å—Ç–∞—Ö"""
        failures = []
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–∏ —Ç–µ—Å—Ç–æ–≤
        test_blocks = re.split(r'^FAILED ', output, flags=re.MULTILINE)
        
        for block in test_blocks[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ (–¥–æ –ø–µ—Ä–≤–æ–≥–æ FAILED)
            failure = self._parse_failure_block(block)
            if failure:
                failures.append(failure)
                
        return failures
        
    def _parse_failure_block(self, block: str) -> Optional[TestFailure]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –±–ª–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ failed —Ç–µ—Å—Ç–µ"""
        lines = block.strip().split('\n')
        if not lines:
            return None
            
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è —Ç–µ—Å—Ç–∞
        test_line = lines[0]
        test_match = re.match(r'([^:]+)::', test_line)
        
        if not test_match:
            return None
            
        test_name = test_match.group(1)
        file_path = test_name.split('::')[0] if '::' in test_name else test_name
        
        # –ü–æ–∏—Å–∫ –æ—à–∏–±–∫–∏
        error_message = '\n'.join(lines)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
        error_type = "Unknown"
        if "AttributeError" in error_message:
            error_type = "AttributeError"
        elif "ImportError" in error_message or "ModuleNotFoundError" in error_message:
            error_type = "ImportError"
        elif "TypeError" in error_message:
            error_type = "TypeError"
        elif "AssertionError" in error_message:
            error_type = "AssertionError"
            
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
        category, priority = self.analyzer.categorize_failure(error_message)
        
        failure = TestFailure(
            test_name=test_name,
            file_path=file_path,
            error_type=error_type,
            error_message=error_message,
            category=category,
            fix_priority=priority
        )
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        failure.suggested_fix = self.analyzer.suggest_fix(failure)
        
        return failure


class TestFixer:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root)
        
    def fix_import_errors(self, failures: List[TestFailure]) -> int:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ import –æ—à–∏–±–æ–∫"""
        fixed_count = 0
        
        import_failures = [f for f in failures if f.category == "imports"]
        logger.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {len(import_failures)} import –æ—à–∏–±–æ–∫")
        
        for failure in import_failures:
            if self._fix_single_import(failure):
                fixed_count += 1
                
        return fixed_count
        
    def _fix_single_import(self, failure: TestFailure) -> bool:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π import –æ—à–∏–±–∫–∏"""
        try:
            file_path = self.project_root / failure.file_path
            if not file_path.exists():
                return False
                
            content = file_path.read_text(encoding='utf-8')
            
            # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if "No module named" in failure.error_message:
                content = self._fix_missing_module(content, failure)
            elif "cannot import name" in failure.error_message:
                content = self._fix_import_name(content, failure)
            elif "has no attribute" in failure.error_message:
                content = self._fix_attribute_import(content, failure)
                
            file_path.write_text(content, encoding='utf-8')
            logger.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω import –≤ {failure.file_path}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è {failure.file_path}: {e}")
            return False
            
    def _fix_missing_module(self, content: str, failure: TestFailure) -> str:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–≥–æ –º–æ–¥—É–ª—è"""
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
        replacements = {
            "from llm import": "from adapters.llm import",
            "from app.domain import": "from domain import",
            "import app.domain": "import domain",
        }
        
        for old, new in replacements.items():
            content = content.replace(old, new)
            
        return content
        
    def _fix_import_name(self, content: str, failure: TestFailure) -> str:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ import"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω
        return content
        
    def _fix_attribute_import(self, content: str, failure: TestFailure) -> str:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        return content
        
    def fix_enum_comparisons(self, failures: List[TestFailure]) -> int:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ enum —Å—Ä–∞–≤–Ω–µ–Ω–∏–π"""
        fixed_count = 0
        
        enum_failures = [f for f in failures if f.category == "enum_comparison"]
        logger.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {len(enum_failures)} enum —Å—Ä–∞–≤–Ω–µ–Ω–∏–π")
        
        for failure in enum_failures:
            if self._fix_single_enum(failure):
                fixed_count += 1
                
        return fixed_count
        
    def _fix_single_enum(self, failure: TestFailure) -> bool:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ enum —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        try:
            file_path = self.project_root / failure.file_path
            content = file_path.read_text(encoding='utf-8')
            
            # –ó–∞–º–µ–Ω–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π enum —Å–æ —Å—Ç—Ä–æ–∫–æ–π –Ω–∞ .value
            patterns = [
                (r'assert\s+([^=]+)\s*==\s*["\']([^"\']+)["\']', r'assert \1.value == "\2"'),
                (r'([^=]+)\s*==\s*["\']([^"\']+)["\']', r'\1.value == "\2"'),
            ]
            
            for pattern, replacement in patterns:
                content = re.sub(pattern, replacement, content)
                
            file_path.write_text(content, encoding='utf-8')
            logger.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã enum —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ {failure.file_path}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è enum –≤ {failure.file_path}: {e}")
            return False


class TestFixerTool:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self, project_root: str = "."):
        self.project_root = project_root
        self.runner = TestRunner(project_root)
        self.fixer = TestFixer(project_root)
        
    def analyze_test_failures(self, pattern: str = "tests/unit/") -> Dict:
        """–ê–Ω–∞–ª–∏–∑ failed —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ failed —Ç–µ—Å—Ç–æ–≤...")
        
        results = self.runner.run_tests(pattern)
        
        if "error" in results:
            return results
            
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        by_category = defaultdict(list)
        for failure in results["failures"]:
            by_category[failure.category].append(failure)
            
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        by_priority = defaultdict(list)
        for failure in results["failures"]:
            by_priority[failure.fix_priority].append(failure)
            
        analysis = {
            "stats": results["stats"],
            "success_rate": results["success_rate"],
            "total_failures": len(results["failures"]),
            "by_category": dict(by_category),
            "by_priority": dict(by_priority),
            "failures": results["failures"]
        }
        
        return analysis
        
    def print_analysis_report(self, analysis: Dict):
        """–ü–µ—á–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        print("\n" + "="*60)
        print("üß™ TEST FAILURE ANALYSIS")
        print("="*60)
        
        stats = analysis["stats"]
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤:")
        print(f"   ‚úÖ Passed: {stats['passed']}")
        print(f"   ‚ùå Failed: {stats['failed']}")
        print(f"   ‚ö†Ô∏è  Skipped: {stats['skipped']}")
        print(f"   üö´ Errors: {stats['errors']}")
        print(f"   üìà Success Rate: {analysis['success_rate']:.1f}%")
        
        print(f"\nüìã –û—à–∏–±–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for category, failures in analysis["by_category"].items():
            if failures:
                print(f"\nüî• {category.upper()} ({len(failures)} –æ—à–∏–±–æ–∫):")
                for failure in failures[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"   ‚ùå {failure.test_name}")
                    print(f"      {failure.error_type}: {failure.suggested_fix}")
                if len(failures) > 3:
                    print(f"   ... –∏ –µ—â–µ {len(failures) - 3} –æ—à–∏–±–æ–∫")
                    
        print(f"\nüéØ –û—à–∏–±–∫–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É:")
        for priority in ["high", "medium", "low"]:
            failures = analysis["by_priority"].get(priority, [])
            if failures:
                print(f"   üî• {priority.upper()}: {len(failures)} –æ—à–∏–±–æ–∫")
                
    def fix_by_category(self, category: str, analysis: Dict = None) -> int:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if analysis is None:
            analysis = self.analyze_test_failures()
            
        failures = analysis["by_category"].get(category, [])
        
        if not failures:
            logger.info(f"–ù–µ—Ç –æ—à–∏–±–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
            return 0
            
        logger.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {len(failures)} –æ—à–∏–±–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
        
        fixed_count = 0
        
        if category == "imports":
            fixed_count = self.fixer.fix_import_errors(failures)
        elif category == "enum_comparison":
            fixed_count = self.fixer.fix_enum_comparisons(failures)
        else:
            logger.warning(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
            
        return fixed_count
        
    def fix_by_priority(self, priority: str = "high") -> int:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        analysis = self.analyze_test_failures()
        failures = analysis["by_priority"].get(priority, [])
        
        if not failures:
            logger.info(f"–ù–µ—Ç –æ—à–∏–±–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ {priority}")
            return 0
            
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
        by_category = defaultdict(list)
        for failure in failures:
            by_category[failure.category].append(failure)
            
        total_fixed = 0
        for category, cat_failures in by_category.items():
            fixed = self.fix_by_category(category, {"by_category": {category: cat_failures}})
            total_fixed += fixed
            
        return total_fixed


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(description="Test Fixer Tool")
    parser.add_argument("--analyze", action="store_true", help="–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å failed —Ç–µ—Å—Ç—ã")
    parser.add_argument("--fix", action="store_true", help="–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã")
    parser.add_argument("--run", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã")
    parser.add_argument("--category", choices=["imports", "attributes", "async_await", "mocks", "enum_comparison", "validation"], 
                       help="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—à–∏–±–æ–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    parser.add_argument("--priority", choices=["high", "medium", "low"], 
                       default="high", help="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    parser.add_argument("--pattern", default="tests/unit/", help="–ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤")
    
    args = parser.parse_args()
    
    tool = TestFixerTool()
    
    if args.analyze:
        analysis = tool.analyze_test_failures(args.pattern)
        tool.print_analysis_report(analysis)
        
    elif args.fix:
        if args.category:
            fixed = tool.fix_by_category(args.category)
            print(f"\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed} –æ—à–∏–±–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {args.category}")
        else:
            fixed = tool.fix_by_priority(args.priority)
            print(f"\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed} –æ—à–∏–±–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ {args.priority}")
            
    elif args.run:
        results = tool.runner.run_tests(args.pattern)
        if "stats" in results:
            stats = results["stats"]
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:")
            print(f"   ‚úÖ Passed: {stats['passed']}")
            print(f"   ‚ùå Failed: {stats['failed']}")
            print(f"   ‚ö†Ô∏è  Skipped: {stats['skipped']}")
            print(f"   üìà Success Rate: {results['success_rate']:.1f}%")
        else:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {results.get('error', 'Unknown')}")
            
    else:
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --analyze, --fix –∏–ª–∏ --run")
        parser.print_help()


if __name__ == "__main__":
    main() 