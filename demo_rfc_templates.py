#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ RFC –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ AI Assistant —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ RFC –¥–æ–∫—É–º–µ–Ω—Ç—ã
–ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º GitHub, Stripe –∏ –¥—Ä—É–≥–∏—Ö –≤–µ–¥—É—â–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python demo_rfc_templates.py
"""

import asyncio
import httpx
import json
from datetime import datetime


class RFCTemplateDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ RFC —Å —à–∞–±–ª–æ–Ω–∞–º–∏."""
    
    def __init__(self, server_url: str = "http://localhost:8000"):
        self.server_url = server_url
        self.client = httpx.AsyncClient(timeout=30.0)
    
    async def demo_rfc_generation_with_templates(self) -> None:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é RFC —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤."""
        
        print("üöÄ RFC GENERATION WITH PROFESSIONAL TEMPLATES")
        print("=" * 60)
        print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ RFC –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º:")
        print("‚Ä¢ GitHub Engineering RFCs")
        print("‚Ä¢ Stripe RFC Process") 
        print("‚Ä¢ Architecture Decision Records (ADR)")
        print("‚Ä¢ Industry Best Practices")
        print()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
        scenarios = [
            {
                "name": "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞",
                "task_type": "new_feature",
                "request": "–°–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è e-commerce –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã. –ù—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, email, SMS –¥–ª—è –∑–∞–∫–∞–∑–æ–≤, –¥–æ—Å—Ç–∞–≤–∫–∏, –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π.",
                "context": "–û–∂–∏–¥–∞–µ—Ç—Å—è 100K+ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–æ–±–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ iOS/Android",
                "answers": [
                    {"question_id": "q1", "answer": "–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é –∏ retention –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"},
                    {"question_id": "q2", "answer": ["–í–Ω–µ—à–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—ã", "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"]},
                    {"question_id": "q3", "answer": "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è (> 100K)"}
                ]
            },
            {
                "name": "–ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º—ã",
                "task_type": "modify_existing", 
                "request": "–ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å legacy API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ OAuth 2.0, JWT tokens, multi-tenant –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å backward compatibility.",
                "context": "–¢–µ–∫—É—â–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞ session-based auth, –Ω—É–∂–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è –±–µ–∑ downtime",
                "answers": [
                    {"question_id": "q1", "answer": "–¢–µ–∫—É—â–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç session cookies, single tenant, MySQL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"},
                    {"question_id": "q2", "answer": "–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å, security compliance, API rate limiting"},
                    {"question_id": "q3", "answer": True}  # backward compatibility
                ]
            }
        ]
        
        for i, scenario in enumerate(scenarios, 1):
            print(f"\nüìã –°–¶–ï–ù–ê–†–ò–ô {i}: {scenario['name']}")
            print("-" * 50)
            
            # 1. –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            print(f"1Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å: {scenario['request'][:80]}...")
            
            generation_request = {
                "task_type": scenario["task_type"],
                "initial_request": scenario["request"],
                "context": scenario["context"],
                "user_id": "demo_architect",
                "search_sources": ["confluence-main", "gitlab-rfcs"]
            }
            
            try:
                response = await self.client.post(
                    f"{self.server_url}/api/v1/generate",
                    json=generation_request
                )
                
                if response.status_code == 200:
                    result = response.json()
                    session_id = result["session_id"]
                    questions = result["questions"]
                    
                    print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_id}")
                    print(f"üìù AI –∑–∞–¥–∞–ª {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
                    
                    # 2. –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
                    print("2Ô∏è‚É£ –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã AI...")
                    
                    answer_response = await self.client.post(
                        f"{self.server_url}/api/v1/generate/answer",
                        json={"session_id": session_id, "answers": scenario["answers"]}
                    )
                    
                    if answer_response.status_code == 200:
                        answer_result = answer_response.json()
                        print(f"‚úÖ –ì–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {answer_result['is_ready_to_generate']}")
                        
                        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º RFC
                        if answer_result['is_ready_to_generate']:
                            print("3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π RFC –¥–æ–∫—É–º–µ–Ω—Ç...")
                            
                            final_response = await self.client.post(
                                f"{self.server_url}/api/v1/generate/finalize",
                                json={
                                    "session_id": session_id,
                                    "additional_requirements": "–í–∫–ª—é—á–∏—Ç—å security considerations –∏ performance metrics"
                                }
                            )
                            
                            if final_response.status_code == 200:
                                rfc_result = final_response.json()
                                rfc = rfc_result["rfc"]
                                
                                print(f"‚úÖ RFC –¥–æ–∫—É–º–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
                                print(f"üÜî ID: {rfc['id']}")
                                print(f"üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ: {rfc['title']}")
                                print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {rfc['summary']}")
                                
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ RFC
                                if 'full_content' in rfc and rfc['full_content']:
                                    await self._display_rfc_structure(rfc)
                                else:
                                    print(f"üìö –°–µ–∫—Ü–∏–π: {len(rfc['sections'])}")
                                    for section in rfc['sections'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                                        print(f"   ‚Ä¢ {section['title']}")
                                
                                print(f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(rfc['sources_used'])}")
                                print(f"üè∑Ô∏è –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {json.dumps(rfc['metadata'], indent=2)}")
                                
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
                                if i == 1:
                                    await self._show_rfc_preview(rfc)
                            
                            else:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ RFC: {final_response.text}")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö: {answer_response.text}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {response.text}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def _display_rfc_structure(self, rfc: dict) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ RFC."""
        
        print("\nüìã –°–¢–†–£–ö–¢–£–†–ê RFC –î–û–ö–£–ú–ï–ù–¢–ê:")
        print("-" * 30)
        
        if 'full_content' in rfc and rfc['full_content']:
            # –ü–∞—Ä—Å–∏–º YAML –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            content = rfc['full_content']
            lines = content.split('\n')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º YAML –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if lines[0] == '---':
                yaml_end = -1
                for i, line in enumerate(lines[1:], 1):
                    if line == '---':
                        yaml_end = i
                        break
                
                if yaml_end > 0:
                    print("üìã YAML –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:")
                    yaml_lines = lines[1:yaml_end]
                    for line in yaml_lines[:6]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 6 —Å—Ç—Ä–æ–∫
                        print(f"   {line}")
                    if len(yaml_lines) > 6:
                        print(f"   ... –∏ –µ—â–µ {len(yaml_lines) - 6} —Å—Ç—Ä–æ–∫")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π
            print("\nüìö –°–µ–∫—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
            section_count = 0
            for line in lines:
                if line.startswith('## ') and not line.startswith('###'):
                    section_count += 1
                    section_title = line[3:].strip()
                    print(f"   {section_count}. {section_title}")
                    if section_count >= 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
                        remaining = sum(1 for l in lines if l.startswith('## ') and not l.startswith('###')) - 10
                        if remaining > 0:
                            print(f"   ... –∏ –µ—â–µ {remaining} —Å–µ–∫—Ü–∏–π")
                        break
            
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
            print(f"   ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
            print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: {len(content):,} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   ‚Ä¢ –°–µ–∫—Ü–∏–π —É—Ä–æ–≤–Ω—è 2 (##): {sum(1 for l in lines if l.startswith('## ') and not l.startswith('###'))}")
            print(f"   ‚Ä¢ –ü–æ–¥—Å–µ–∫—Ü–∏–π —É—Ä–æ–≤–Ω—è 3 (###): {sum(1 for l in lines if l.startswith('### '))}")
        
        else:
            print(f"üìö –°–µ–∫—Ü–∏–π –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ: {len(rfc['sections'])}")
            for i, section in enumerate(rfc['sections'][:5], 1):
                print(f"   {i}. {section['title']}")
                content_preview = section['content'][:60] + "..." if len(section['content']) > 60 else section['content']
                print(f"      {content_preview}")
    
    async def _show_rfc_preview(self, rfc: dict) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä RFC."""
        
        print("\nüîç –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† RFC:")
        print("=" * 40)
        
        if 'full_content' in rfc and rfc['full_content']:
            content = rfc['full_content']
            lines = content.split('\n')
            
            # –ù–∞—Ö–æ–¥–∏–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Summary —Å–µ–∫—Ü–∏—é
            in_summary = False
            summary_lines = []
            
            for line in lines:
                if line.strip() == '## Summary':
                    in_summary = True
                    continue
                elif line.startswith('## ') and in_summary:
                    break
                elif in_summary and line.strip():
                    summary_lines.append(line)
            
            if summary_lines:
                print("üìù Summary:")
                for line in summary_lines[:5]:  # –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
                    print(f"   {line}")
                if len(summary_lines) > 5:
                    print("   ...")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Context
            in_context = False
            context_lines = []
            
            for line in lines:
                if line.strip() == '## Context':
                    in_context = True
                    continue
                elif line.startswith('## ') and in_context:
                    break
                elif in_context and line.strip():
                    context_lines.append(line)
            
            if context_lines:
                print("\nüîç Context:")
                for line in context_lines[:3]:  # –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏
                    print(f"   {line}")
                if len(context_lines) > 3:
                    print("   ...")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Goals
            in_goals = False
            goals_lines = []
            
            for line in lines:
                if line.strip() == '## Goals':
                    in_goals = True
                    continue
                elif line.startswith('## ') and in_goals:
                    break
                elif in_goals and line.strip():
                    goals_lines.append(line)
            
            if goals_lines:
                print("\nüéØ Goals:")
                for line in goals_lines[:4]:  # –ü–µ—Ä–≤—ã–µ 4 —Å—Ç—Ä–æ–∫–∏
                    print(f"   {line}")
                if len(goals_lines) > 4:
                    print("   ...")
        
        print("\nüí° –≠—Ç–æ—Ç RFC –≥–æ—Ç–æ–≤ –¥–ª—è:")
        print("   ‚Ä¢ Technical Review")
        print("   ‚Ä¢ Architecture Review")
        print("   ‚Ä¢ Security Review")
        print("   ‚Ä¢ Implementation Planning")
    
    async def run_demo(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é RFC —à–∞–±–ª–æ–Ω–æ–≤."""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
            response = await self.client.get(f"{self.server_url}/health")
            if response.status_code != 200:
                print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            print("ü§ñ AI ASSISTANT - RFC TEMPLATES DEMONSTRATION")
            print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö RFC –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            print()
            
            await self.demo_rfc_generation_with_templates()
            
            print("\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
            print("\nüí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞:")
            print("   ‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∏–Ω–¥—É—Å—Ç—Ä–∏–∏")
            print("   ‚úÖ –ü–æ–ª–Ω—ã–π YAML –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏")
            print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ (Summary, Context, Goals, etc.)")
            print("   ‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –∏ API —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            print("   ‚úÖ Trade-offs –∞–Ω–∞–ª–∏–∑ –∏ —Ä–∏—Å–∫–∏")
            print("   ‚úÖ Implementation –ø–ª–∞–Ω —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏")
            print("   ‚úÖ Success metrics –∏ monitoring")
            print("   ‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É —Ä–µ–≤—å—é")
            
            print(f"\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: {self.server_url}/docs")
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            await self.client.aclose()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    demo = RFCTemplateDemo()
    await demo.run_demo()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}") 