{
  "openapi": "3.1.0",
  "info": {
    "title": "AI Assistant MVP - Production Ready API",
    "description": "\n    Enterprise-grade AI-powered knowledge management and document generation platform.\n    \n    ## 🌟 Key Features\n    \n    - **🔍 Semantic Search**: AI-powered document search with 89% accuracy\n    - **📝 RFC Generation**: Interactive AI document generation\n    - **💻 Code Documentation**: Automated code analysis and documentation\n    - **🎤 Voice Input**: Speech-to-text and text-to-speech\n    - **🏥 HIPAA Compliance**: Healthcare data protection\n    - **📱 PWA Support**: Mobile app functionality\n    - **🌍 Multilingual**: EN/RU interface support\n    - **🔐 Enterprise Security**: SOC2 + ISO27001 ready\n    \n    ## 📊 Production Metrics\n    \n    - ⚡ API Response: <150ms average\n    - 🎯 Search Accuracy: 89% relevance  \n    - 📈 Uptime: 99.9% SLA\n    - 🔄 Concurrent Users: 1000+ supported\n    \n    ## 🔗 Quick Links\n    \n    - [User Guide](https://docs.aiassistant.com/user-guide)\n    - [Developer Guide](https://docs.aiassistant.com/dev-guide)\n    - [API Examples](https://docs.aiassistant.com/api-examples)\n    - [HIPAA Compliance](https://docs.aiassistant.com/hipaa)\n    ",
    "contact": {
      "name": "AI Assistant Support",
      "url": "https://docs.aiassistant.com/",
      "email": "support@aiassistant.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "8.0.0"
  },
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "System Health"
        ],
        "summary": "Health Check",
        "description": "Basic health check endpoint for load balancers and monitoring systems.\n\nThis is a lightweight endpoint that should respond quickly to indicate\nthat the application is running and accepting requests.\n\nReturns:\n    dict: Simple health status\n    \nExample Response:\n    ```json\n    {\"status\": \"healthy\"}\n    ```",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/health_smoke": {
      "get": {
        "tags": [
          "System Health"
        ],
        "summary": "Smoke Health Check",
        "description": "Simple health check for smoke testing and monitoring",
        "operationId": "health_smoke_health_smoke_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmokeHealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/health": {
      "get": {
        "tags": [
          "Health Check"
        ],
        "summary": "API Health Check",
        "description": "Health check для API v1",
        "operationId": "health_check_v1_api_v1_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/register": {
      "post": {
        "tags": [
          "Authentication",
          "Authentication"
        ],
        "summary": "Register User",
        "description": "Register a new user.\n\n- **email**: Valid email address\n- **password**: Strong password (8+ chars, uppercase, lowercase, digit)\n- **name**: User's display name\n- **budget_limit**: Optional monthly budget limit in USD",
        "operationId": "register_user_api_v1_auth_register_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": [
          "Authentication",
          "Authentication"
        ],
        "summary": "Login",
        "description": "Login with email and password.\n\nReturns JWT access token for authenticated requests.",
        "operationId": "login_api_v1_auth_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/me": {
      "get": {
        "tags": [
          "Authentication",
          "Authentication"
        ],
        "summary": "Get Current User Info",
        "description": "Get current user information.\n\nRequires valid JWT token in Authorization header.",
        "operationId": "get_current_user_info_api_v1_auth_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/auth/verify": {
      "get": {
        "tags": [
          "Authentication",
          "Authentication"
        ],
        "summary": "Verify Token",
        "description": "Verify JWT token validity.\n\nReturns user info if token is valid, 401 if invalid.",
        "operationId": "verify_token_api_v1_auth_verify_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/auth/refresh": {
      "post": {
        "tags": [
          "Authentication",
          "Authentication"
        ],
        "summary": "Refresh Token",
        "description": "Refresh JWT token.\n\nReturns new token with extended expiration.",
        "operationId": "refresh_token_api_v1_auth_refresh_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/auth/budget": {
      "get": {
        "tags": [
          "Authentication",
          "Authentication"
        ],
        "summary": "Get Budget Info",
        "description": "Get user's budget information and usage statistics.",
        "operationId": "get_budget_info_api_v1_auth_budget_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/auth/budget/status": {
      "get": {
        "tags": [
          "Authentication",
          "Authentication"
        ],
        "summary": "Get Budget Status",
        "description": "Get user's budget status (for test compatibility).",
        "operationId": "get_budget_status_api_v1_auth_budget_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/auth/scopes": {
      "get": {
        "tags": [
          "Authentication",
          "Authentication"
        ],
        "summary": "Get User Scopes",
        "description": "Get user's permission scopes.",
        "operationId": "get_user_scopes_api_v1_auth_scopes_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/auth/profile": {
      "get": {
        "tags": [
          "Authentication",
          "Authentication"
        ],
        "summary": "Get User Profile",
        "description": "Get current user profile information\n\nArgs:\n    current_user: Authenticated user\n    \nReturns:\n    User profile data",
        "operationId": "get_user_profile_api_v1_auth_profile_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/auth/usage-stats": {
      "get": {
        "tags": [
          "Authentication",
          "Authentication"
        ],
        "summary": "Get Usage Statistics",
        "description": "Get detailed usage statistics for user\n\nArgs:\n    days: Number of days to include in statistics\n    current_user: Authenticated user\n    \nReturns:\n    Detailed usage statistics",
        "operationId": "get_usage_statistics_api_v1_auth_usage_stats_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 30,
              "title": "Days"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "tags": [
          "Authentication",
          "Authentication"
        ],
        "summary": "Logout",
        "description": "Logout user (in a full implementation, this would invalidate the token)\n\nArgs:\n    current_user: Authenticated user\n    \nReturns:\n    Logout confirmation",
        "operationId": "logout_api_v1_auth_logout_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/auth/demo-users": {
      "get": {
        "tags": [
          "Authentication",
          "Authentication"
        ],
        "summary": "Get Demo Users",
        "description": "Get list of demo users for testing (development only)\n\nReturns:\n    List of available demo users",
        "operationId": "get_demo_users_api_v1_auth_demo_users_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/sso/providers": {
      "get": {
        "tags": [
          "Single Sign-On",
          "SSO Authentication"
        ],
        "summary": "Get Available Providers",
        "description": "Get list of available SSO providers for login",
        "operationId": "get_available_providers_api_v1_auth_sso_providers_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SSOProviderResponse"
                  },
                  "type": "array",
                  "title": "Response Get Available Providers Api V1 Auth Sso Providers Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/sso/login/{provider_id}": {
      "get": {
        "tags": [
          "Single Sign-On",
          "SSO Authentication"
        ],
        "summary": "Initiate Sso Login",
        "description": "Initiate SSO login flow for specified provider",
        "operationId": "initiate_sso_login_api_v1_auth_sso_login__provider_id__get",
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Provider Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSOLoginResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/sso/saml/{provider_id}/acs": {
      "post": {
        "tags": [
          "Single Sign-On",
          "SSO Authentication"
        ],
        "summary": "Saml Acs",
        "description": "Handle SAML ACS (Assertion Consumer Service) response",
        "operationId": "saml_acs_api_v1_auth_sso_saml__provider_id__acs_post",
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Provider Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/sso/saml/{provider_id}/sls": {
      "get": {
        "tags": [
          "Single Sign-On",
          "SSO Authentication"
        ],
        "summary": "Saml Sls",
        "description": "Handle SAML SLS (Single Logout Service) request",
        "operationId": "saml_sls_api_v1_auth_sso_saml__provider_id__sls_get",
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Provider Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/sso/saml/{provider_id}/metadata": {
      "get": {
        "tags": [
          "Single Sign-On",
          "SSO Authentication"
        ],
        "summary": "Saml Metadata",
        "description": "Get SAML metadata for this service provider",
        "operationId": "saml_metadata_api_v1_auth_sso_saml__provider_id__metadata_get",
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Provider Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/sso/oauth/{provider_id}/callback": {
      "get": {
        "tags": [
          "Single Sign-On",
          "SSO Authentication"
        ],
        "summary": "Oauth Callback",
        "description": "Handle OAuth callback with authorization code",
        "operationId": "oauth_callback_api_v1_auth_sso_oauth__provider_id__callback_get",
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Provider Id"
            }
          },
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Code"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "State"
            }
          },
          {
            "name": "error",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Error"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/sso/logout": {
      "post": {
        "tags": [
          "Single Sign-On",
          "SSO Authentication"
        ],
        "summary": "Sso Logout",
        "description": "Logout from SSO session",
        "operationId": "sso_logout_api_v1_auth_sso_logout_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "provider_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Provider Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/sso/user/info": {
      "get": {
        "tags": [
          "Single Sign-On",
          "SSO Authentication"
        ],
        "summary": "Get User Sso Info",
        "description": "Get SSO information for current user",
        "operationId": "get_user_sso_info_api_v1_auth_sso_user_info_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SSOUserInfo"
                  },
                  "type": "array",
                  "title": "Response Get User Sso Info Api V1 Auth Sso User Info Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/auth/sso/admin/providers": {
      "get": {
        "tags": [
          "Single Sign-On",
          "SSO Authentication"
        ],
        "summary": "List All Sso Providers",
        "description": "List all SSO providers (admin only)",
        "operationId": "list_all_sso_providers_api_v1_auth_sso_admin_providers_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SSOProviderResponse"
                  },
                  "type": "array",
                  "title": "Response List All Sso Providers Api V1 Auth Sso Admin Providers Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Single Sign-On",
          "SSO Authentication"
        ],
        "summary": "Create Sso Provider",
        "description": "Create new SSO provider (admin only)",
        "operationId": "create_sso_provider_api_v1_auth_sso_admin_providers_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SSOProviderCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSOProviderResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/auth/sso/admin/providers/{provider_id}": {
      "put": {
        "tags": [
          "Single Sign-On",
          "SSO Authentication"
        ],
        "summary": "Update Sso Provider",
        "description": "Update SSO provider configuration (admin only)",
        "operationId": "update_sso_provider_api_v1_auth_sso_admin_providers__provider_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Provider Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SSOProviderUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSOProviderResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Single Sign-On",
          "SSO Authentication"
        ],
        "summary": "Delete Sso Provider",
        "description": "Delete SSO provider (admin only)",
        "operationId": "delete_sso_provider_api_v1_auth_sso_admin_providers__provider_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Provider Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/sso/admin/providers/{provider_id}/test": {
      "post": {
        "tags": [
          "Single Sign-On",
          "SSO Authentication"
        ],
        "summary": "Test Sso Provider",
        "description": "Test SSO provider configuration (admin only)",
        "operationId": "test_sso_provider_api_v1_auth_sso_admin_providers__provider_id__test_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Provider Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/sso/health": {
      "get": {
        "tags": [
          "Single Sign-On",
          "SSO Authentication"
        ],
        "summary": "Sso Health Check",
        "description": "SSO service health check",
        "operationId": "sso_health_check_api_v1_auth_sso_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/users": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Create User",
        "description": "Создание нового пользователя",
        "operationId": "create_user_api_v1_users_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{user_id}": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "Get User",
        "description": "Получение пользователя по ID",
        "operationId": "get_user_api_v1_users__user_id__get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/current/settings": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "Get User Settings",
        "description": "Получение настроек пользователя",
        "operationId": "get_user_settings_api_v1_users_current_settings_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSettings"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User Management"
        ],
        "summary": "Update User Settings",
        "description": "Обновление настроек пользователя",
        "operationId": "update_user_settings_api_v1_users_current_settings_put",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserSettingsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSettings"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/data-sources/": {
      "get": {
        "tags": [
          "Data Sources",
          "Data Sources Management"
        ],
        "summary": "Get Data Sources",
        "description": "Получение списка всех источников данных и их статуса",
        "operationId": "get_data_sources_api_v1_data_sources__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataSourceStatus"
                  },
                  "type": "array",
                  "title": "Response Get Data Sources Api V1 Data Sources  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Data Sources",
          "Data Sources Management"
        ],
        "summary": "Create Data Source",
        "description": "Создание нового источника данных",
        "operationId": "create_data_source_api_v1_data_sources__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/app__api__v1__data_sources__DataSourceConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Create Data Source Api V1 Data Sources  Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/data-sources/{source_type}/{source_name}": {
      "put": {
        "tags": [
          "Data Sources",
          "Data Sources Management"
        ],
        "summary": "Update Data Source",
        "description": "Обновление конфигурации источника данных",
        "operationId": "update_data_source_api_v1_data_sources__source_type___source_name__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source Type"
            }
          },
          {
            "name": "source_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source Name"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/app__api__v1__data_sources__DataSourceConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Update Data Source Api V1 Data Sources  Source Type   Source Name  Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Data Sources",
          "Data Sources Management"
        ],
        "summary": "Delete Data Source",
        "description": "Удаление источника данных",
        "operationId": "delete_data_source_api_v1_data_sources__source_type___source_name__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source Type"
            }
          },
          {
            "name": "source_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Delete Data Source Api V1 Data Sources  Source Type   Source Name  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/data-sources/{source_type}/{source_name}/sync": {
      "post": {
        "tags": [
          "Data Sources",
          "Data Sources Management"
        ],
        "summary": "Trigger Sync",
        "description": "Ручной запуск синхронизации источника данных",
        "operationId": "trigger_sync_api_v1_data_sources__source_type___source_name__sync_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source Type"
            }
          },
          {
            "name": "source_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Trigger Sync Api V1 Data Sources  Source Type   Source Name  Sync Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/data-sources/sync/status": {
      "get": {
        "tags": [
          "Data Sources",
          "Data Sources Management"
        ],
        "summary": "Get Sync Status",
        "description": "Получение статуса всех задач синхронизации",
        "operationId": "get_sync_status_api_v1_data_sources_sync_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Sync Status Api V1 Data Sources Sync Status Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/data-sources/search-sources/{user_id}": {
      "get": {
        "tags": [
          "Data Sources",
          "Data Sources Management"
        ],
        "summary": "Get User Search Sources",
        "description": "Получение настроек источников для поиска пользователя",
        "operationId": "get_user_search_sources_api_v1_data_sources_search_sources__user_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSourcesConfig"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Data Sources",
          "Data Sources Management"
        ],
        "summary": "Update User Search Sources",
        "description": "Обновление настроек источников для поиска пользователя",
        "operationId": "update_user_search_sources_api_v1_data_sources_search_sources__user_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchSourcesConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Update User Search Sources Api V1 Data Sources Search Sources  User Id  Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/data-sources/generation-sources": {
      "get": {
        "tags": [
          "Data Sources",
          "Data Sources Management"
        ],
        "summary": "Get Generation Sources",
        "description": "Получение настроек источников для генерации документов",
        "operationId": "get_generation_sources_api_v1_data_sources_generation_sources_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerationSourcesConfig"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Data Sources",
          "Data Sources Management"
        ],
        "summary": "Update Generation Sources",
        "description": "Обновление настроек источников для генерации документов",
        "operationId": "update_generation_sources_api_v1_data_sources_generation_sources_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerationSourcesConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Update Generation Sources Api V1 Data Sources Generation Sources Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/data-sources/sources": {
      "get": {
        "tags": [
          "Data Sources",
          "Data Sources Management"
        ],
        "summary": "Get Data Sources New",
        "description": "Получить список настроенных источников данных",
        "operationId": "get_data_sources_new_api_v1_data_sources_sources_get",
        "parameters": [
          {
            "name": "enabled_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Только включенные источники",
              "default": true,
              "title": "Enabled Only"
            },
            "description": "Только включенные источники"
          },
          {
            "name": "source_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Фильтр по типу источника",
              "title": "Source Type"
            },
            "description": "Фильтр по типу источника"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataSourceConfigResponse"
                  },
                  "title": "Response Get Data Sources New Api V1 Data Sources Sources Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/data-sources/filters": {
      "get": {
        "tags": [
          "Data Sources",
          "Data Sources Management"
        ],
        "summary": "Get Source Filters",
        "description": "Получить доступные фильтры для UI",
        "operationId": "get_source_filters_api_v1_data_sources_filters_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceFiltersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/data-sources/discover": {
      "get": {
        "tags": [
          "Data Sources",
          "Data Sources Management"
        ],
        "summary": "Discover Sources",
        "description": "Автообнаружение источников данных",
        "operationId": "discover_sources_api_v1_data_sources_discover_get",
        "parameters": [
          {
            "name": "bootstrap_dir",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Путь к папке bootstrap",
              "default": "local/bootstrap",
              "title": "Bootstrap Dir"
            },
            "description": "Путь к папке bootstrap"
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Фильтр по категории",
              "title": "Category"
            },
            "description": "Фильтр по категории"
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Фильтр по роли",
              "title": "Role"
            },
            "description": "Фильтр по роли"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceDiscoveryResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/data-sources/bootstrap/stats": {
      "get": {
        "tags": [
          "Data Sources",
          "Data Sources Management"
        ],
        "summary": "Get Bootstrap Stats",
        "description": "Получить статистику по bootstrap материалам",
        "operationId": "get_bootstrap_stats_api_v1_data_sources_bootstrap_stats_get",
        "parameters": [
          {
            "name": "bootstrap_dir",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Путь к папке bootstrap",
              "default": "local/bootstrap",
              "title": "Bootstrap Dir"
            },
            "description": "Путь к папке bootstrap"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BootstrapStatsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/data-sources/ingest/{source_type}": {
      "post": {
        "tags": [
          "Data Sources",
          "Data Sources Management"
        ],
        "summary": "Trigger Ingestion",
        "description": "Запустить процесс ingestion для указанного источника",
        "operationId": "trigger_ingestion_api_v1_data_sources_ingest__source_type__post",
        "parameters": [
          {
            "name": "source_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source Type"
            }
          },
          {
            "name": "bootstrap_dir",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Путь к папке bootstrap для bootstrap источника",
              "default": "local/bootstrap",
              "title": "Bootstrap Dir"
            },
            "description": "Путь к папке bootstrap для bootstrap источника"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/data-sources/health": {
      "get": {
        "tags": [
          "Data Sources",
          "Data Sources Management"
        ],
        "summary": "Health Check",
        "description": "Проверка здоровья модуля источников данных",
        "operationId": "health_check_api_v1_data_sources_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/documents": {
      "get": {
        "tags": [
          "Document Management"
        ],
        "summary": "List Documents",
        "description": "Get all documents (for development)",
        "operationId": "list_documents_api_v1_documents_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  },
                  "type": "array",
                  "title": "Response List Documents Api V1 Documents Get"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Document Management"
        ],
        "summary": "Create Document",
        "description": "Create a new document",
        "operationId": "create_document_api_v1_documents_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/documents/{document_id}": {
      "get": {
        "tags": [
          "Document Management"
        ],
        "summary": "Get Document",
        "description": "Get document by ID",
        "operationId": "get_document_api_v1_documents__document_id__get",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Document Management"
        ],
        "summary": "Update Document",
        "description": "Update document by ID",
        "operationId": "update_document_api_v1_documents__document_id__put",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Document Management"
        ],
        "summary": "Delete Document",
        "description": "Delete document by ID",
        "operationId": "delete_document_api_v1_documents__document_id__delete",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/documents/search": {
      "post": {
        "tags": [
          "Document Management"
        ],
        "summary": "Search Documents",
        "description": "Search documents by query",
        "operationId": "search_documents_api_v1_documents_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models__base__SearchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/search/search": {
      "post": {
        "tags": [
          "Basic Search",
          "Search"
        ],
        "summary": "Semantic Search",
        "description": "Выполняет семантический поиск по корпоративным данным из настроенных источников",
        "operationId": "semantic_search_api_v1_search_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SemanticSearchQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SemanticSearchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/search/sources": {
      "get": {
        "tags": [
          "Basic Search",
          "Search"
        ],
        "summary": "Get Available Sources",
        "description": "Получение списка доступных источников данных для поиска",
        "operationId": "get_available_sources_api_v1_search_sources_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourcesListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Basic Search",
          "Search"
        ],
        "summary": "Configure Data Source",
        "description": "Настраивает новый источник данных (Confluence, Jira, GitLab и т.д.)",
        "operationId": "configure_data_source_api_v1_search_sources_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigureSourceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigureSourceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/search/sources/{source_id}": {
      "put": {
        "tags": [
          "Basic Search",
          "Search"
        ],
        "summary": "Update Data Source",
        "description": "Обновляет настройки источника данных",
        "operationId": "update_data_source_api_v1_search_sources__source_id__put",
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigureSourceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigureSourceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Basic Search",
          "Search"
        ],
        "summary": "Delete Data Source",
        "description": "Удаляет источник данных и все связанные документы",
        "operationId": "delete_data_source_api_v1_search_sources__source_id__delete",
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/search/upload": {
      "post": {
        "tags": [
          "Basic Search",
          "Search"
        ],
        "summary": "Upload Document",
        "description": "Загружает документ (PDF, TXT, EPUB, DOC) для индексации и поиска",
        "operationId": "upload_document_api_v1_search_upload_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_document_api_v1_search_upload_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/search/sync": {
      "post": {
        "tags": [
          "Basic Search",
          "Search"
        ],
        "summary": "Trigger Data Sync",
        "description": "Запускает синхронизацию данных из настроенных источников",
        "operationId": "trigger_sync_api_v1_search_sync_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncTriggerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/search/sync/status": {
      "get": {
        "tags": [
          "Basic Search",
          "Search"
        ],
        "summary": "Get Sync Status",
        "description": "Получает статус последней синхронизации",
        "operationId": "get_sync_status_api_v1_search_sync_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/search/sources/types": {
      "get": {
        "tags": [
          "Basic Search",
          "Search"
        ],
        "summary": "Get Source Types",
        "description": "Получает список поддерживаемых типов источников данных",
        "operationId": "get_source_types_api_v1_search_sources_types_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "object"
                  },
                  "type": "array",
                  "title": "Response Get Source Types Api V1 Search Sources Types Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/search/": {
      "post": {
        "tags": [
          "Basic Search",
          "Search"
        ],
        "summary": "Search Documents",
        "description": "Поиск документов с возможностью выбора источников\n\nПоддерживает:\n- Семантический поиск по выбранным источникам\n- Ключевой поиск\n- Гибридный поиск\n- Фильтрацию по метаданным\n- Пагинацию результатов",
        "operationId": "search_documents_api_v1_search__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/app__api__v1__search__SearchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/search/sources/update": {
      "post": {
        "tags": [
          "Basic Search",
          "Search"
        ],
        "summary": "Update User Search Sources",
        "description": "Обновление списка источников для поиска пользователя",
        "operationId": "update_user_search_sources_api_v1_search_sources_update_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "title": "Sources"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Update User Search Sources Api V1 Search Sources Update Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/search/suggestions": {
      "get": {
        "tags": [
          "Basic Search",
          "Search"
        ],
        "summary": "Get Search Suggestions",
        "description": "Получение предложений для автодополнения поиска",
        "operationId": "get_search_suggestions_api_v1_search_suggestions_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Частичный поисковый запрос",
              "title": "Query"
            },
            "description": "Частичный поисковый запрос"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 20,
              "minimum": 1,
              "description": "Количество предложений",
              "default": 5,
              "title": "Limit"
            },
            "description": "Количество предложений"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Search Suggestions Api V1 Search Suggestions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/search/history": {
      "get": {
        "tags": [
          "Basic Search",
          "Search"
        ],
        "summary": "Get Search History",
        "description": "Получение истории поисковых запросов пользователя",
        "operationId": "get_search_history_api_v1_search_history_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Количество записей",
              "default": 20,
              "title": "Limit"
            },
            "description": "Количество записей"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Search History Api V1 Search History Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/search/feedback": {
      "post": {
        "tags": [
          "Basic Search",
          "Search"
        ],
        "summary": "Submit Search Feedback",
        "description": "Отправка обратной связи по результатам поиска",
        "operationId": "submit_search_feedback_api_v1_search_feedback_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFeedbackRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Submit Search Feedback Api V1 Search Feedback Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/search/analytics": {
      "get": {
        "tags": [
          "Basic Search",
          "Search"
        ],
        "summary": "Get Search Analytics",
        "description": "Получение аналитики поиска (только для администраторов)",
        "operationId": "get_search_analytics_api_v1_search_analytics_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 365,
              "minimum": 1,
              "description": "Период в днях",
              "default": 30,
              "title": "Days"
            },
            "description": "Период в днях"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Search Analytics Api V1 Search Analytics Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/search/advanced/": {
      "post": {
        "tags": [
          "Advanced Search",
          "Advanced Search"
        ],
        "summary": "Advanced Search",
        "description": "Расширенный поиск с фильтрацией по метаданным",
        "operationId": "advanced_search_api_v1_search_advanced__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdvancedSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdvancedSearchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/search/advanced/filters/suggestions": {
      "get": {
        "tags": [
          "Advanced Search",
          "Advanced Search"
        ],
        "summary": "Get Filter Suggestions",
        "description": "Получение предложений для фильтров",
        "operationId": "get_filter_suggestions_api_v1_search_advanced_filters_suggestions_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "filter_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Тип фильтра",
              "title": "Filter Type"
            },
            "description": "Тип фильтра"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "title": "Response Get Filter Suggestions Api V1 Search Advanced Filters Suggestions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/search/advanced/filters/presets": {
      "get": {
        "tags": [
          "Advanced Search",
          "Advanced Search"
        ],
        "summary": "Get Filter Presets",
        "description": "Получение предустановленных фильтров",
        "operationId": "get_filter_presets_api_v1_search_advanced_filters_presets_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Filter Presets Api V1 Search Advanced Filters Presets Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/search/advanced/export": {
      "post": {
        "tags": [
          "Advanced Search",
          "Advanced Search"
        ],
        "summary": "Export Search Results",
        "description": "Экспорт результатов поиска",
        "operationId": "export_search_results_api_v1_search_advanced_export_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Формат экспорта",
              "default": "json",
              "title": "Format"
            },
            "description": "Формат экспорта"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdvancedSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Export Search Results Api V1 Search Advanced Export Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/vector-search/search": {
      "post": {
        "tags": [
          "Vector Search",
          "Vector Search"
        ],
        "summary": "Vector Semantic Search",
        "description": "**🔍 Advanced AI-powered semantic search across all document collections.**\n             \n             Enhanced with enterprise-grade async patterns for reliability and performance:\n             - **Timeout Protection**: Intelligent timeout calculation based on query complexity\n             - **Retry Logic**: Automatic retry with exponential backoff for resilience\n             - **Concurrent Processing**: Parallel search across multiple collections\n             - **Error Recovery**: Graceful degradation with partial results on failures\n             \n             This endpoint performs intelligent document discovery using:\n             - **Vector Embeddings**: OpenAI ada-002 embeddings for semantic understanding\n             - **Hybrid Search**: Combines semantic similarity with keyword matching\n             - **Multi-Collection**: Search across Confluence, GitLab, Jira, and uploaded files\n             - **Smart Filtering**: Advanced metadata filtering and content type selection\n             - **Result Ranking**: AI-powered relevance scoring and result optimization\n             - **Highlighting**: Contextual text snippets with search term highlights\n             \n             ## 🎯 Perfect For:\n             - Finding relevant documentation for development tasks\n             - Discovering similar technical specifications and RFCs\n             - Cross-platform knowledge discovery and research\n             - Contextual code examples and configuration files\n             - Troubleshooting guides and best practices\n             \n             ## ⚡ Performance Guarantees:\n             - **Response Time**: <150ms average search time\n             - **Accuracy**: 89% semantic relevance score\n             - **Scalability**: 1000+ concurrent users supported\n             - **Availability**: 99.9% uptime SLA\n             - **Reliability**: 95%+ success rate with timeout protection\n             \n             ## 🔒 Security & Compliance:\n             - User-based access control and permissions\n             - HIPAA-compliant search for healthcare data\n             - Rate limiting and abuse protection\n             - Audit logging for all search activities\n             \n             ## 📊 Search Types:\n             - **Semantic**: Pure vector similarity search\n             - **Hybrid**: Combined semantic + keyword search (recommended)\n             - **Keyword**: Traditional full-text search\n             \n             ## Example Usage:\n             ```bash\n             curl -X POST \"/api/v1/vector-search/search\" \\\n               -H \"Authorization: Bearer YOUR_TOKEN\" \\\n               -H \"Content-Type: application/json\" \\\n               -d '{\n                 \"query\": \"Docker microservices deployment patterns\",\n                 \"collections\": [\"confluence\", \"gitlab\"],\n                 \"limit\": 10,\n                 \"hybrid_search\": true,\n                 \"filters\": {\n                   \"date_range\": {\"from\": \"2024-01-01\"},\n                   \"tags\": [\"deployment\", \"docker\"]\n                 }\n               }'\n             ```",
        "operationId": "search_documents_api_v1_vector_search_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequestModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponseModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/vector-search/index": {
      "post": {
        "tags": [
          "Vector Search",
          "Vector Search"
        ],
        "summary": "Index Document",
        "description": "Index a document for semantic search.\nEnhanced with timeout protection and retry logic.\n\nThe document will be:\n- Split into chunks for better search relevance\n- Converted to embeddings using OpenAI\n- Stored in the appropriate collection based on source_type\n- Validated for size and content quality",
        "operationId": "index_document_api_v1_vector_search_index_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IndexDocumentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexDocumentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/vector-search/documents/{doc_id}": {
      "delete": {
        "tags": [
          "Vector Search",
          "Vector Search"
        ],
        "summary": "Delete Document",
        "description": "Delete a document from the search index.\n\nThis will remove all chunks of the document from the specified collection.",
        "operationId": "delete_document_api_v1_vector_search_documents__doc_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "doc_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Doc Id"
            }
          },
          {
            "name": "source_type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Collection type",
              "default": "documents",
              "title": "Source Type"
            },
            "description": "Collection type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteDocumentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/vector-search/similar/{doc_id}": {
      "get": {
        "tags": [
          "Vector Search",
          "Vector Search"
        ],
        "summary": "Get Similar Documents",
        "description": "Find documents similar to the given document.\nEnhanced with timeout protection and concurrent processing.\n\nUses the document content to find semantically similar documents\nin the same or related collections.",
        "operationId": "get_similar_documents_api_v1_vector_search_similar__doc_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "doc_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Doc Id"
            }
          },
          {
            "name": "source_type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Collection type",
              "default": "documents",
              "title": "Source Type"
            },
            "description": "Collection type"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 20,
              "minimum": 1,
              "description": "Maximum number of results",
              "default": 5,
              "title": "Limit"
            },
            "description": "Maximum number of results"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchResultModel"
                  },
                  "title": "Response Get Similar Documents Api V1 Vector Search Similar  Doc Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/vector-search/stats": {
      "get": {
        "tags": [
          "Vector Search",
          "Vector Search"
        ],
        "summary": "Get Search Stats",
        "description": "Get search service statistics and health information.\nEnhanced with timeout protection and async operations.\n\nIncludes:\n- Collection status and counts\n- Qdrant connection status\n- Embeddings service configuration\n- Performance metrics",
        "operationId": "get_search_stats_api_v1_vector_search_stats_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchStatsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/vector-search/collections/initialize": {
      "post": {
        "tags": [
          "Vector Search",
          "Vector Search"
        ],
        "summary": "Initialize Collections",
        "description": "Initialize all document collections.\n\nCreates Qdrant collections for all supported data source types.\nThis is typically done once during system setup.",
        "operationId": "initialize_collections_api_v1_vector_search_collections_initialize_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/vector-search/upload-file": {
      "post": {
        "tags": [
          "Vector Search",
          "Vector Search"
        ],
        "summary": "Upload And Index File",
        "description": "Upload and index a file for search.\n\nSupported formats: TXT, PDF, DOC, DOCX, MD\nThe file will be processed, chunked, and indexed for semantic search.",
        "operationId": "upload_and_index_file_api_v1_vector_search_upload_file_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Title"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Comma-separated tags",
              "title": "Tags"
            },
            "description": "Comma-separated tags"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_and_index_file_api_v1_vector_search_upload_file_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/vector-search/collections": {
      "get": {
        "tags": [
          "Vector Search",
          "Vector Search"
        ],
        "summary": "List Collections",
        "description": "List all available document collections and their status.",
        "operationId": "list_collections_api_v1_vector_search_collections_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response List Collections Api V1 Vector Search Collections Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/vector-search/health": {
      "get": {
        "tags": [
          "Vector Search",
          "Vector Search"
        ],
        "summary": "Health Check",
        "description": "Vector search service health check.",
        "operationId": "health_check_api_v1_vector_search_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/vector-search/search/public": {
      "post": {
        "tags": [
          "Vector Search",
          "Vector Search"
        ],
        "summary": "Search Documents Public",
        "description": "Public search endpoint for testing and demos (no authentication required).",
        "operationId": "search_documents_public_api_v1_vector_search_search_public_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequestModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponseModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/vector-search/search/enhanced": {
      "post": {
        "tags": [
          "Vector Search",
          "Vector Search"
        ],
        "summary": "🚀 Enhanced AI-Powered Semantic Search",
        "description": "**🚀 Next-generation semantic search with intelligent document graph analysis and dynamic reranking.**\n             \n             This enhanced search endpoint provides:\n             \n             ## 🧠 Intelligent Features:\n             - **Document Relationship Graphs**: Builds intelligent relationships between code files, documentation, and configs\n             - **Dynamic Reranking**: AI-powered result reordering based on user intent and context\n             - **Code Dependency Analysis**: Understands imports, functions, classes, and code relationships\n             - **Intent Detection**: Automatically detects search intent (code_search, documentation, debugging, etc.)\n             - **Contextual Scoring**: Multi-factor relevance scoring including freshness, popularity, and relationships\n             - **Related Documents**: Suggests semantically and structurally related documents\n             \n             ## 🎯 Perfect For:\n             - **Code Exploration**: Find related files, dependencies, and implementations\n             - **Architecture Understanding**: Discover system components and their relationships\n             - **Documentation Discovery**: Find related guides, tutorials, and specs\n             - **Debugging Assistance**: Locate relevant troubleshooting resources\n             - **Learning Paths**: Discover connected learning materials and examples\n             \n             ## 🔬 Advanced Capabilities:\n             - **Multi-language Code Analysis**: Supports Python, TypeScript, JavaScript, Java, Go\n             - **Semantic Clustering**: Groups results by topic and relationship strength\n             - **Popularity Signals**: Incorporates user interaction patterns\n             - **Temporal Relevance**: Considers document freshness and update frequency\n             - **User Personalization**: Adapts to user preferences and search history\n             \n             ## 📊 Enhanced Results Include:\n             - **Contextual Scores**: Detailed scoring breakdown for transparency\n             - **Document Relationships**: Visual network of related documents\n             - **Code Metadata**: Functions, classes, dependencies, complexity scores\n             - **Intent Analysis**: Why this result matches your search intent\n             \n             ## Example Usage:\n             ```bash\n             curl -X POST \"/api/v1/vector-search/search/enhanced\" \\\n               -H \"Authorization: Bearer YOUR_TOKEN\" \\\n               -H \"Content-Type: application/json\" \\\n               -d '{\n                 \"query\": \"Docker microservices deployment patterns\",\n                 \"collections\": [\"confluence\", \"gitlab\"],\n                 \"limit\": 10,\n                 \"enable_graph_analysis\": true,\n                 \"enable_dynamic_reranking\": true,\n                 \"include_related_documents\": true,\n                 \"user_context\": {\n                   \"technical_level\": \"advanced\",\n                   \"preferred_domains\": [\"devops\", \"backend\"]\n                 }\n               }'\n             ```",
        "operationId": "enhanced_search_documents_api_v1_vector_search_search_enhanced_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnhancedSearchRequestModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnhancedSearchResponseModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/generate/rfc": {
      "post": {
        "tags": [
          "RFC Generation",
          "Document Generation"
        ],
        "summary": "Generate Rfc",
        "description": "Генерация RFC документа с использованием всех источников данных\nEnhanced with async patterns for enterprise reliability and performance\n\nИспользует:\n- Confluence для поиска существующих RFC и стандартов\n- GitLab для анализа кода и архитектурных решений\n- Jira для понимания требований и задач\n- Локальные файлы для корпоративных стандартов\n\nOptimizations:\n- Concurrent context gathering from multiple sources\n- Intelligent timeout calculation based on complexity\n- Retry logic with exponential backoff\n- Background task processing for large operations",
        "operationId": "generate_rfc_api_v1_generate_rfc_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/app__api__v1__generate__RFCGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/generate/architecture": {
      "post": {
        "tags": [
          "RFC Generation",
          "Document Generation"
        ],
        "summary": "Generate Architecture",
        "description": "Генерация архитектурного документа с использованием всех источников\nEnhanced with concurrent processing and intelligent timeout management\n\nАнализирует:\n- Существующие архитектурные решения из Confluence\n- Код и структуру проектов из GitLab\n- Требования и ограничения из Jira\n- Корпоративные стандарты из локальных файлов",
        "operationId": "generate_architecture_api_v1_generate_architecture_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchitectureGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/generate/documentation": {
      "post": {
        "tags": [
          "RFC Generation",
          "Document Generation"
        ],
        "summary": "Generate Documentation",
        "description": "Генерация документации с использованием всех источников\nEnhanced with concurrent processing and smart timeout management\n\nСоздает документацию на основе:\n- Существующей документации из Confluence\n- Кода и комментариев из GitLab\n- Требований из Jira\n- Шаблонов из локальных файлов",
        "operationId": "generate_documentation_api_v1_generate_documentation_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentationGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/generate/status/{task_id}": {
      "get": {
        "tags": [
          "RFC Generation",
          "Document Generation"
        ],
        "summary": "Get Generation Status",
        "description": "Получение статуса задачи генерации",
        "operationId": "get_generation_status_api_v1_generate_status__task_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerationStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/generate/templates": {
      "get": {
        "tags": [
          "RFC Generation",
          "Document Generation"
        ],
        "summary": "Get Available Templates",
        "description": "Получение доступных шаблонов для генерации",
        "operationId": "get_available_templates_api_v1_generate_templates_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "template_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Template Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Available Templates Api V1 Generate Templates Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/generate/sources/usage": {
      "get": {
        "tags": [
          "RFC Generation",
          "Document Generation"
        ],
        "summary": "Get Sources Usage Stats",
        "description": "Статистика использования источников для генерации",
        "operationId": "get_sources_usage_stats_api_v1_generate_sources_usage_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 30,
              "title": "Days"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Sources Usage Stats Api V1 Generate Sources Usage Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/generate/rfc/enhanced": {
      "post": {
        "tags": [
          "RFC Generation",
          "Document Generation"
        ],
        "summary": "Generate Enhanced Rfc",
        "description": "🚀 Enhanced RFC Generation with Architecture Analysis and Mermaid Diagrams\n\nFeatures:\n- Automatic codebase architecture analysis\n- Mermaid diagram generation (architecture, dependencies, deployment)\n- Multi-source context gathering (Confluence, GitLab, Jira)\n- Professional RFC templates\n- Architecture recommendations\n- Project health assessment\n\nPerfect for:\n- System architecture changes\n- New feature implementation\n- Technical debt reduction\n- Performance improvements",
        "operationId": "generate_enhanced_rfc_api_v1_generate_rfc_enhanced_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnhancedRFCRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnhancedGenerationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/generate/architecture/analyze": {
      "post": {
        "tags": [
          "RFC Generation",
          "Document Generation"
        ],
        "summary": "Analyze Project Architecture Endpoint",
        "description": "🔍 Project Architecture Analysis\n\nAnalyzes codebase architecture and provides:\n- Component identification and relationships\n- Technology stack detection\n- Architecture patterns recognition\n- Improvement recommendations\n- Mermaid diagrams generation\n- Health score assessment\n\nUse this before generating RFCs for data-driven decisions.",
        "operationId": "analyze_project_architecture_endpoint_api_v1_generate_architecture_analyze_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectAnalysisRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Analyze Project Architecture Endpoint Api V1 Generate Architecture Analyze Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/generate/rfc/from-analysis": {
      "post": {
        "tags": [
          "RFC Generation",
          "Document Generation"
        ],
        "summary": "Generate Rfc From Analysis",
        "description": "📊 Generate RFC from Pre-computed Analysis\n\nUses existing project analysis data to generate RFC without re-analyzing.\nPerfect for iterative RFC creation based on the same codebase analysis.\n\nWorkflow:\n1. First call /architecture/analyze\n2. Then call this endpoint with analysis results\n3. Get RFC with pre-computed diagrams and recommendations",
        "operationId": "generate_rfc_from_analysis_api_v1_generate_rfc_from_analysis_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_generate_rfc_from_analysis_api_v1_generate_rfc_from_analysis_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnhancedGenerationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/documentation/generate": {
      "post": {
        "tags": [
          "Documentation Generation"
        ],
        "summary": "Generate Code Documentation",
        "description": "Генерирует документацию по коду с использованием AI",
        "operationId": "generate_documentation_api_v1_documentation_generate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/models__documentation__DocumentationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/documentation/analyze": {
      "post": {
        "tags": [
          "Documentation Generation"
        ],
        "summary": "Analyze Code",
        "description": "Анализирует код без генерации документации",
        "operationId": "analyze_code_api_v1_documentation_analyze_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeAnalysisRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeAnalysis"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/documentation/capabilities": {
      "get": {
        "tags": [
          "Documentation Generation"
        ],
        "summary": "Get Documentation Capabilities",
        "description": "Возвращает список поддерживаемых возможностей генерации документации",
        "operationId": "get_capabilities_api_v1_documentation_capabilities_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Capabilities Api V1 Documentation Capabilities Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/documentation/templates": {
      "get": {
        "tags": [
          "Documentation Generation"
        ],
        "summary": "Get Documentation Templates",
        "description": "Возвращает доступные шаблоны документации",
        "operationId": "get_templates_api_v1_documentation_templates_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {},
                  "type": "array",
                  "title": "Response Get Templates Api V1 Documentation Templates Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/documentation/quick-generate": {
      "post": {
        "tags": [
          "Documentation Generation"
        ],
        "summary": "Quick Documentation Generation",
        "description": "Быстрая генерация документации для простого кода",
        "operationId": "quick_generate_documentation_api_v1_documentation_quick_generate_post",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Code"
            }
          },
          {
            "name": "documentation_type",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DocumentationType"
                }
              ],
              "default": "readme",
              "title": "Documentation Type"
            }
          },
          {
            "name": "target_audience",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "developers",
              "title": "Target Audience"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/documentation/examples": {
      "get": {
        "tags": [
          "Documentation Generation"
        ],
        "summary": "Get Documentation Examples",
        "description": "Возвращает примеры запросов для генерации документации",
        "operationId": "get_documentation_examples_api_v1_documentation_examples_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Documentation Examples Api V1 Documentation Examples Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback": {
      "post": {
        "tags": [
          "User Feedback"
        ],
        "summary": "Submit Feedback",
        "description": "Отправляет обратную связь (лайк/дизлайк) для улучшения качества AI",
        "operationId": "submit_feedback_api_v1_feedback_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeedbackRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models__feedback__FeedbackResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/stats/{target_id}": {
      "get": {
        "tags": [
          "User Feedback"
        ],
        "summary": "Get Feedback Stats",
        "description": "Получает статистику обратной связи для конкретного объекта",
        "operationId": "get_feedback_stats_api_v1_feedback_stats__target_id__get",
        "parameters": [
          {
            "name": "target_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Target Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedbackStats"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/analytics": {
      "get": {
        "tags": [
          "User Feedback"
        ],
        "summary": "Get Feedback Analytics",
        "description": "Получает аналитику обратной связи для переобучения модели",
        "operationId": "get_feedback_analytics_api_v1_feedback_analytics_get",
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FeedbackContext"
                }
              ],
              "title": "Context"
            }
          },
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 30,
              "title": "Days"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeedbackAnalytics"
                  },
                  "title": "Response Get Feedback Analytics Api V1 Feedback Analytics Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Enhanced Feedback System",
          "Enhanced Feedback"
        ],
        "summary": "Get Feedback Analytics",
        "description": "Получение аналитики обратной связи",
        "operationId": "get_feedback_analytics_api_v1_feedback_analytics_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AnalyticsRequest"
                  }
                ],
                "default": {
                  "time_period_days": 7
                },
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/retrain": {
      "post": {
        "tags": [
          "User Feedback"
        ],
        "summary": "Trigger Model Retraining",
        "description": "Запускает переобучение модели на основе обратной связи",
        "operationId": "trigger_retraining_api_v1_feedback_retrain_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrainingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrainingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/retrain/{job_id}": {
      "get": {
        "tags": [
          "User Feedback"
        ],
        "summary": "Get Retraining Status",
        "description": "Получает статус задачи переобучения модели",
        "operationId": "get_retraining_status_api_v1_feedback_retrain__job_id__get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Retraining Status Api V1 Feedback Retrain  Job Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/reputation/{user_id}": {
      "get": {
        "tags": [
          "User Feedback"
        ],
        "summary": "Get User Reputation",
        "description": "Получает репутацию пользователя в системе обратной связи",
        "operationId": "get_user_reputation_api_v1_feedback_reputation__user_id__get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserReputationScore"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/trends": {
      "get": {
        "tags": [
          "User Feedback"
        ],
        "summary": "Get Feedback Trends",
        "description": "Получает тренды обратной связи за период времени",
        "operationId": "get_feedback_trends_api_v1_feedback_trends_get",
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 30,
              "title": "Days"
            }
          },
          {
            "name": "context",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FeedbackContext"
                }
              ],
              "title": "Context"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Feedback Trends Api V1 Feedback Trends Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/{feedback_id}": {
      "delete": {
        "tags": [
          "User Feedback"
        ],
        "summary": "Delete Feedback",
        "description": "Удаляет обратную связь (для модерации)",
        "operationId": "delete_feedback_api_v1_feedback__feedback_id__delete",
        "parameters": [
          {
            "name": "feedback_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Feedback Id"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "inappropriate_content",
              "title": "Reason"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/export": {
      "get": {
        "tags": [
          "User Feedback"
        ],
        "summary": "Export Feedback Data",
        "description": "Экспортирует данные обратной связи для анализа",
        "operationId": "export_feedback_data_api_v1_feedback_export_get",
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FeedbackContext"
                }
              ],
              "title": "Context"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Date From"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Date To"
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "json",
              "title": "Format"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Export Feedback Data Api V1 Feedback Export Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/submit": {
      "post": {
        "tags": [
          "Enhanced Feedback System",
          "Enhanced Feedback"
        ],
        "summary": "Submit Feedback",
        "description": "Отправка обратной связи",
        "operationId": "submit_feedback_api_v1_feedback_submit_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeedbackSubmitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/app__api__v1__enhanced_feedback__FeedbackResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/feedback/content/{content_id}": {
      "get": {
        "tags": [
          "Enhanced Feedback System",
          "Enhanced Feedback"
        ],
        "summary": "Get Content Feedback",
        "description": "Получение обратной связи по контенту",
        "operationId": "get_content_feedback_api_v1_feedback_content__content_id__get",
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID контента",
              "title": "Content Id"
            },
            "description": "ID контента"
          },
          {
            "name": "include_comments",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Включить комментарии",
              "default": true,
              "title": "Include Comments"
            },
            "description": "Включить комментарии"
          },
          {
            "name": "include_moderated",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Включить модерированные",
              "default": false,
              "title": "Include Moderated"
            },
            "description": "Включить модерированные"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentFeedbackResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/user/{user_id}/history": {
      "get": {
        "tags": [
          "Enhanced Feedback System",
          "Enhanced Feedback"
        ],
        "summary": "Get User Feedback History",
        "description": "Получение истории обратной связи пользователя",
        "operationId": "get_user_feedback_history_api_v1_feedback_user__user_id__history_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID пользователя",
              "title": "User Id"
            },
            "description": "ID пользователя"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "minimum": 1,
              "description": "Лимит записей",
              "default": 50,
              "title": "Limit"
            },
            "description": "Лимит записей"
          },
          {
            "name": "content_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ContentType"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Фильтр по типу контента",
              "title": "Content Type"
            },
            "description": "Фильтр по типу контента"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/app__api__v1__enhanced_feedback__FeedbackResponse"
                  },
                  "title": "Response Get User Feedback History Api V1 Feedback User  User Id  History Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/{feedback_id}/moderate": {
      "post": {
        "tags": [
          "Enhanced Feedback System",
          "Enhanced Feedback"
        ],
        "summary": "Moderate Feedback",
        "description": "Модерация обратной связи",
        "operationId": "moderate_feedback_api_v1_feedback__feedback_id__moderate_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "feedback_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID feedback",
              "title": "Feedback Id"
            },
            "description": "ID feedback"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModerationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/feedback/status": {
      "get": {
        "tags": [
          "Enhanced Feedback System",
          "Enhanced Feedback"
        ],
        "summary": "Get Feedback Service Status",
        "description": "Получение статуса сервиса обратной связи",
        "operationId": "get_feedback_service_status_api_v1_feedback_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/llm/initialize": {
      "post": {
        "tags": [
          "LLM Management",
          "LLM Management"
        ],
        "summary": "Initialize Llm Service Endpoint",
        "description": "Initialize LLM service with available providers.",
        "operationId": "initialize_llm_service_endpoint_api_v1_llm_initialize_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/llm/health": {
      "get": {
        "tags": [
          "LLM Management",
          "LLM Management"
        ],
        "summary": "Get Llm Health",
        "description": "Get health status of all LLM providers.\nEnhanced with timeout protection and concurrent health checks.",
        "operationId": "get_llm_health_api_v1_llm_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LLMHealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/llm/stats": {
      "get": {
        "tags": [
          "LLM Management",
          "LLM Management"
        ],
        "summary": "Get Llm Stats",
        "description": "Get comprehensive LLM service statistics.\nEnhanced with timeout protection and concurrent stats collection.",
        "operationId": "get_llm_stats_api_v1_llm_stats_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LLMStatsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/llm/generate": {
      "post": {
        "tags": [
          "LLM Management",
          "LLM Management"
        ],
        "summary": "Generate Text",
        "description": "Generate text using the best available LLM provider.\nEnhanced with timeout protection, retry logic, and performance optimization.",
        "operationId": "generate_text_api_v1_llm_generate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TextGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LLMResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/llm/generate/rfc": {
      "post": {
        "tags": [
          "LLM Management",
          "LLM Management"
        ],
        "summary": "Generate Rfc",
        "description": "Generate an RFC document.\nEnhanced with timeout protection and concurrent processing.",
        "operationId": "generate_rfc_api_v1_llm_generate_rfc_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/app__api__v1__llm_management__RFCGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LLMResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/llm/generate/documentation": {
      "post": {
        "tags": [
          "LLM Management",
          "LLM Management"
        ],
        "summary": "Generate Documentation",
        "description": "Generate code documentation.\nEnhanced with timeout protection and code complexity analysis.",
        "operationId": "generate_documentation_api_v1_llm_generate_documentation_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/app__api__v1__llm_management__DocumentationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LLMResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/llm/answer": {
      "post": {
        "tags": [
          "LLM Management",
          "LLM Management"
        ],
        "summary": "Answer Question",
        "description": "Answer a question using available context.",
        "operationId": "answer_question_api_v1_llm_answer_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionAnswerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LLMResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/llm/providers": {
      "get": {
        "tags": [
          "LLM Management",
          "LLM Management"
        ],
        "summary": "List Providers",
        "description": "List all available LLM providers and their status.",
        "operationId": "list_providers_api_v1_llm_providers_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/llm/providers/health-check": {
      "post": {
        "tags": [
          "LLM Management",
          "LLM Management"
        ],
        "summary": "Check All Providers",
        "description": "Run health checks on all providers.\nEnhanced with concurrent health checking and timeout protection.",
        "operationId": "check_all_providers_api_v1_llm_providers_health_check_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/llm/batch/generate": {
      "post": {
        "tags": [
          "LLM Management",
          "LLM Management"
        ],
        "summary": "Batch Generate Text",
        "description": "Generate text for multiple prompts in batch.\nEnhanced with concurrent processing and timeout protection.",
        "operationId": "batch_generate_text_api_v1_llm_batch_generate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/TextGenerationRequest"
                },
                "type": "array",
                "title": "Requests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/learning/feedback": {
      "post": {
        "tags": [
          "Machine Learning",
          "Learning Pipeline"
        ],
        "summary": "Submit RFC Feedback",
        "description": "Отправляет фидбек по сгенерированному RFC и запускает переобучение при достижении порога",
        "operationId": "submit_rfc_feedback_api_v1_learning_feedback_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RFCFeedbackRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Submit Rfc Feedback Api V1 Learning Feedback Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/learning/stats": {
      "get": {
        "tags": [
          "Machine Learning",
          "Learning Pipeline"
        ],
        "summary": "Get Learning Statistics",
        "description": "Возвращает статистику процесса обучения модели",
        "operationId": "get_learning_statistics_api_v1_learning_stats_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LearningStatsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/learning/manual-retrain": {
      "post": {
        "tags": [
          "Machine Learning",
          "Learning Pipeline"
        ],
        "summary": "Manual Model Retraining",
        "description": "Запускает ручное переобучение модели (для админов)",
        "operationId": "manual_retrain_api_v1_learning_manual_retrain_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Manual Retrain Api V1 Learning Manual Retrain Post"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/learning/health": {
      "get": {
        "tags": [
          "Machine Learning",
          "Learning Pipeline"
        ],
        "summary": "Learning Pipeline Health",
        "description": "Проверяет статус Learning Pipeline",
        "operationId": "learning_health_api_v1_learning_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Learning Health Api V1 Learning Health Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/budget/status": {
      "get": {
        "tags": [
          "Budget Management",
          "Budget Management"
        ],
        "summary": "Get Budget Status",
        "description": "Get current user's budget status and usage statistics.\n\nReturns comprehensive budget information including:\n- Current usage and remaining budget\n- Usage percentage and status\n- Projections and averages\n- Recent activity summary",
        "operationId": "get_budget_status_api_v1_budget_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetStatusResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/budget/check/{estimated_cost}": {
      "get": {
        "tags": [
          "Budget Management",
          "Budget Management"
        ],
        "summary": "Check Budget Availability",
        "description": "Check if user can afford an operation with estimated cost.\n\nArgs:\n    estimated_cost: Estimated cost in USD for the operation\n    \nReturns:\n    Budget check result with approval status and details",
        "operationId": "check_budget_availability_api_v1_budget_check__estimated_cost__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "estimated_cost",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number",
              "title": "Estimated Cost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/budget/update": {
      "post": {
        "tags": [
          "Budget Management",
          "Budget Management"
        ],
        "summary": "Update User Budget",
        "description": "Update user's budget limit (admin only).\n\nAllows administrators to modify user budget limits.\nLogs the change for audit purposes.",
        "operationId": "update_user_budget_api_v1_budget_update_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "required": true,
            "schema": {
              "title": "User"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BudgetUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/budget/usage-history": {
      "get": {
        "tags": [
          "Budget Management",
          "Budget Management"
        ],
        "summary": "Get Usage History",
        "description": "Get user's usage history for the specified number of days.\n\nArgs:\n    days: Number of days to include (default: 7, max: 90)\n    \nReturns:\n    Usage history with daily breakdown and totals",
        "operationId": "get_usage_history_api_v1_budget_usage_history_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 7,
              "title": "Days"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai-analytics/collect-data": {
      "post": {
        "tags": [
          "AI Analytics",
          "AI Analytics"
        ],
        "summary": "Collect Analytics Data",
        "description": "Collect analytics data point",
        "operationId": "collect_analytics_data_api_v1_ai_analytics_collect_data_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalyticsDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-analytics/dashboard": {
      "get": {
        "tags": [
          "AI Analytics",
          "AI Analytics"
        ],
        "summary": "Get Dashboard Analytics",
        "description": "Get comprehensive analytics for dashboard",
        "operationId": "get_dashboard_analytics_api_v1_ai_analytics_dashboard_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardAnalyticsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-analytics/trends": {
      "post": {
        "tags": [
          "AI Analytics",
          "AI Analytics"
        ],
        "summary": "Analyze Performance Trends",
        "description": "Analyze performance trends for specific metrics",
        "operationId": "analyze_performance_trends_api_v1_ai_analytics_trends_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrendAnalysisRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrendAnalysisResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-analytics/usage-patterns": {
      "get": {
        "tags": [
          "AI Analytics",
          "AI Analytics"
        ],
        "summary": "Analyze Usage Patterns",
        "description": "Analyze AI usage patterns",
        "operationId": "analyze_usage_patterns_api_v1_ai_analytics_usage_patterns_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "time_range_days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 90,
              "minimum": 1,
              "description": "Time range in days",
              "default": 30,
              "title": "Time Range Days"
            },
            "description": "Time range in days"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai-analytics/cost-insights": {
      "get": {
        "tags": [
          "AI Analytics",
          "AI Analytics"
        ],
        "summary": "Get Cost Optimization Insights",
        "description": "Get cost optimization insights",
        "operationId": "get_cost_optimization_insights_api_v1_ai_analytics_cost_insights_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-analytics/predictive-model": {
      "post": {
        "tags": [
          "AI Analytics",
          "AI Analytics"
        ],
        "summary": "Build Predictive Model",
        "description": "Build predictive model for performance metrics",
        "operationId": "build_predictive_model_api_v1_ai_analytics_predictive_model_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PredictiveModelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PredictiveModelResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-analytics/history": {
      "get": {
        "tags": [
          "AI Analytics",
          "AI Analytics"
        ],
        "summary": "Get Analytics History",
        "description": "Get analytics processing history",
        "operationId": "get_analytics_history_api_v1_ai_analytics_history_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-analytics/metrics-overview": {
      "get": {
        "tags": [
          "AI Analytics",
          "AI Analytics"
        ],
        "summary": "Get Metrics Overview",
        "description": "Get overview of available metrics and models",
        "operationId": "get_metrics_overview_api_v1_ai_analytics_metrics_overview_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-analytics/real-time-metrics": {
      "get": {
        "tags": [
          "AI Analytics",
          "AI Analytics"
        ],
        "summary": "Get Real Time Metrics",
        "description": "Get real-time analytics metrics",
        "operationId": "get_real_time_metrics_api_v1_ai_analytics_real_time_metrics_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Number of recent data points",
              "default": 100,
              "title": "Limit"
            },
            "description": "Number of recent data points"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai-analytics/batch-analysis": {
      "post": {
        "tags": [
          "AI Analytics",
          "AI Analytics"
        ],
        "summary": "Run Batch Analysis",
        "description": "Run comprehensive batch analysis",
        "operationId": "run_batch_analysis_api_v1_ai_analytics_batch_analysis_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "time_range_days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 90,
              "minimum": 1,
              "description": "Time range for analysis",
              "default": 30,
              "title": "Time Range Days"
            },
            "description": "Time range for analysis"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai-analytics/health": {
      "get": {
        "tags": [
          "AI Analytics",
          "AI Analytics"
        ],
        "summary": "Ai Analytics Health",
        "description": "Health check for AI analytics service",
        "operationId": "ai_analytics_health_api_v1_ai_analytics_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/ai-optimization/optimize": {
      "get": {
        "tags": [
          "AI Optimization",
          "AI Optimization"
        ],
        "summary": "List Optimizations",
        "description": "List user optimizations",
        "operationId": "list_optimizations_api_v1_ai_optimization_optimize_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OptimizationResult"
                  },
                  "type": "array",
                  "title": "Response List Optimizations Api V1 Ai Optimization Optimize Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "AI Optimization",
          "AI Optimization"
        ],
        "summary": "Start Optimization",
        "description": "Start AI model optimization",
        "operationId": "start_optimization_api_v1_ai_optimization_optimize_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OptimizationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptimizationResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-optimization/optimize/{optimization_id}": {
      "get": {
        "tags": [
          "AI Optimization",
          "AI Optimization"
        ],
        "summary": "Get Optimization",
        "description": "Get optimization result",
        "operationId": "get_optimization_api_v1_ai_optimization_optimize__optimization_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "optimization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Optimization Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptimizationResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai-optimization/benchmark": {
      "post": {
        "tags": [
          "AI Optimization",
          "AI Optimization"
        ],
        "summary": "Start Benchmark",
        "description": "Start AI model benchmark",
        "operationId": "start_benchmark_api_v1_ai_optimization_benchmark_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BenchmarkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BenchmarkResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-optimization/benchmark/{benchmark_id}": {
      "get": {
        "tags": [
          "AI Optimization",
          "AI Optimization"
        ],
        "summary": "Get Benchmark",
        "description": "Get benchmark result",
        "operationId": "get_benchmark_api_v1_ai_optimization_benchmark__benchmark_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "benchmark_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Benchmark Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BenchmarkResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai-optimization/recommendations/{model_type}": {
      "get": {
        "tags": [
          "AI Optimization",
          "AI Optimization"
        ],
        "summary": "Get Recommendations",
        "description": "Get optimization recommendations for model type",
        "operationId": "get_recommendations_api_v1_ai_optimization_recommendations__model_type__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "model_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai-optimization/config/{optimization_id}": {
      "get": {
        "tags": [
          "AI Optimization",
          "AI Optimization"
        ],
        "summary": "Get Optimization Config",
        "description": "Get optimization configuration",
        "operationId": "get_optimization_config_api_v1_ai_optimization_config__optimization_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "optimization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Optimization Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai-optimization/health": {
      "get": {
        "tags": [
          "AI Optimization",
          "AI Optimization"
        ],
        "summary": "Health Check",
        "description": "Health check endpoint",
        "operationId": "health_check_api_v1_ai_optimization_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/ai-optimization/models": {
      "get": {
        "tags": [
          "AI Optimization",
          "AI Optimization"
        ],
        "summary": "Get Available Models",
        "description": "Get available AI models for optimization",
        "operationId": "get_available_models_api_v1_ai_optimization_models_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-optimization/fine-tune/{model_type}": {
      "post": {
        "tags": [
          "AI Optimization",
          "AI Optimization"
        ],
        "summary": "Fine Tune Model",
        "description": "Fine-tune specific AI model",
        "operationId": "fine_tune_model_api_v1_ai_optimization_fine_tune__model_type__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "model_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Type"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "number"
                    }
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Target Metrics"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai-optimization/performance/{model_type}": {
      "post": {
        "tags": [
          "AI Optimization",
          "AI Optimization"
        ],
        "summary": "Optimize Performance",
        "description": "Optimize model performance (speed, throughput)",
        "operationId": "optimize_performance_api_v1_ai_optimization_performance__model_type__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "model_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai-optimization/cost-reduction/{model_type}": {
      "post": {
        "tags": [
          "AI Optimization",
          "AI Optimization"
        ],
        "summary": "Reduce Costs",
        "description": "Optimize model for cost reduction",
        "operationId": "reduce_costs_api_v1_ai_optimization_cost_reduction__model_type__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "model_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai-optimization/quality/{model_type}": {
      "post": {
        "tags": [
          "AI Optimization",
          "AI Optimization"
        ],
        "summary": "Improve Quality",
        "description": "Optimize model for quality improvement",
        "operationId": "improve_quality_api_v1_ai_optimization_quality__model_type__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "model_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/optimization/benchmark": {
      "post": {
        "tags": [
          "Performance Optimization",
          "Performance Optimization"
        ],
        "summary": "Run Performance Benchmark",
        "description": "Run performance benchmark for specified component",
        "operationId": "run_performance_benchmark_api_v1_optimization_benchmark_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BenchmarkRequestModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/optimization/optimize": {
      "post": {
        "tags": [
          "Performance Optimization",
          "Performance Optimization"
        ],
        "summary": "Run Optimization",
        "description": "Run optimization for specified component",
        "operationId": "run_optimization_api_v1_optimization_optimize_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OptimizationRequestModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/optimization/status/{optimization_id}": {
      "get": {
        "tags": [
          "Performance Optimization",
          "Performance Optimization"
        ],
        "summary": "Get Optimization Status",
        "description": "Get optimization status by ID",
        "operationId": "get_optimization_status_api_v1_optimization_status__optimization_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "optimization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Optimization Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/optimization/history": {
      "get": {
        "tags": [
          "Performance Optimization",
          "Performance Optimization"
        ],
        "summary": "Get Optimization History",
        "description": "Get optimization history",
        "operationId": "get_optimization_history_api_v1_optimization_history_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "minimum": 1,
              "description": "Maximum number of optimizations",
              "default": 50,
              "title": "Limit"
            },
            "description": "Maximum number of optimizations"
          },
          {
            "name": "component",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by component",
              "title": "Component"
            },
            "description": "Filter by component"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai-advanced/multimodal-search": {
      "post": {
        "tags": [
          "Advanced AI Features",
          "Advanced AI"
        ],
        "summary": "Multimodal Search",
        "description": "Perform multi-modal search combining text and optional image analysis",
        "operationId": "multimodal_search_api_v1_ai_advanced_multimodal_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultimodalSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/MultimodalSearchResult"
                  },
                  "type": "array",
                  "title": "Response Multimodal Search Api V1 Ai Advanced Multimodal Search Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-advanced/code-review": {
      "post": {
        "tags": [
          "Advanced AI Features",
          "Advanced AI"
        ],
        "summary": "Code Review",
        "description": "Perform AI-powered code review with suggestions and issue detection",
        "operationId": "code_review_api_v1_ai_advanced_code_review_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeReviewRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeReviewResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-advanced/rfc-advanced": {
      "post": {
        "tags": [
          "Advanced AI Features",
          "Advanced AI"
        ],
        "summary": "Generate Advanced Rfc",
        "description": "Generate advanced RFC with custom templates and structured content",
        "operationId": "generate_advanced_rfc_api_v1_ai_advanced_rfc_advanced_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdvancedRFCRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdvancedRFCResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-advanced/upload-image": {
      "post": {
        "tags": [
          "Advanced AI Features",
          "Advanced AI"
        ],
        "summary": "Upload Image For Search",
        "description": "Upload image file for multi-modal search",
        "operationId": "upload_image_for_search_api_v1_ai_advanced_upload_image_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_image_for_search_api_v1_ai_advanced_upload_image_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-advanced/rfc-templates": {
      "get": {
        "tags": [
          "Advanced AI Features",
          "Advanced AI"
        ],
        "summary": "Get Rfc Templates",
        "description": "Get available RFC templates for advanced generation",
        "operationId": "get_rfc_templates_api_v1_ai_advanced_rfc_templates_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-advanced/health": {
      "get": {
        "tags": [
          "Advanced AI Features",
          "Advanced AI"
        ],
        "summary": "Advanced Ai Health",
        "description": "Health check for advanced AI features",
        "operationId": "advanced_ai_health_api_v1_ai_advanced_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/deep-research/start": {
      "post": {
        "tags": [
          "Deep Research",
          "Deep Research"
        ],
        "summary": "Start Research",
        "description": "Начать новое исследование\n\nСоздает новую сессию исследования и возвращает её идентификатор.\nДля получения результатов в real-time используйте WebSocket соединение.",
        "operationId": "start_research_api_v1_deep_research_start_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartResearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResearchSessionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/deep-research/execute/{session_id}": {
      "post": {
        "tags": [
          "Deep Research",
          "Deep Research"
        ],
        "summary": "Execute Research",
        "description": "Запустить выполнение исследования\n\nЗапускает исследование в фоновом режиме. Результаты будут переданы\nчерез WebSocket соединение в real-time.",
        "operationId": "execute_research_api_v1_deep_research_execute__session_id__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/deep-research/status/{session_id}": {
      "get": {
        "tags": [
          "Deep Research",
          "Deep Research"
        ],
        "summary": "Get Research Status",
        "description": "Получить статус исследования",
        "operationId": "get_research_status_api_v1_deep_research_status__session_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResearchStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/deep-research/cancel/{session_id}": {
      "delete": {
        "tags": [
          "Deep Research",
          "Deep Research"
        ],
        "summary": "Cancel Research",
        "description": "Отменить исследование",
        "operationId": "cancel_research_api_v1_deep_research_cancel__session_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/deep-research/engine/status": {
      "get": {
        "tags": [
          "Deep Research",
          "Deep Research"
        ],
        "summary": "Get Engine Status",
        "description": "Получить статус движка исследований",
        "operationId": "get_engine_status_api_v1_deep_research_engine_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResearchEngineStatusResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/deep-research/sessions": {
      "get": {
        "tags": [
          "Deep Research",
          "Deep Research"
        ],
        "summary": "List User Sessions",
        "description": "Получить список сессий пользователя",
        "operationId": "list_user_sessions_api_v1_deep_research_sessions_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/deep-research/health": {
      "get": {
        "tags": [
          "Deep Research",
          "Deep Research"
        ],
        "summary": "Health Check",
        "description": "Health check для Deep Research API",
        "operationId": "health_check_api_v1_deep_research_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/realtime-monitoring/ingest-metric": {
      "post": {
        "tags": [
          "Real-time Monitoring",
          "Real-time Monitoring"
        ],
        "summary": "Ingest Metric",
        "description": "Ingest real-time metric data",
        "operationId": "ingest_metric_api_v1_realtime_monitoring_ingest_metric_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricIngestionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/realtime-monitoring/alerts": {
      "get": {
        "tags": [
          "Real-time Monitoring",
          "Real-time Monitoring"
        ],
        "summary": "Get Alerts",
        "description": "Get monitoring alerts",
        "operationId": "get_alerts_api_v1_realtime_monitoring_alerts_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by alert status",
              "title": "Status"
            },
            "description": "Filter by alert status"
          },
          {
            "name": "severity",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by severity",
              "title": "Severity"
            },
            "description": "Filter by severity"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Maximum number of alerts",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of alerts"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/realtime-monitoring/alerts/{alert_id}/acknowledge": {
      "post": {
        "tags": [
          "Real-time Monitoring",
          "Real-time Monitoring"
        ],
        "summary": "Acknowledge Alert",
        "description": "Acknowledge an alert",
        "operationId": "acknowledge_alert_api_v1_realtime_monitoring_alerts__alert_id__acknowledge_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "alert_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Alert Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertActionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/realtime-monitoring/alerts/{alert_id}/resolve": {
      "post": {
        "tags": [
          "Real-time Monitoring",
          "Real-time Monitoring"
        ],
        "summary": "Resolve Alert",
        "description": "Resolve an alert",
        "operationId": "resolve_alert_api_v1_realtime_monitoring_alerts__alert_id__resolve_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "alert_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Alert Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertActionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/realtime-monitoring/anomalies": {
      "get": {
        "tags": [
          "Real-time Monitoring",
          "Real-time Monitoring"
        ],
        "summary": "Get Anomalies",
        "description": "Get detected anomalies",
        "operationId": "get_anomalies_api_v1_realtime_monitoring_anomalies_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "hours",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 168,
              "minimum": 1,
              "description": "Hours to look back",
              "default": 24,
              "title": "Hours"
            },
            "description": "Hours to look back"
          },
          {
            "name": "anomaly_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by anomaly type",
              "title": "Anomaly Type"
            },
            "description": "Filter by anomaly type"
          },
          {
            "name": "severity",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by severity",
              "title": "Severity"
            },
            "description": "Filter by severity"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Maximum number of anomalies",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of anomalies"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/realtime-monitoring/sla-status": {
      "get": {
        "tags": [
          "Real-time Monitoring",
          "Real-time Monitoring"
        ],
        "summary": "Get Sla Status",
        "description": "Get SLA compliance status",
        "operationId": "get_sla_status_api_v1_realtime_monitoring_sla_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/realtime-monitoring/live-metrics": {
      "get": {
        "tags": [
          "Real-time Monitoring",
          "Real-time Monitoring"
        ],
        "summary": "Get Live Metrics",
        "description": "Get live monitoring metrics",
        "operationId": "get_live_metrics_api_v1_realtime_monitoring_live_metrics_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/realtime-monitoring/dashboard-stats": {
      "get": {
        "tags": [
          "Real-time Monitoring",
          "Real-time Monitoring"
        ],
        "summary": "Get Dashboard Stats",
        "description": "Get monitoring dashboard statistics",
        "operationId": "get_dashboard_stats_api_v1_realtime_monitoring_dashboard_stats_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/realtime-monitoring/health": {
      "get": {
        "tags": [
          "Real-time Monitoring",
          "Real-time Monitoring"
        ],
        "summary": "Monitoring Health",
        "description": "Health check for monitoring system",
        "operationId": "monitoring_health_api_v1_realtime_monitoring_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/realtime-monitoring/metrics/current": {
      "get": {
        "tags": [
          "Real-time Monitoring",
          "Real-time Monitoring"
        ],
        "summary": "Get Current Metrics",
        "description": "Get current system metrics",
        "operationId": "get_current_metrics_api_v1_realtime_monitoring_metrics_current_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/realtime-monitoring/metrics/history": {
      "get": {
        "tags": [
          "Real-time Monitoring",
          "Real-time Monitoring"
        ],
        "summary": "Get Metrics History",
        "description": "Get historical metrics data",
        "operationId": "get_metrics_history_api_v1_realtime_monitoring_metrics_history_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "hours",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 168,
              "minimum": 1,
              "description": "Hours of history to retrieve",
              "default": 24,
              "title": "Hours"
            },
            "description": "Hours of history to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/realtime-monitoring/performance/summary": {
      "get": {
        "tags": [
          "Real-time Monitoring",
          "Real-time Monitoring"
        ],
        "summary": "Get Performance Summary",
        "description": "Get performance summary and statistics",
        "operationId": "get_performance_summary_api_v1_realtime_monitoring_performance_summary_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/realtime-monitoring/system/diagnostics": {
      "get": {
        "tags": [
          "Real-time Monitoring",
          "Real-time Monitoring"
        ],
        "summary": "Get System Diagnostics",
        "description": "Get comprehensive system diagnostics",
        "operationId": "get_system_diagnostics_api_v1_realtime_monitoring_system_diagnostics_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/monitoring/metrics/current": {
      "get": {
        "tags": [
          "System Monitoring",
          "Monitoring"
        ],
        "summary": "Get Current Metrics Compat",
        "description": "Get current system metrics (compatibility endpoint)",
        "operationId": "get_current_metrics_compat_api_v1_monitoring_metrics_current_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/monitoring/metrics/history": {
      "get": {
        "tags": [
          "System Monitoring",
          "Monitoring"
        ],
        "summary": "Get Metrics History Compat",
        "description": "Get historical metrics data (compatibility endpoint)",
        "operationId": "get_metrics_history_compat_api_v1_monitoring_metrics_history_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "hours",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 168,
              "minimum": 1,
              "description": "Hours of history to retrieve",
              "default": 24,
              "title": "Hours"
            },
            "description": "Hours of history to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/monitoring/performance/summary": {
      "get": {
        "tags": [
          "System Monitoring",
          "Monitoring"
        ],
        "summary": "Get Performance Summary Compat",
        "description": "Get performance summary (compatibility endpoint)",
        "operationId": "get_performance_summary_compat_api_v1_monitoring_performance_summary_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/ws/stats": {
      "get": {
        "tags": [
          "WebSocket"
        ],
        "summary": "Get Websocket Stats",
        "description": "Get current WebSocket connection statistics\nEnhanced with timeout protection and concurrent stats collection",
        "operationId": "get_websocket_stats_api_v1_ws_stats_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/ws/notify/{user_id}": {
      "post": {
        "tags": [
          "WebSocket"
        ],
        "summary": "Send Notification",
        "description": "Send notification to a specific user\nEnhanced with timeout protection and delivery confirmation",
        "operationId": "send_notification_api_v1_ws_notify__user_id__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          },
          {
            "name": "notification_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Notification Type"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Message"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ws/broadcast": {
      "post": {
        "tags": [
          "WebSocket"
        ],
        "summary": "Broadcast Message",
        "description": "Broadcast notification to all connected users\nEnhanced with concurrent delivery and progress tracking",
        "operationId": "broadcast_message_api_v1_ws_broadcast_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "notification_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Notification Type"
            }
          },
          {
            "name": "exclude_user",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Exclude User"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Message"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ws/test": {
      "get": {
        "tags": [
          "WebSocket"
        ],
        "summary": "Get Test Page",
        "description": "Test page for WebSocket functionality",
        "operationId": "get_test_page_api_v1_ws_test_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [
          "Root"
        ],
        "summary": "Root",
        "description": "Root endpoint providing API information and feature overview.\n\nReturns basic information about the AI Assistant API including:\n- API version and status\n- Available feature list\n- Quick feature overview\n- Production readiness indicators\n\nReturns:\n    dict: API information and feature list\n    \nExample Response:\n    ```json\n    {\n        \"message\": \"AI Assistant API\",\n        \"version\": \"8.0.0\",\n        \"status\": \"production_ready\",\n        \"features\": [\"Authentication & SSO\", \"Semantic Search\", ...]\n    }\n    ```",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AdvancedRFCRequest": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title",
            "description": "RFC title"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "RFC description"
          },
          "template_type": {
            "type": "string",
            "title": "Template Type",
            "description": "RFC template type",
            "default": "standard"
          },
          "stakeholders": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Stakeholders",
            "description": "List of stakeholders"
          },
          "technical_requirements": {
            "type": "object",
            "title": "Technical Requirements",
            "description": "Technical requirements"
          },
          "business_context": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Business Context",
            "description": "Business context"
          }
        },
        "type": "object",
        "required": [
          "title",
          "description"
        ],
        "title": "AdvancedRFCRequest",
        "description": "Advanced RFC generation request"
      },
      "AdvancedRFCResult": {
        "properties": {
          "rfc_id": {
            "type": "string",
            "title": "Rfc Id",
            "description": "Unique RFC identifier"
          },
          "content": {
            "type": "string",
            "title": "Content",
            "description": "Generated RFC content"
          },
          "template_used": {
            "type": "string",
            "title": "Template Used",
            "description": "Template type used"
          },
          "sections": {
            "items": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "type": "array",
            "title": "Sections",
            "description": "RFC sections"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "RFC metadata"
          },
          "quality_score": {
            "type": "number",
            "maximum": 10.0,
            "minimum": 0.0,
            "title": "Quality Score",
            "description": "Quality assessment score"
          }
        },
        "type": "object",
        "required": [
          "rfc_id",
          "content",
          "template_used",
          "quality_score"
        ],
        "title": "AdvancedRFCResult",
        "description": "Advanced RFC generation result"
      },
      "AdvancedSearchRequest": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query",
            "description": "Поисковый запрос"
          },
          "sources": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SourceFilter"
              },
              {
                "type": "null"
              }
            ]
          },
          "content": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ContentFilter"
              },
              {
                "type": "null"
              }
            ]
          },
          "time": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TimeFilter"
              },
              {
                "type": "null"
              }
            ]
          },
          "quality": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/QualityFilter"
              },
              {
                "type": "null"
              }
            ]
          },
          "authors": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AuthorFilter"
              },
              {
                "type": "null"
              }
            ]
          },
          "tags": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TagFilter"
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/StatusFilter"
              },
              {
                "type": "null"
              }
            ]
          },
          "search_type": {
            "type": "string",
            "title": "Search Type",
            "description": "Тип поиска",
            "default": "semantic"
          },
          "sort_by": {
            "type": "string",
            "title": "Sort By",
            "description": "Сортировка",
            "default": "relevance"
          },
          "sort_order": {
            "type": "string",
            "title": "Sort Order",
            "description": "Порядок сортировки",
            "default": "desc"
          },
          "limit": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Limit",
            "default": 20
          },
          "include_snippets": {
            "type": "boolean",
            "title": "Include Snippets",
            "default": true
          },
          "include_metadata": {
            "type": "boolean",
            "title": "Include Metadata",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "AdvancedSearchRequest",
        "description": "Запрос расширенного поиска"
      },
      "AdvancedSearchResponse": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query"
          },
          "results": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Results"
          },
          "total_results": {
            "type": "integer",
            "title": "Total Results"
          },
          "search_time_ms": {
            "type": "number",
            "title": "Search Time Ms"
          },
          "search_type": {
            "type": "string",
            "title": "Search Type"
          },
          "source_breakdown": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Source Breakdown"
          },
          "quality_stats": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Quality Stats"
          },
          "time_range": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Time Range"
          },
          "facets": {
            "type": "object",
            "title": "Facets"
          }
        },
        "type": "object",
        "required": [
          "query",
          "results",
          "total_results",
          "search_time_ms",
          "search_type",
          "source_breakdown",
          "quality_stats",
          "time_range",
          "facets"
        ],
        "title": "AdvancedSearchResponse",
        "description": "Ответ расширенного поиска"
      },
      "AlertActionRequest": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action",
            "description": "Action to perform"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "User performing action"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "Optional comment"
          }
        },
        "type": "object",
        "required": [
          "action"
        ],
        "title": "AlertActionRequest",
        "description": "Request for alert actions"
      },
      "AnalyticsDataRequest": {
        "properties": {
          "metric_type": {
            "type": "string",
            "title": "Metric Type",
            "description": "Type of metric"
          },
          "value": {
            "type": "number",
            "title": "Value",
            "description": "Metric value"
          },
          "model_type": {
            "type": "string",
            "title": "Model Type",
            "description": "Model type"
          },
          "context": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context",
            "description": "Additional context"
          }
        },
        "type": "object",
        "required": [
          "metric_type",
          "value",
          "model_type"
        ],
        "title": "AnalyticsDataRequest",
        "description": "Request for collecting analytics data"
      },
      "AnalyticsRequest": {
        "properties": {
          "time_period_days": {
            "type": "integer",
            "maximum": 365.0,
            "minimum": 1.0,
            "title": "Time Period Days",
            "description": "Период в днях",
            "default": 7
          },
          "content_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ContentType"
              },
              {
                "type": "null"
              }
            ],
            "description": "Фильтр по типу контента"
          }
        },
        "type": "object",
        "title": "AnalyticsRequest",
        "description": "Запрос аналитики"
      },
      "AnalyticsResponse": {
        "properties": {
          "time_period_days": {
            "type": "integer",
            "title": "Time Period Days"
          },
          "total_feedback": {
            "type": "integer",
            "title": "Total Feedback"
          },
          "feedback_by_type": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Feedback By Type"
          },
          "feedback_by_content_type": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Feedback By Content Type"
          },
          "sentiment_distribution": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Sentiment Distribution"
          },
          "rating_distribution": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Rating Distribution"
          },
          "top_content": {
            "items": {
              "items": {},
              "type": "array"
            },
            "type": "array",
            "title": "Top Content"
          },
          "engagement_metrics": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Engagement Metrics"
          },
          "trends": {
            "type": "object",
            "title": "Trends",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "time_period_days",
          "total_feedback",
          "feedback_by_type",
          "feedback_by_content_type",
          "sentiment_distribution",
          "rating_distribution",
          "top_content",
          "engagement_metrics"
        ],
        "title": "AnalyticsResponse",
        "description": "Ответ с аналитикой"
      },
      "ArchitectureGenerationRequest": {
        "properties": {
          "system_name": {
            "type": "string",
            "title": "System Name",
            "description": "Название системы"
          },
          "system_description": {
            "type": "string",
            "title": "System Description",
            "description": "Описание системы"
          },
          "requirements": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Requirements",
            "description": "Требования к системе"
          },
          "constraints": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Constraints",
            "description": "Ограничения"
          },
          "architecture_type": {
            "type": "string",
            "title": "Architecture Type",
            "description": "Тип архитектуры",
            "default": "microservices"
          },
          "include_diagrams": {
            "type": "boolean",
            "title": "Include Diagrams",
            "description": "Включать диаграммы",
            "default": true
          },
          "use_all_sources": {
            "type": "boolean",
            "title": "Use All Sources",
            "description": "Использовать все источники для контекста",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "system_name",
          "system_description",
          "requirements"
        ],
        "title": "ArchitectureGenerationRequest",
        "description": "Запрос на генерацию архитектурного документа"
      },
      "AuthorFilter": {
        "properties": {
          "authors": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Authors"
          }
        },
        "type": "object",
        "title": "AuthorFilter",
        "description": "Фильтр по авторам"
      },
      "BaseResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "default": true
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          }
        },
        "type": "object",
        "title": "BaseResponse",
        "description": "Base response model."
      },
      "BenchmarkRequest": {
        "properties": {
          "models": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Models",
            "description": "Models to benchmark"
          },
          "dataset": {
            "type": "string",
            "title": "Dataset",
            "description": "Dataset for benchmarking"
          },
          "metrics": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Metrics",
            "default": [
              "accuracy",
              "latency",
              "cost"
            ]
          },
          "config": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Config"
          }
        },
        "type": "object",
        "required": [
          "models",
          "dataset"
        ],
        "title": "BenchmarkRequest",
        "description": "AI benchmark request"
      },
      "BenchmarkRequestModel": {
        "properties": {
          "component": {
            "type": "string",
            "title": "Component",
            "description": "Component to benchmark"
          },
          "optimization_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Optimization Type",
            "description": "Type of optimization",
            "default": "cache_tuning"
          }
        },
        "type": "object",
        "required": [
          "component"
        ],
        "title": "BenchmarkRequestModel",
        "description": "Request model for performance benchmark"
      },
      "BenchmarkResult": {
        "properties": {
          "benchmark_id": {
            "type": "string",
            "title": "Benchmark Id"
          },
          "models": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Models"
          },
          "dataset": {
            "type": "string",
            "title": "Dataset"
          },
          "results": {
            "additionalProperties": {
              "additionalProperties": {
                "type": "number"
              },
              "type": "object"
            },
            "type": "object",
            "title": "Results"
          },
          "winner": {
            "type": "string",
            "title": "Winner"
          },
          "summary": {
            "type": "string",
            "title": "Summary"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At"
          }
        },
        "type": "object",
        "required": [
          "benchmark_id",
          "models",
          "dataset",
          "results",
          "winner",
          "summary",
          "created_at"
        ],
        "title": "BenchmarkResult",
        "description": "AI benchmark result"
      },
      "Body_generate_rfc_from_analysis_api_v1_generate_rfc_from_analysis_post": {
        "properties": {
          "analysis_data": {
            "type": "object",
            "title": "Analysis Data"
          },
          "rfc_request": {
            "$ref": "#/components/schemas/EnhancedRFCRequest"
          }
        },
        "type": "object",
        "required": [
          "analysis_data",
          "rfc_request"
        ],
        "title": "Body_generate_rfc_from_analysis_api_v1_generate_rfc_from_analysis_post"
      },
      "Body_upload_and_index_file_api_v1_vector_search_upload_file_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_upload_and_index_file_api_v1_vector_search_upload_file_post"
      },
      "Body_upload_document_api_v1_search_upload_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "tags": {
            "type": "string",
            "title": "Tags",
            "default": ""
          },
          "author": {
            "type": "string",
            "title": "Author"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_upload_document_api_v1_search_upload_post"
      },
      "Body_upload_image_for_search_api_v1_ai_advanced_upload_image_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_upload_image_for_search_api_v1_ai_advanced_upload_image_post"
      },
      "BootstrapStatsResponse": {
        "properties": {
          "total_files": {
            "type": "integer",
            "title": "Total Files"
          },
          "total_size_mb": {
            "type": "number",
            "title": "Total Size Mb"
          },
          "categories": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Categories"
          },
          "last_updated": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated"
          }
        },
        "type": "object",
        "required": [
          "total_files",
          "total_size_mb",
          "categories"
        ],
        "title": "BootstrapStatsResponse"
      },
      "BudgetStatusResponse": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "current_usage": {
            "type": "number",
            "title": "Current Usage"
          },
          "budget_limit": {
            "type": "number",
            "title": "Budget Limit"
          },
          "remaining_budget": {
            "type": "number",
            "title": "Remaining Budget"
          },
          "usage_percentage": {
            "type": "number",
            "title": "Usage Percentage"
          },
          "budget_status": {
            "type": "string",
            "title": "Budget Status"
          },
          "daily_average": {
            "type": "number",
            "title": "Daily Average",
            "default": 0.0
          },
          "monthly_projection": {
            "type": "number",
            "title": "Monthly Projection",
            "default": 0.0
          },
          "last_request": {
            "type": "string",
            "title": "Last Request"
          },
          "total_requests": {
            "type": "integer",
            "title": "Total Requests",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "email",
          "current_usage",
          "budget_limit",
          "remaining_budget",
          "usage_percentage",
          "budget_status"
        ],
        "title": "BudgetStatusResponse",
        "description": "Budget status response model."
      },
      "BudgetUpdateRequest": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "new_budget_limit": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "New Budget Limit",
            "description": "New budget limit in USD"
          },
          "reason": {
            "type": "string",
            "title": "Reason",
            "description": "Reason for budget change"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "new_budget_limit",
          "reason"
        ],
        "title": "BudgetUpdateRequest",
        "description": "Budget update request model."
      },
      "CodeAnalysis": {
        "properties": {
          "functions": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Functions",
            "default": []
          },
          "classes": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Classes",
            "default": []
          },
          "modules": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Modules",
            "default": []
          },
          "dependencies": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Dependencies",
            "default": []
          },
          "complexity_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Complexity Score"
          },
          "architecture_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Architecture Patterns",
            "default": []
          },
          "security_concerns": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Security Concerns",
            "default": []
          },
          "performance_notes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Performance Notes",
            "default": []
          }
        },
        "type": "object",
        "title": "CodeAnalysis",
        "description": "Результат анализа кода."
      },
      "CodeAnalysisRequest": {
        "properties": {
          "code_input": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodeFile"
              },
              {
                "$ref": "#/components/schemas/CodeRepository"
              },
              {
                "type": "string"
              }
            ],
            "title": "Code Input"
          },
          "analysis_depth": {
            "type": "string",
            "title": "Analysis Depth",
            "description": "Глубина анализа: quick, standard, deep",
            "default": "standard"
          },
          "include_security_check": {
            "type": "boolean",
            "title": "Include Security Check",
            "default": true
          },
          "include_performance_analysis": {
            "type": "boolean",
            "title": "Include Performance Analysis",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "code_input"
        ],
        "title": "CodeAnalysisRequest",
        "description": "Запрос на анализ кода без генерации документации."
      },
      "CodeFile": {
        "properties": {
          "filename": {
            "type": "string",
            "title": "Filename"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "language": {
            "$ref": "#/components/schemas/CodeLanguage"
          },
          "path": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Path"
          },
          "size_bytes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Size Bytes"
          }
        },
        "type": "object",
        "required": [
          "filename",
          "content",
          "language"
        ],
        "title": "CodeFile",
        "description": "Представление файла с кодом."
      },
      "CodeLanguage": {
        "type": "string",
        "enum": [
          "python",
          "javascript",
          "typescript",
          "java",
          "csharp",
          "go",
          "rust",
          "cpp",
          "php",
          "ruby",
          "kotlin",
          "swift",
          "other"
        ],
        "title": "CodeLanguage",
        "description": "Поддерживаемые языки программирования."
      },
      "CodeRepository": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "files": {
            "items": {
              "$ref": "#/components/schemas/CodeFile"
            },
            "type": "array",
            "title": "Files",
            "default": []
          },
          "main_language": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodeLanguage"
              },
              {
                "type": "null"
              }
            ]
          },
          "framework": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Framework"
          },
          "dependencies": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Dependencies",
            "default": []
          },
          "size_bytes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Size Bytes"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "CodeRepository",
        "description": "Представление репозитория или проекта."
      },
      "CodeReviewRequest": {
        "properties": {
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Code to review"
          },
          "language": {
            "type": "string",
            "title": "Language",
            "description": "Programming language",
            "default": "python"
          },
          "review_type": {
            "type": "string",
            "title": "Review Type"
          },
          "context": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context"
          }
        },
        "type": "object",
        "required": [
          "code",
          "review_type"
        ],
        "title": "CodeReviewRequest",
        "description": "Code review request"
      },
      "CodeReviewResult": {
        "properties": {
          "review_type": {
            "type": "string",
            "title": "Review Type",
            "default": "comprehensive"
          },
          "overall_score": {
            "type": "number",
            "maximum": 10.0,
            "minimum": 0.0,
            "title": "Overall Score",
            "description": "Overall code quality score"
          },
          "issues": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Issues",
            "description": "List of identified issues"
          },
          "suggestions": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Suggestions",
            "description": "List of improvement suggestions"
          },
          "summary": {
            "type": "string",
            "title": "Summary",
            "description": "Summary of the review"
          },
          "review_time": {
            "type": "number",
            "title": "Review Time",
            "description": "Time taken for review in seconds"
          }
        },
        "type": "object",
        "required": [
          "overall_score",
          "summary",
          "review_time"
        ],
        "title": "CodeReviewResult"
      },
      "ConfigureSourceRequest": {
        "properties": {
          "source_type": {
            "$ref": "#/components/schemas/SourceType"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "config": {
            "type": "object",
            "title": "Config"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "source_type",
          "name",
          "config"
        ],
        "title": "ConfigureSourceRequest",
        "description": "Запрос настройки источника"
      },
      "ConfigureSourceResponse": {
        "properties": {
          "source": {
            "$ref": "#/components/schemas/DataSource"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "connection_test_passed": {
            "type": "boolean",
            "title": "Connection Test Passed"
          }
        },
        "type": "object",
        "required": [
          "source",
          "message",
          "connection_test_passed"
        ],
        "title": "ConfigureSourceResponse",
        "description": "Ответ настройки источника"
      },
      "ContentFeedbackResponse": {
        "properties": {
          "content_id": {
            "type": "string",
            "title": "Content Id"
          },
          "content_type": {
            "type": "string",
            "title": "Content Type"
          },
          "total_likes": {
            "type": "integer",
            "title": "Total Likes"
          },
          "total_dislikes": {
            "type": "integer",
            "title": "Total Dislikes"
          },
          "like_ratio": {
            "type": "number",
            "title": "Like Ratio"
          },
          "total_comments": {
            "type": "integer",
            "title": "Total Comments"
          },
          "avg_rating": {
            "type": "number",
            "title": "Avg Rating"
          },
          "sentiment_distribution": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Sentiment Distribution"
          },
          "popular_tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Popular Tags"
          },
          "last_feedback_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Feedback At"
          },
          "feedback_velocity": {
            "type": "number",
            "title": "Feedback Velocity",
            "default": 0.0
          },
          "comments": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comments"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "content_id",
          "content_type",
          "total_likes",
          "total_dislikes",
          "like_ratio",
          "total_comments",
          "avg_rating",
          "sentiment_distribution",
          "popular_tags",
          "updated_at"
        ],
        "title": "ContentFeedbackResponse",
        "description": "Ответ с обратной связью по контенту"
      },
      "ContentFilter": {
        "properties": {
          "document_types": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Types"
          },
          "categories": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Categories"
          },
          "file_extensions": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Extensions"
          },
          "languages": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Languages"
          }
        },
        "type": "object",
        "title": "ContentFilter",
        "description": "Фильтр по контенту"
      },
      "ContentType": {
        "type": "string",
        "enum": [
          "search_result",
          "rfc_generation",
          "code_documentation",
          "deep_research",
          "ai_response",
          "chat_message"
        ],
        "title": "ContentType",
        "description": "Типы контента для feedback"
      },
      "CreateUserRequest": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          }
        },
        "type": "object",
        "required": [
          "username",
          "email"
        ],
        "title": "CreateUserRequest"
      },
      "DashboardAnalyticsResponse": {
        "properties": {
          "summary": {
            "type": "object",
            "title": "Summary"
          },
          "performance_metrics": {
            "type": "object",
            "title": "Performance Metrics"
          },
          "model_usage": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Model Usage"
          },
          "user_activity_distribution": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "User Activity Distribution"
          },
          "top_insights": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Top Insights"
          },
          "last_updated": {
            "type": "string",
            "title": "Last Updated"
          }
        },
        "type": "object",
        "required": [
          "summary",
          "performance_metrics",
          "model_usage",
          "user_activity_distribution",
          "top_insights",
          "last_updated"
        ],
        "title": "DashboardAnalyticsResponse",
        "description": "Response for dashboard analytics"
      },
      "DataSource": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "$ref": "#/components/schemas/SourceType"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled"
          },
          "config": {
            "type": "object",
            "title": "Config"
          },
          "last_sync": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Sync"
          },
          "document_count": {
            "type": "integer",
            "title": "Document Count"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "type",
          "enabled",
          "config",
          "last_sync",
          "document_count"
        ],
        "title": "DataSource",
        "description": "Источник данных"
      },
      "DataSourceConfig-Output": {
        "properties": {
          "source_type": {
            "type": "string",
            "title": "Source Type"
          },
          "source_name": {
            "type": "string",
            "title": "Source Name"
          },
          "is_enabled_semantic_search": {
            "type": "boolean",
            "title": "Is Enabled Semantic Search"
          },
          "is_enabled_architecture_generation": {
            "type": "boolean",
            "title": "Is Enabled Architecture Generation"
          }
        },
        "type": "object",
        "required": [
          "source_type",
          "source_name",
          "is_enabled_semantic_search",
          "is_enabled_architecture_generation"
        ],
        "title": "DataSourceConfig"
      },
      "DataSourceConfigResponse": {
        "properties": {
          "source_type": {
            "type": "string",
            "title": "Source Type"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled"
          },
          "priority": {
            "type": "integer",
            "title": "Priority"
          },
          "metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SourceMetadataResponse"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "source_type",
          "enabled",
          "priority"
        ],
        "title": "DataSourceConfigResponse"
      },
      "DataSourceStatus": {
        "properties": {
          "source_type": {
            "type": "string",
            "title": "Source Type"
          },
          "source_name": {
            "type": "string",
            "title": "Source Name"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled"
          },
          "last_sync": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Sync"
          },
          "next_sync": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Sync"
          },
          "running": {
            "type": "boolean",
            "title": "Running"
          },
          "documents_count": {
            "type": "integer",
            "title": "Documents Count"
          },
          "sync_schedule": {
            "type": "string",
            "title": "Sync Schedule"
          },
          "incremental": {
            "type": "boolean",
            "title": "Incremental"
          }
        },
        "type": "object",
        "required": [
          "source_type",
          "source_name",
          "enabled",
          "last_sync",
          "next_sync",
          "running",
          "documents_count",
          "sync_schedule",
          "incremental"
        ],
        "title": "DataSourceStatus",
        "description": "Статус источника данных"
      },
      "DeleteDocumentResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "doc_id": {
            "type": "string",
            "title": "Doc Id"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "success",
          "doc_id",
          "message"
        ],
        "title": "DeleteDocumentResponse",
        "description": "Document deletion response."
      },
      "Document": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "doc_type": {
            "$ref": "#/components/schemas/DocumentType"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "default": []
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "default": {}
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "title",
          "content",
          "doc_type"
        ],
        "title": "Document",
        "description": "Document model."
      },
      "DocumentType": {
        "type": "string",
        "enum": [
          "srs",
          "nfr",
          "use_case",
          "rfc",
          "adr",
          "diagram"
        ],
        "title": "DocumentType",
        "description": "Document types supported by the system."
      },
      "DocumentationGenerationRequest": {
        "properties": {
          "doc_type": {
            "type": "string",
            "title": "Doc Type",
            "description": "Тип документации: api, user_guide, technical_spec"
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Заголовок документа"
          },
          "content_outline": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content Outline",
            "description": "Структура документа"
          },
          "target_audience": {
            "type": "string",
            "title": "Target Audience",
            "description": "Целевая аудитория",
            "default": "developers"
          },
          "detail_level": {
            "type": "string",
            "title": "Detail Level",
            "description": "Уровень детализации",
            "default": "detailed"
          },
          "include_examples": {
            "type": "boolean",
            "title": "Include Examples",
            "description": "Включать примеры",
            "default": true
          },
          "use_all_sources": {
            "type": "boolean",
            "title": "Use All Sources",
            "description": "Использовать все источники",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "doc_type",
          "title"
        ],
        "title": "DocumentationGenerationRequest",
        "description": "Запрос на генерацию документации"
      },
      "DocumentationResponse": {
        "properties": {
          "documentation": {
            "$ref": "#/components/schemas/GeneratedDocumentation"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": "Документация успешно сгенерирована"
          },
          "generation_time_seconds": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Generation Time Seconds"
          },
          "analysis_stats": {
            "type": "object",
            "title": "Analysis Stats",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "documentation"
        ],
        "title": "DocumentationResponse",
        "description": "Ответ на запрос генерации документации."
      },
      "DocumentationSection": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "order": {
            "type": "integer",
            "title": "Order"
          },
          "subsections": {
            "items": {
              "$ref": "#/components/schemas/DocumentationSection"
            },
            "type": "array",
            "title": "Subsections",
            "default": []
          },
          "section_type": {
            "type": "string",
            "title": "Section Type",
            "default": "general"
          }
        },
        "type": "object",
        "required": [
          "title",
          "content",
          "order"
        ],
        "title": "DocumentationSection",
        "description": "Секция документации."
      },
      "DocumentationType": {
        "type": "string",
        "enum": [
          "api_docs",
          "code_comments",
          "readme",
          "technical_spec",
          "user_guide",
          "architecture_doc",
          "changelog",
          "deployment_guide"
        ],
        "title": "DocumentationType",
        "description": "Типы документации для генерации."
      },
      "EnhancedGenerationResponse": {
        "properties": {
          "task_id": {
            "type": "string",
            "title": "Task Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "sources_used": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Sources Used"
          },
          "generation_time_ms": {
            "type": "number",
            "title": "Generation Time Ms"
          },
          "tokens_used": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tokens Used"
          },
          "cost_estimate": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Estimate"
          },
          "rfc_data": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rfc Data",
            "description": "Структурированные данные RFC"
          },
          "diagrams": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Diagrams",
            "description": "Mermaid диаграммы"
          },
          "project_analysis": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Analysis",
            "description": "Анализ проекта"
          },
          "architecture_recommendations": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Architecture Recommendations",
            "description": "Архитектурные рекомендации"
          }
        },
        "type": "object",
        "required": [
          "task_id",
          "status",
          "content",
          "metadata",
          "sources_used",
          "generation_time_ms",
          "tokens_used",
          "cost_estimate"
        ],
        "title": "EnhancedGenerationResponse",
        "description": "Enhanced response with diagrams and analysis data"
      },
      "EnhancedRFCRequest": {
        "properties": {
          "task_description": {
            "type": "string",
            "minLength": 10,
            "title": "Task Description",
            "description": "Описание задачи для RFC"
          },
          "project_path": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Path",
            "description": "Путь к проекту для анализа архитектуры"
          },
          "project_context": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Context",
            "description": "Контекст проекта"
          },
          "technical_requirements": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Technical Requirements",
            "description": "Технические требования"
          },
          "stakeholders": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stakeholders",
            "description": "Заинтересованные стороны"
          },
          "priority": {
            "type": "string",
            "title": "Priority",
            "description": "Приоритет: low, medium, high, critical",
            "default": "medium"
          },
          "template_type": {
            "type": "string",
            "title": "Template Type",
            "description": "Тип шаблона: architecture, design, process, api",
            "default": "architecture"
          },
          "include_diagrams": {
            "type": "boolean",
            "title": "Include Diagrams",
            "description": "Включать Mermaid диаграммы",
            "default": true
          },
          "include_codebase_analysis": {
            "type": "boolean",
            "title": "Include Codebase Analysis",
            "description": "Включать анализ кодовой базы",
            "default": true
          },
          "use_all_sources": {
            "type": "boolean",
            "title": "Use All Sources",
            "description": "Использовать все доступные источники",
            "default": true
          },
          "excluded_sources": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Excluded Sources",
            "description": "Исключенные источники"
          }
        },
        "type": "object",
        "required": [
          "task_description"
        ],
        "title": "EnhancedRFCRequest",
        "description": "Enhanced RFC generation request with diagrams and analysis"
      },
      "EnhancedSearchRequestModel": {
        "properties": {
          "query": {
            "type": "string",
            "maxLength": 1000,
            "minLength": 1,
            "title": "Query",
            "description": "Search query text"
          },
          "collections": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Collections",
            "description": "Collections to search in"
          },
          "limit": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Limit",
            "description": "Maximum number of results",
            "default": 10
          },
          "filters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters",
            "description": "Additional search filters"
          },
          "include_snippets": {
            "type": "boolean",
            "title": "Include Snippets",
            "description": "Include text highlights in results",
            "default": true
          },
          "hybrid_search": {
            "type": "boolean",
            "title": "Hybrid Search",
            "description": "Enable hybrid search (semantic + keyword)",
            "default": true
          },
          "user_context": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Context",
            "description": "User context for personalization"
          },
          "enable_graph_analysis": {
            "type": "boolean",
            "title": "Enable Graph Analysis",
            "description": "Enable document relationship graph analysis",
            "default": true
          },
          "enable_dynamic_reranking": {
            "type": "boolean",
            "title": "Enable Dynamic Reranking",
            "description": "Enable intelligent result reranking",
            "default": true
          },
          "include_related_documents": {
            "type": "boolean",
            "title": "Include Related Documents",
            "description": "Include related documents in results",
            "default": false
          },
          "max_related_per_result": {
            "type": "integer",
            "maximum": 10.0,
            "minimum": 1.0,
            "title": "Max Related Per Result",
            "description": "Maximum related documents per result",
            "default": 3
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "EnhancedSearchRequestModel",
        "description": "Enhanced search request with graph analysis and reranking options."
      },
      "EnhancedSearchResponseModel": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query"
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/EnhancedSearchResultModel"
            },
            "type": "array",
            "title": "Results"
          },
          "total_results": {
            "type": "integer",
            "title": "Total Results"
          },
          "search_time_ms": {
            "type": "number",
            "title": "Search Time Ms"
          },
          "collections_searched": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Collections Searched"
          },
          "user_intent": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Intent",
            "description": "Detected user intent"
          },
          "graph_stats": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Graph Stats",
            "description": "Document graph statistics"
          },
          "reranking_applied": {
            "type": "boolean",
            "title": "Reranking Applied",
            "description": "Whether dynamic reranking was applied",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "query",
          "results",
          "total_results",
          "search_time_ms",
          "collections_searched"
        ],
        "title": "EnhancedSearchResponseModel",
        "description": "Enhanced search response with additional metadata."
      },
      "EnhancedSearchResultModel": {
        "properties": {
          "doc_id": {
            "type": "string",
            "title": "Doc Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "score": {
            "type": "number",
            "title": "Score"
          },
          "source": {
            "type": "string",
            "title": "Source"
          },
          "source_type": {
            "type": "string",
            "title": "Source Type"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          },
          "author": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Author"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          },
          "collection_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Collection Name"
          },
          "chunk_index": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Chunk Index"
          },
          "highlights": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Highlights"
          },
          "contextual_score": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contextual Score",
            "description": "Contextual scoring breakdown"
          },
          "document_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Type",
            "description": "Classified document type"
          },
          "importance_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Importance Score",
            "description": "Document importance score"
          },
          "related_documents": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Related Documents",
            "description": "Related documents"
          },
          "relationship_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Relationship Count",
            "description": "Number of document relationships"
          }
        },
        "type": "object",
        "required": [
          "doc_id",
          "title",
          "content",
          "score",
          "source",
          "source_type"
        ],
        "title": "EnhancedSearchResultModel",
        "description": "Enhanced search result with relationship and scoring data."
      },
      "FeedbackAnalytics": {
        "properties": {
          "context": {
            "$ref": "#/components/schemas/FeedbackContext"
          },
          "total_items": {
            "type": "integer",
            "title": "Total Items"
          },
          "feedback_coverage": {
            "type": "number",
            "title": "Feedback Coverage"
          },
          "positive_ratio": {
            "type": "number",
            "title": "Positive Ratio"
          },
          "top_issues": {
            "items": {
              "$ref": "#/components/schemas/FeedbackReason"
            },
            "type": "array",
            "title": "Top Issues"
          },
          "trends": {
            "type": "object",
            "title": "Trends",
            "default": {}
          },
          "recommendations": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Recommendations",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "context",
          "total_items",
          "feedback_coverage",
          "positive_ratio",
          "top_issues"
        ],
        "title": "FeedbackAnalytics",
        "description": "Аналитика обратной связи для переобучения."
      },
      "FeedbackContext": {
        "type": "string",
        "enum": [
          "rfc_generation",
          "search_result",
          "ai_question",
          "overall_session"
        ],
        "title": "FeedbackContext",
        "description": "Контекст обратной связи."
      },
      "FeedbackReason": {
        "type": "string",
        "enum": [
          "incorrect_info",
          "not_relevant",
          "poor_quality",
          "incomplete",
          "unclear",
          "technical_error",
          "inappropriate",
          "other"
        ],
        "title": "FeedbackReason",
        "description": "Причины негативной обратной связи."
      },
      "FeedbackRequest": {
        "properties": {
          "target_id": {
            "type": "string",
            "title": "Target Id"
          },
          "context": {
            "$ref": "#/components/schemas/FeedbackContext"
          },
          "feedback_type": {
            "$ref": "#/components/schemas/models__feedback__FeedbackType"
          },
          "rating": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 5.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Rating"
          },
          "reason": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FeedbackReason"
              },
              {
                "type": "null"
              }
            ]
          },
          "comment": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment"
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id"
          }
        },
        "type": "object",
        "required": [
          "target_id",
          "context",
          "feedback_type"
        ],
        "title": "FeedbackRequest",
        "description": "Запрос на отправку обратной связи."
      },
      "FeedbackStats": {
        "properties": {
          "target_id": {
            "type": "string",
            "title": "Target Id"
          },
          "total_feedback": {
            "type": "integer",
            "title": "Total Feedback"
          },
          "likes": {
            "type": "integer",
            "title": "Likes"
          },
          "dislikes": {
            "type": "integer",
            "title": "Dislikes"
          },
          "reports": {
            "type": "integer",
            "title": "Reports"
          },
          "average_rating": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Average Rating"
          },
          "like_percentage": {
            "type": "number",
            "title": "Like Percentage"
          },
          "most_common_dislike_reason": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FeedbackReason"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "target_id",
          "total_feedback",
          "likes",
          "dislikes",
          "reports",
          "like_percentage"
        ],
        "title": "FeedbackStats",
        "description": "Статистика обратной связи."
      },
      "FeedbackSubmitRequest": {
        "properties": {
          "content_id": {
            "type": "string",
            "title": "Content Id",
            "description": "ID контента"
          },
          "content_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContentType"
              }
            ],
            "description": "Тип контента"
          },
          "feedback_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/services__enhanced_feedback_service__FeedbackType"
              }
            ],
            "description": "Тип обратной связи"
          },
          "value": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Value",
            "description": "Значение feedback (True/False для лайков)"
          },
          "comment": {
            "type": "string",
            "maxLength": 2000,
            "title": "Comment",
            "description": "Комментарий",
            "default": ""
          },
          "rating": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 5.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Rating",
            "description": "Рейтинг 1-5 звезд"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "Теги"
          },
          "context": {
            "type": "object",
            "title": "Context",
            "description": "Дополнительный контекст"
          }
        },
        "type": "object",
        "required": [
          "content_id",
          "content_type",
          "feedback_type"
        ],
        "title": "FeedbackSubmitRequest",
        "description": "Запрос на отправку обратной связи"
      },
      "GeneratedDocumentation": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "request_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Request Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "summary": {
            "type": "string",
            "title": "Summary"
          },
          "sections": {
            "items": {
              "$ref": "#/components/schemas/DocumentationSection"
            },
            "type": "array",
            "title": "Sections"
          },
          "full_content": {
            "type": "string",
            "title": "Full Content"
          },
          "code_analysis": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodeAnalysis"
              },
              {
                "type": "null"
              }
            ]
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "default": {}
          },
          "suggestions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Suggestions",
            "default": []
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "title",
          "summary",
          "sections",
          "full_content"
        ],
        "title": "GeneratedDocumentation",
        "description": "Сгенерированная документация."
      },
      "GenerationResponse": {
        "properties": {
          "task_id": {
            "type": "string",
            "title": "Task Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "sources_used": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Sources Used"
          },
          "generation_time_ms": {
            "type": "number",
            "title": "Generation Time Ms"
          },
          "tokens_used": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tokens Used"
          },
          "cost_estimate": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Estimate"
          }
        },
        "type": "object",
        "required": [
          "task_id",
          "status",
          "content",
          "metadata",
          "sources_used",
          "generation_time_ms",
          "tokens_used",
          "cost_estimate"
        ],
        "title": "GenerationResponse",
        "description": "Ответ генерации"
      },
      "GenerationSourcesConfig": {
        "properties": {
          "use_all_sources": {
            "type": "boolean",
            "title": "Use All Sources",
            "description": "Использовать все источники для генерации",
            "default": true
          },
          "excluded_sources": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Excluded Sources",
            "description": "Исключенные источники"
          }
        },
        "type": "object",
        "title": "GenerationSourcesConfig",
        "description": "Конфигурация источников для генерации"
      },
      "GenerationStatus": {
        "properties": {
          "task_id": {
            "type": "string",
            "title": "Task Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "progress": {
            "type": "number",
            "title": "Progress"
          },
          "started_at": {
            "type": "string",
            "title": "Started At"
          },
          "estimated_completion": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Estimated Completion"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message"
          }
        },
        "type": "object",
        "required": [
          "task_id",
          "status",
          "progress",
          "started_at",
          "estimated_completion",
          "error_message"
        ],
        "title": "GenerationStatus",
        "description": "Статус генерации"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "timestamp": {
            "type": "number",
            "title": "Timestamp"
          },
          "version": {
            "type": "string",
            "title": "Version"
          },
          "uptime": {
            "type": "number",
            "title": "Uptime"
          },
          "environment": {
            "type": "string",
            "title": "Environment"
          },
          "checks": {
            "type": "object",
            "title": "Checks",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "version",
          "uptime",
          "environment"
        ],
        "title": "HealthResponse",
        "description": "Health check response model."
      },
      "IndexDocumentRequest": {
        "properties": {
          "text": {
            "type": "string",
            "minLength": 1,
            "title": "Text",
            "description": "Document text content"
          },
          "doc_id": {
            "type": "string",
            "title": "Doc Id",
            "description": "Unique document identifier"
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Document title"
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Document source/origin"
          },
          "source_type": {
            "type": "string",
            "title": "Source Type",
            "description": "Type of source",
            "default": "documents"
          },
          "author": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Author"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          },
          "content_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content Type"
          },
          "file_path": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Path"
          }
        },
        "type": "object",
        "required": [
          "text",
          "doc_id",
          "title",
          "source"
        ],
        "title": "IndexDocumentRequest",
        "description": "Document indexing request."
      },
      "IndexDocumentResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "doc_id": {
            "type": "string",
            "title": "Doc Id"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "success",
          "doc_id",
          "message"
        ],
        "title": "IndexDocumentResponse",
        "description": "Document indexing response."
      },
      "LLMHealthResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "providers": {
            "type": "object",
            "title": "Providers"
          },
          "healthy_count": {
            "type": "integer",
            "title": "Healthy Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": [
          "status",
          "providers",
          "healthy_count",
          "total_count"
        ],
        "title": "LLMHealthResponse",
        "description": "LLM health response."
      },
      "LLMResponse": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content"
          },
          "provider": {
            "type": "string",
            "title": "Provider"
          },
          "model": {
            "type": "string",
            "title": "Model"
          },
          "tokens_used": {
            "type": "integer",
            "title": "Tokens Used"
          },
          "cost_usd": {
            "type": "number",
            "title": "Cost Usd"
          },
          "response_time": {
            "type": "number",
            "title": "Response Time"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "content",
          "provider",
          "model",
          "tokens_used",
          "cost_usd",
          "response_time",
          "metadata"
        ],
        "title": "LLMResponse",
        "description": "LLM response model."
      },
      "LLMStatsResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "service_metrics": {
            "type": "object",
            "title": "Service Metrics"
          },
          "router_stats": {
            "type": "object",
            "title": "Router Stats"
          },
          "providers_available": {
            "type": "integer",
            "title": "Providers Available"
          }
        },
        "type": "object",
        "required": [
          "status",
          "service_metrics",
          "router_stats",
          "providers_available"
        ],
        "title": "LLMStatsResponse",
        "description": "LLM statistics response."
      },
      "LearningStatsResponse": {
        "properties": {
          "total_examples": {
            "type": "integer",
            "title": "Total Examples"
          },
          "average_quality": {
            "type": "number",
            "title": "Average Quality"
          },
          "quality_distribution": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Quality Distribution"
          },
          "ready_for_retraining": {
            "type": "boolean",
            "title": "Ready For Retraining"
          },
          "last_retraining": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Retraining"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "total_examples",
          "average_quality",
          "quality_distribution",
          "ready_for_retraining",
          "message"
        ],
        "title": "LearningStatsResponse",
        "description": "Статистика обучения."
      },
      "MetricIngestionRequest": {
        "properties": {
          "metric": {
            "type": "string",
            "title": "Metric",
            "description": "Metric type"
          },
          "value": {
            "type": "number",
            "title": "Value",
            "description": "Metric value"
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Source identifier"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Additional metadata"
          }
        },
        "type": "object",
        "required": [
          "metric",
          "value",
          "source"
        ],
        "title": "MetricIngestionRequest",
        "description": "Request for metric ingestion"
      },
      "ModerationRequest": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action",
            "description": "Действие: hide, approve, remove"
          },
          "reason": {
            "type": "string",
            "title": "Reason",
            "description": "Причина модерации",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "action"
        ],
        "title": "ModerationRequest",
        "description": "Запрос на модерацию"
      },
      "MultimodalSearchRequest": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query",
            "description": "Text search query"
          },
          "image_data": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Data",
            "description": "Base64 encoded image data"
          },
          "search_types": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Search Types",
            "description": "Types of search",
            "default": [
              "semantic"
            ]
          },
          "limit": {
            "type": "integer",
            "maximum": 50.0,
            "minimum": 1.0,
            "title": "Limit",
            "description": "Maximum number of results",
            "default": 10
          },
          "filters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters",
            "description": "Search filters"
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "MultimodalSearchRequest",
        "description": "Multi-modal search request with text and optional image"
      },
      "MultimodalSearchResult": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "score": {
            "type": "number",
            "title": "Score"
          },
          "source": {
            "type": "string",
            "title": "Source"
          },
          "search_type": {
            "type": "string",
            "title": "Search Type"
          }
        },
        "type": "object",
        "required": [
          "id",
          "content",
          "score",
          "source",
          "search_type"
        ],
        "title": "MultimodalSearchResult",
        "description": "Multi-modal search result"
      },
      "OptimizationRequest": {
        "properties": {
          "model_type": {
            "type": "string",
            "title": "Model Type",
            "description": "Type of model to optimize"
          },
          "optimization_type": {
            "type": "string",
            "title": "Optimization Type",
            "description": "Type of optimization"
          },
          "target_metric": {
            "type": "string",
            "title": "Target Metric",
            "description": "Target metric to optimize",
            "default": "performance"
          },
          "constraints": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Constraints"
          },
          "config": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Config"
          }
        },
        "type": "object",
        "required": [
          "model_type",
          "optimization_type"
        ],
        "title": "OptimizationRequest",
        "description": "AI optimization request"
      },
      "OptimizationRequestModel": {
        "properties": {
          "component": {
            "type": "string",
            "title": "Component",
            "description": "Component to optimize"
          },
          "optimization_type": {
            "type": "string",
            "title": "Optimization Type",
            "description": "Type of optimization",
            "default": "cache_tuning"
          }
        },
        "type": "object",
        "required": [
          "component"
        ],
        "title": "OptimizationRequestModel",
        "description": "Request model for optimization"
      },
      "OptimizationResult": {
        "properties": {
          "optimization_id": {
            "type": "string",
            "title": "Optimization Id"
          },
          "model_type": {
            "type": "string",
            "title": "Model Type"
          },
          "optimization_type": {
            "type": "string",
            "title": "Optimization Type"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "progress": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Progress"
          },
          "metrics": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Metrics"
          },
          "recommendations": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Recommendations"
          },
          "config_changes": {
            "type": "object",
            "title": "Config Changes"
          },
          "estimated_improvement": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Estimated Improvement"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At"
          }
        },
        "type": "object",
        "required": [
          "optimization_id",
          "model_type",
          "optimization_type",
          "status",
          "progress",
          "metrics",
          "recommendations",
          "config_changes",
          "estimated_improvement",
          "created_at"
        ],
        "title": "OptimizationResult",
        "description": "AI optimization result"
      },
      "PredictiveModelRequest": {
        "properties": {
          "metric_type": {
            "type": "string",
            "title": "Metric Type",
            "description": "Metric to predict"
          },
          "model_type": {
            "type": "string",
            "title": "Model Type",
            "description": "Model type"
          },
          "forecast_days": {
            "type": "integer",
            "maximum": 30.0,
            "minimum": 1.0,
            "title": "Forecast Days",
            "description": "Forecast period in days",
            "default": 7
          }
        },
        "type": "object",
        "required": [
          "metric_type",
          "model_type"
        ],
        "title": "PredictiveModelRequest",
        "description": "Request for predictive modeling"
      },
      "PredictiveModelResponse": {
        "properties": {
          "model_id": {
            "type": "string",
            "title": "Model Id"
          },
          "metric_type": {
            "type": "string",
            "title": "Metric Type"
          },
          "model_type": {
            "type": "string",
            "title": "Model Type"
          },
          "accuracy": {
            "type": "number",
            "title": "Accuracy"
          },
          "predictions": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Predictions"
          },
          "feature_importance": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Feature Importance"
          },
          "model_insights": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Model Insights"
          },
          "created_timestamp": {
            "type": "string",
            "title": "Created Timestamp"
          }
        },
        "type": "object",
        "required": [
          "model_id",
          "metric_type",
          "model_type",
          "accuracy",
          "predictions",
          "feature_importance",
          "model_insights",
          "created_timestamp"
        ],
        "title": "PredictiveModelResponse",
        "description": "Response for predictive model"
      },
      "ProjectAnalysisRequest": {
        "properties": {
          "project_path": {
            "type": "string",
            "title": "Project Path",
            "description": "Путь к проекту"
          },
          "analysis_depth": {
            "type": "string",
            "title": "Analysis Depth",
            "description": "Глубина анализа: quick, standard, comprehensive",
            "default": "standard"
          },
          "include_suggestions": {
            "type": "boolean",
            "title": "Include Suggestions",
            "description": "Включать рекомендации по улучшению",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "project_path"
        ],
        "title": "ProjectAnalysisRequest",
        "description": "Request for project architecture analysis"
      },
      "QualityFilter": {
        "properties": {
          "min_quality_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Quality Score"
          },
          "min_word_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Word Count"
          }
        },
        "type": "object",
        "title": "QualityFilter",
        "description": "Фильтр качества"
      },
      "QuestionAnswerRequest": {
        "properties": {
          "question": {
            "type": "string",
            "maxLength": 2000,
            "minLength": 1,
            "title": "Question",
            "description": "Question to answer"
          },
          "context": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 8000
              },
              {
                "type": "null"
              }
            ],
            "title": "Context",
            "description": "Context information"
          },
          "max_tokens": {
            "type": "integer",
            "maximum": 4000.0,
            "minimum": 50.0,
            "title": "Max Tokens",
            "description": "Maximum response tokens",
            "default": 1000
          }
        },
        "type": "object",
        "required": [
          "question"
        ],
        "title": "QuestionAnswerRequest",
        "description": "Request for question answering."
      },
      "RFCFeedbackRequest": {
        "properties": {
          "rfc_id": {
            "type": "string",
            "title": "Rfc Id"
          },
          "feedback_type": {
            "$ref": "#/components/schemas/models__feedback__FeedbackType"
          },
          "rating": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rating"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment"
          },
          "improvement_suggestions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Improvement Suggestions"
          }
        },
        "type": "object",
        "required": [
          "rfc_id",
          "feedback_type"
        ],
        "title": "RFCFeedbackRequest",
        "description": "Запрос на фидбек по RFC."
      },
      "ResearchEngineStatusResponse": {
        "properties": {
          "engine_status": {
            "type": "string",
            "title": "Engine Status"
          },
          "active_sessions": {
            "type": "integer",
            "title": "Active Sessions"
          },
          "metrics": {
            "type": "object",
            "title": "Metrics"
          },
          "configuration": {
            "type": "object",
            "title": "Configuration"
          },
          "last_updated": {
            "type": "string",
            "title": "Last Updated"
          }
        },
        "type": "object",
        "required": [
          "engine_status",
          "active_sessions",
          "metrics",
          "configuration",
          "last_updated"
        ],
        "title": "ResearchEngineStatusResponse",
        "description": "Ответ со статусом движка исследований"
      },
      "ResearchSessionResponse": {
        "properties": {
          "session_id": {
            "type": "string",
            "title": "Session Id"
          },
          "original_query": {
            "type": "string",
            "title": "Original Query"
          },
          "research_goal": {
            "type": "string",
            "title": "Research Goal"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "current_step": {
            "type": "integer",
            "title": "Current Step"
          },
          "max_steps": {
            "type": "integer",
            "title": "Max Steps"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "session_id",
          "original_query",
          "research_goal",
          "status",
          "current_step",
          "max_steps",
          "created_at"
        ],
        "title": "ResearchSessionResponse",
        "description": "Ответ с информацией о сессии исследования"
      },
      "ResearchStatusResponse": {
        "properties": {
          "session_id": {
            "type": "string",
            "title": "Session Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "current_step": {
            "type": "integer",
            "title": "Current Step"
          },
          "total_steps": {
            "type": "integer",
            "title": "Total Steps"
          },
          "progress": {
            "type": "number",
            "title": "Progress"
          },
          "duration": {
            "type": "number",
            "title": "Duration"
          },
          "overall_confidence": {
            "type": "number",
            "title": "Overall Confidence"
          },
          "total_sources": {
            "type": "integer",
            "title": "Total Sources"
          },
          "final_result": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Final Result"
          }
        },
        "type": "object",
        "required": [
          "session_id",
          "status",
          "current_step",
          "total_steps",
          "progress",
          "duration",
          "overall_confidence",
          "total_sources"
        ],
        "title": "ResearchStatusResponse",
        "description": "Ответ со статусом исследования"
      },
      "RetrainingRequest": {
        "properties": {
          "context": {
            "$ref": "#/components/schemas/FeedbackContext"
          },
          "min_feedback_count": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Min Feedback Count",
            "default": 10
          },
          "date_from": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Date From"
          },
          "date_to": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Date To"
          },
          "include_reasons": {
            "items": {
              "$ref": "#/components/schemas/FeedbackReason"
            },
            "type": "array",
            "title": "Include Reasons",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "context"
        ],
        "title": "RetrainingRequest",
        "description": "Запрос на переобучение модели."
      },
      "RetrainingResponse": {
        "properties": {
          "job_id": {
            "type": "string",
            "title": "Job Id"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "default": "started"
          },
          "data_points_count": {
            "type": "integer",
            "title": "Data Points Count"
          },
          "estimated_duration_minutes": {
            "type": "integer",
            "title": "Estimated Duration Minutes"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "job_id",
          "data_points_count",
          "estimated_duration_minutes",
          "message"
        ],
        "title": "RetrainingResponse",
        "description": "Ответ на переобучение модели."
      },
      "SSOLoginResponse": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "state": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "State"
          },
          "provider": {
            "type": "string",
            "title": "Provider"
          }
        },
        "type": "object",
        "required": [
          "type",
          "url",
          "provider"
        ],
        "title": "SSOLoginResponse"
      },
      "SSOProviderCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "provider_type": {
            "$ref": "#/components/schemas/SSOProviderType"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "default": true
          },
          "entity_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Id"
          },
          "sso_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sso Url"
          },
          "slo_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Slo Url"
          },
          "x509_cert": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "X509 Cert"
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          },
          "authorization_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Authorization Url"
          },
          "token_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Token Url"
          },
          "userinfo_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Userinfo Url"
          },
          "scope": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scope"
          },
          "config": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Config",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "name",
          "provider_type"
        ],
        "title": "SSOProviderCreate"
      },
      "SSOProviderResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "provider_type": {
            "type": "string",
            "title": "Provider Type"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled"
          },
          "available": {
            "type": "boolean",
            "title": "Available"
          },
          "login_url": {
            "type": "string",
            "title": "Login Url"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "provider_type",
          "enabled",
          "available",
          "login_url",
          "created_at"
        ],
        "title": "SSOProviderResponse"
      },
      "SSOProviderType": {
        "type": "string",
        "enum": [
          "saml",
          "oauth_google",
          "oauth_microsoft",
          "oauth_github",
          "oauth_okta",
          "oauth_custom"
        ],
        "title": "SSOProviderType",
        "description": "Supported SSO provider types"
      },
      "SSOProviderUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enabled"
          },
          "entity_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Id"
          },
          "sso_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sso Url"
          },
          "slo_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Slo Url"
          },
          "x509_cert": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "X509 Cert"
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          },
          "authorization_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Authorization Url"
          },
          "token_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Token Url"
          },
          "userinfo_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Userinfo Url"
          },
          "scope": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scope"
          },
          "config": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Config"
          }
        },
        "type": "object",
        "title": "SSOProviderUpdate"
      },
      "SSOUserInfo": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "external_user_id": {
            "type": "string",
            "title": "External User Id"
          },
          "external_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Email"
          },
          "external_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Name"
          },
          "provider_name": {
            "type": "string",
            "title": "Provider Name"
          },
          "last_sso_login": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Sso Login"
          },
          "active": {
            "type": "boolean",
            "title": "Active"
          }
        },
        "type": "object",
        "required": [
          "id",
          "external_user_id",
          "provider_name",
          "active"
        ],
        "title": "SSOUserInfo"
      },
      "SearchFeedbackRequest": {
        "properties": {
          "search_id": {
            "type": "string",
            "title": "Search Id",
            "description": "ID поиска"
          },
          "result_id": {
            "type": "string",
            "title": "Result Id",
            "description": "ID результата"
          },
          "feedback_type": {
            "type": "string",
            "title": "Feedback Type",
            "description": "Тип обратной связи: like, dislike, irrelevant"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "Комментарий"
          }
        },
        "type": "object",
        "required": [
          "search_id",
          "result_id",
          "feedback_type"
        ],
        "title": "SearchFeedbackRequest",
        "description": "Запрос на отправку обратной связи"
      },
      "SearchQuery": {
        "properties": {
          "query": {
            "type": "string",
            "maxLength": 1000,
            "minLength": 1,
            "title": "Query"
          },
          "limit": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Limit",
            "default": 10
          },
          "filters": {
            "type": "object",
            "title": "Filters",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "SearchQuery",
        "description": "Search query model."
      },
      "SearchRequest": {
        "properties": {
          "query": {
            "type": "string",
            "maxLength": 1000,
            "minLength": 1,
            "title": "Query",
            "description": "Поисковый запрос"
          },
          "sources": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sources",
            "description": "Источники для поиска (если не указаны - используются настройки пользователя)"
          },
          "limit": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Limit",
            "description": "Максимальное количество результатов",
            "default": 10
          },
          "offset": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Offset",
            "description": "Смещение для пагинации",
            "default": 0
          },
          "filters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters",
            "description": "Дополнительные фильтры"
          },
          "include_snippets": {
            "type": "boolean",
            "title": "Include Snippets",
            "description": "Включать ли фрагменты текста",
            "default": true
          },
          "search_type": {
            "type": "string",
            "title": "Search Type",
            "description": "Тип поиска: semantic, keyword, hybrid",
            "default": "semantic"
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "SearchRequest",
        "description": "Запрос на поиск"
      },
      "SearchRequestModel": {
        "properties": {
          "query": {
            "type": "string",
            "maxLength": 1000,
            "minLength": 1,
            "title": "Query",
            "description": "Search query text"
          },
          "collections": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Collections",
            "description": "Collections to search in"
          },
          "limit": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Limit",
            "description": "Maximum number of results",
            "default": 10
          },
          "filters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters",
            "description": "Additional search filters"
          },
          "include_snippets": {
            "type": "boolean",
            "title": "Include Snippets",
            "description": "Include text highlights in results",
            "default": true
          },
          "hybrid_search": {
            "type": "boolean",
            "title": "Hybrid Search",
            "description": "Enable hybrid search (semantic + keyword)",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "SearchRequestModel",
        "description": "Search request model."
      },
      "SearchResponseModel": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query"
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/SearchResultModel"
            },
            "type": "array",
            "title": "Results"
          },
          "total_results": {
            "type": "integer",
            "title": "Total Results"
          },
          "search_time_ms": {
            "type": "number",
            "title": "Search Time Ms"
          },
          "collections_searched": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Collections Searched"
          }
        },
        "type": "object",
        "required": [
          "query",
          "results",
          "total_results",
          "search_time_ms",
          "collections_searched"
        ],
        "title": "SearchResponseModel",
        "description": "Search response model."
      },
      "SearchResultModel": {
        "properties": {
          "doc_id": {
            "type": "string",
            "title": "Doc Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "score": {
            "type": "number",
            "title": "Score"
          },
          "source": {
            "type": "string",
            "title": "Source"
          },
          "source_type": {
            "type": "string",
            "title": "Source Type"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          },
          "author": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Author"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          },
          "collection_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Collection Name"
          },
          "chunk_index": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Chunk Index"
          },
          "highlights": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Highlights"
          }
        },
        "type": "object",
        "required": [
          "doc_id",
          "title",
          "content",
          "score",
          "source",
          "source_type"
        ],
        "title": "SearchResultModel",
        "description": "Search result model."
      },
      "SearchSourcesConfig": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "enabled_sources": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Enabled Sources",
            "description": "Список включенных источников для поиска"
          },
          "search_preferences": {
            "type": "object",
            "title": "Search Preferences"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "enabled_sources"
        ],
        "title": "SearchSourcesConfig",
        "description": "Конфигурация источников для поиска"
      },
      "SearchStatsResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "active_collections": {
            "type": "integer",
            "title": "Active Collections"
          },
          "total_collections": {
            "type": "integer",
            "title": "Total Collections"
          },
          "collections": {
            "type": "object",
            "title": "Collections"
          },
          "embeddings_service": {
            "type": "object",
            "title": "Embeddings Service"
          },
          "qdrant_status": {
            "type": "object",
            "title": "Qdrant Status"
          }
        },
        "type": "object",
        "required": [
          "status",
          "active_collections",
          "total_collections",
          "collections",
          "embeddings_service",
          "qdrant_status"
        ],
        "title": "SearchStatsResponse",
        "description": "Search service statistics."
      },
      "SemanticSearchQuery": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query",
            "description": "Поисковый запрос"
          },
          "limit": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Limit",
            "description": "Количество результатов",
            "default": 10
          },
          "sources": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sources",
            "description": "Источники для поиска"
          },
          "filters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters",
            "description": "Фильтры"
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "SemanticSearchQuery",
        "description": "Запрос семантического поиска"
      },
      "SemanticSearchResponse": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/models__search__SearchResult"
            },
            "type": "array",
            "title": "Results"
          },
          "total_found": {
            "type": "integer",
            "title": "Total Found"
          },
          "query": {
            "type": "string",
            "title": "Query"
          },
          "search_time_ms": {
            "type": "integer",
            "title": "Search Time Ms"
          },
          "sources_searched": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Sources Searched"
          }
        },
        "type": "object",
        "required": [
          "results",
          "total_found",
          "query",
          "search_time_ms",
          "sources_searched"
        ],
        "title": "SemanticSearchResponse",
        "description": "Ответ семантического поиска"
      },
      "SmokeHealthResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "timestamp": {
            "type": "number",
            "title": "Timestamp"
          }
        },
        "type": "object",
        "required": [
          "status",
          "timestamp"
        ],
        "title": "SmokeHealthResponse",
        "description": "Smoke test health response model."
      },
      "SourceDiscoveryResponse": {
        "properties": {
          "total_sources": {
            "type": "integer",
            "title": "Total Sources"
          },
          "sources_by_type": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Sources By Type"
          },
          "sources_by_category": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Sources By Category"
          },
          "discovered_sources": {
            "items": {
              "$ref": "#/components/schemas/SourceMetadataResponse"
            },
            "type": "array",
            "title": "Discovered Sources"
          }
        },
        "type": "object",
        "required": [
          "total_sources",
          "sources_by_type",
          "sources_by_category",
          "discovered_sources"
        ],
        "title": "SourceDiscoveryResponse"
      },
      "SourceFilter": {
        "properties": {
          "confluence": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Confluence"
          },
          "jira": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Jira"
          },
          "gitlab": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gitlab"
          }
        },
        "type": "object",
        "title": "SourceFilter",
        "description": "Фильтр по источникам"
      },
      "SourceFiltersResponse": {
        "properties": {
          "source_types": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Source Types"
          },
          "categories": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Categories"
          },
          "roles": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Roles"
          }
        },
        "type": "object",
        "required": [
          "source_types",
          "categories",
          "roles"
        ],
        "title": "SourceFiltersResponse"
      },
      "SourceMetadataResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category"
          },
          "role": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Role"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          },
          "file_path": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Path"
          },
          "file_size": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Size"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "default": []
          },
          "additional_data": {
            "type": "object",
            "title": "Additional Data",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "SourceMetadataResponse"
      },
      "SourceType": {
        "type": "string",
        "enum": [
          "bootstrap",
          "confluence",
          "jira",
          "gitlab",
          "github",
          "local_files",
          "user_upload",
          "api_import",
          "corporate"
        ],
        "title": "SourceType",
        "description": "Unified source types enum\n\nConsolidates all source types from models/search.py, models/document.py, \nand models/data_source.py into a single definition."
      },
      "SourcesListResponse": {
        "properties": {
          "sources": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Sources"
          },
          "total_sources": {
            "type": "integer",
            "title": "Total Sources"
          },
          "user_enabled_sources": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "User Enabled Sources"
          }
        },
        "type": "object",
        "required": [
          "sources",
          "total_sources",
          "user_enabled_sources"
        ],
        "title": "SourcesListResponse",
        "description": "Список доступных источников"
      },
      "StartResearchRequest": {
        "properties": {
          "query": {
            "type": "string",
            "maxLength": 1000,
            "minLength": 10,
            "title": "Query",
            "description": "Исследовательский запрос"
          },
          "max_steps": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 10.0,
                "minimum": 3.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Steps",
            "description": "Максимальное количество шагов",
            "default": 7
          },
          "user_context": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Context",
            "description": "Дополнительный контекст пользователя"
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "StartResearchRequest",
        "description": "Запрос на начало исследования"
      },
      "StatusFilter": {
        "properties": {
          "document_status": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Document Status"
          },
          "priorities": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Priorities"
          }
        },
        "type": "object",
        "title": "StatusFilter",
        "description": "Фильтр по статусу"
      },
      "SyncStatusResponse": {
        "properties": {
          "results": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Results",
            "default": []
          },
          "overall_status": {
            "type": "string",
            "title": "Overall Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "overall_status",
          "message"
        ],
        "title": "SyncStatusResponse",
        "description": "Статус синхронизации"
      },
      "SyncTriggerRequest": {
        "properties": {
          "sources": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sources"
          },
          "full_sync": {
            "type": "boolean",
            "title": "Full Sync",
            "default": false
          }
        },
        "type": "object",
        "title": "SyncTriggerRequest",
        "description": "Запрос синхронизации"
      },
      "TagFilter": {
        "properties": {
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          }
        },
        "type": "object",
        "title": "TagFilter",
        "description": "Фильтр по тегам"
      },
      "TextGenerationRequest": {
        "properties": {
          "prompt": {
            "type": "string",
            "maxLength": 8000,
            "minLength": 1,
            "title": "Prompt",
            "description": "Input prompt"
          },
          "system_prompt": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2000
              },
              {
                "type": "null"
              }
            ],
            "title": "System Prompt",
            "description": "System prompt"
          },
          "max_tokens": {
            "type": "integer",
            "maximum": 8000.0,
            "minimum": 1.0,
            "title": "Max Tokens",
            "description": "Maximum tokens to generate",
            "default": 2000
          },
          "temperature": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Temperature",
            "description": "Temperature (0.0-1.0)",
            "default": 0.7
          },
          "top_p": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Top P",
            "description": "Top-p sampling",
            "default": 0.9
          },
          "stop_sequences": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stop Sequences",
            "description": "Stop sequences"
          }
        },
        "type": "object",
        "required": [
          "prompt"
        ],
        "title": "TextGenerationRequest",
        "description": "Request for text generation."
      },
      "TimeFilter": {
        "properties": {
          "updated_after": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated After"
          },
          "updated_before": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated Before"
          }
        },
        "type": "object",
        "title": "TimeFilter",
        "description": "Временной фильтр"
      },
      "Token": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "default": "bearer"
          },
          "expires_in": {
            "type": "integer",
            "title": "Expires In",
            "default": 1800
          },
          "user": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/User"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "access_token"
        ],
        "title": "Token"
      },
      "TrendAnalysisRequest": {
        "properties": {
          "metric_type": {
            "type": "string",
            "title": "Metric Type",
            "description": "Metric to analyze"
          },
          "model_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Type",
            "description": "Specific model type"
          },
          "time_range_days": {
            "type": "integer",
            "maximum": 90.0,
            "minimum": 1.0,
            "title": "Time Range Days",
            "description": "Time range in days",
            "default": 30
          }
        },
        "type": "object",
        "required": [
          "metric_type"
        ],
        "title": "TrendAnalysisRequest",
        "description": "Request for trend analysis"
      },
      "TrendAnalysisResponse": {
        "properties": {
          "metric_type": {
            "type": "string",
            "title": "Metric Type"
          },
          "trend_direction": {
            "type": "string",
            "title": "Trend Direction"
          },
          "trend_strength": {
            "type": "number",
            "title": "Trend Strength"
          },
          "change_percent": {
            "type": "number",
            "title": "Change Percent"
          },
          "confidence": {
            "type": "number",
            "title": "Confidence"
          },
          "forecast_points": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Forecast Points"
          },
          "insights": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Insights"
          },
          "analysis_timestamp": {
            "type": "string",
            "title": "Analysis Timestamp"
          }
        },
        "type": "object",
        "required": [
          "metric_type",
          "trend_direction",
          "trend_strength",
          "change_percent",
          "confidence",
          "forecast_points",
          "insights",
          "analysis_timestamp"
        ],
        "title": "TrendAnalysisResponse",
        "description": "Response for trend analysis"
      },
      "UpdateUserSettingsRequest": {
        "properties": {
          "data_sources": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/app__api__v1__users__DataSourceConfig"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data Sources"
          },
          "preferences": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preferences"
          }
        },
        "type": "object",
        "title": "UpdateUserSettingsRequest"
      },
      "UploadFileResponse": {
        "properties": {
          "document_id": {
            "type": "string",
            "title": "Document Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "document_id",
          "title",
          "status",
          "message"
        ],
        "title": "UploadFileResponse",
        "description": "Ответ загрузки файла"
      },
      "User": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Scopes",
            "default": [
              "basic"
            ]
          },
          "budget_limit": {
            "type": "number",
            "title": "Budget Limit",
            "default": 100.0
          },
          "current_usage": {
            "type": "number",
            "title": "Current Usage",
            "default": 0.0
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "email",
          "name"
        ],
        "title": "User"
      },
      "UserCreate": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "budget_limit": {
            "type": "number",
            "title": "Budget Limit",
            "default": 100.0
          }
        },
        "type": "object",
        "required": [
          "email",
          "password",
          "name"
        ],
        "title": "UserCreate"
      },
      "UserLogin": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "title": "UserLogin"
      },
      "UserProfileResponse": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "budget_limit": {
            "type": "number",
            "title": "Budget Limit"
          },
          "current_usage": {
            "type": "number",
            "title": "Current Usage"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Scopes"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "email",
          "name",
          "budget_limit",
          "current_usage",
          "scopes",
          "is_active"
        ],
        "title": "UserProfileResponse",
        "description": "User profile response model"
      },
      "UserReputationScore": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "total_feedback_given": {
            "type": "integer",
            "title": "Total Feedback Given"
          },
          "helpful_feedback_count": {
            "type": "integer",
            "title": "Helpful Feedback Count"
          },
          "reputation_score": {
            "type": "number",
            "maximum": 10.0,
            "minimum": 0.0,
            "title": "Reputation Score"
          },
          "expertise_areas": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Expertise Areas",
            "default": []
          },
          "last_updated": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "total_feedback_given",
          "helpful_feedback_count",
          "reputation_score"
        ],
        "title": "UserReputationScore",
        "description": "Репутация пользователя для взвешивания фидбека."
      },
      "UserResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "id",
          "username",
          "email"
        ],
        "title": "UserResponse"
      },
      "UserSettings": {
        "properties": {
          "data_sources": {
            "items": {
              "$ref": "#/components/schemas/DataSourceConfig-Output"
            },
            "type": "array",
            "title": "Data Sources",
            "default": []
          },
          "preferences": {
            "type": "object",
            "title": "Preferences",
            "default": {}
          }
        },
        "type": "object",
        "title": "UserSettings"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "app__api__v1__data_sources__DataSourceConfig": {
        "properties": {
          "source_type": {
            "type": "string",
            "title": "Source Type",
            "description": "Тип источника: confluence, gitlab, jira, local_files"
          },
          "source_name": {
            "type": "string",
            "title": "Source Name",
            "description": "Название источника"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Включен ли источник",
            "default": true
          },
          "config": {
            "type": "object",
            "title": "Config",
            "description": "Конфигурация подключения"
          },
          "sync_schedule": {
            "type": "string",
            "title": "Sync Schedule",
            "description": "Расписание синхронизации (cron)",
            "default": "0 2 * * *"
          },
          "incremental": {
            "type": "boolean",
            "title": "Incremental",
            "description": "Инкрементальная синхронизация",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "source_type",
          "source_name",
          "config"
        ],
        "title": "DataSourceConfig",
        "description": "Конфигурация источника данных"
      },
      "app__api__v1__enhanced_feedback__FeedbackResponse": {
        "properties": {
          "feedback_id": {
            "type": "string",
            "title": "Feedback Id"
          },
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "content_id": {
            "type": "string",
            "title": "Content Id"
          },
          "content_type": {
            "type": "string",
            "title": "Content Type"
          },
          "feedback_type": {
            "type": "string",
            "title": "Feedback Type"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "value": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Value"
          },
          "comment": {
            "type": "string",
            "title": "Comment",
            "default": ""
          },
          "rating": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rating"
          },
          "sentiment_score": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sentiment Score"
          },
          "confidence": {
            "type": "number",
            "title": "Confidence",
            "default": 0.0
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "default": []
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "is_moderated": {
            "type": "boolean",
            "title": "Is Moderated",
            "default": false
          },
          "moderation_reason": {
            "type": "string",
            "title": "Moderation Reason",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "feedback_id",
          "user_id",
          "content_id",
          "content_type",
          "feedback_type",
          "status",
          "created_at"
        ],
        "title": "FeedbackResponse",
        "description": "Ответ с информацией о feedback"
      },
      "app__api__v1__generate__RFCGenerationRequest": {
        "properties": {
          "task_description": {
            "type": "string",
            "minLength": 10,
            "title": "Task Description",
            "description": "Описание задачи"
          },
          "project_context": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Context",
            "description": "Контекст проекта"
          },
          "technical_requirements": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Technical Requirements",
            "description": "Технические требования"
          },
          "stakeholders": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stakeholders",
            "description": "Заинтересованные стороны"
          },
          "priority": {
            "type": "string",
            "title": "Priority",
            "description": "Приоритет: low, medium, high, critical",
            "default": "medium"
          },
          "use_all_sources": {
            "type": "boolean",
            "title": "Use All Sources",
            "description": "Использовать все доступные источники",
            "default": true
          },
          "excluded_sources": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Excluded Sources",
            "description": "Исключенные источники"
          },
          "template_type": {
            "type": "string",
            "title": "Template Type",
            "description": "Тип шаблона RFC",
            "default": "standard"
          }
        },
        "type": "object",
        "required": [
          "task_description"
        ],
        "title": "RFCGenerationRequest",
        "description": "Запрос на генерацию RFC"
      },
      "app__api__v1__llm_management__DocumentationRequest": {
        "properties": {
          "code": {
            "type": "string",
            "maxLength": 10000,
            "minLength": 1,
            "title": "Code",
            "description": "Code to document"
          },
          "language": {
            "type": "string",
            "title": "Language",
            "description": "Programming language",
            "default": "python"
          },
          "doc_type": {
            "type": "string",
            "title": "Doc Type",
            "description": "Documentation type",
            "default": "comprehensive"
          }
        },
        "type": "object",
        "required": [
          "code"
        ],
        "title": "DocumentationRequest",
        "description": "Request for code documentation."
      },
      "app__api__v1__llm_management__RFCGenerationRequest": {
        "properties": {
          "task_description": {
            "type": "string",
            "maxLength": 4000,
            "minLength": 10,
            "title": "Task Description",
            "description": "Task description"
          },
          "project_context": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2000
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Context",
            "description": "Project context"
          },
          "technical_requirements": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2000
              },
              {
                "type": "null"
              }
            ],
            "title": "Technical Requirements",
            "description": "Technical requirements"
          }
        },
        "type": "object",
        "required": [
          "task_description"
        ],
        "title": "RFCGenerationRequest",
        "description": "Request for RFC generation."
      },
      "app__api__v1__search__SearchResponse": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query"
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/app__api__v1__search__SearchResult"
            },
            "type": "array",
            "title": "Results"
          },
          "total_results": {
            "type": "integer",
            "title": "Total Results"
          },
          "search_time_ms": {
            "type": "number",
            "title": "Search Time Ms"
          },
          "sources_searched": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Sources Searched"
          },
          "filters_applied": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters Applied"
          },
          "pagination": {
            "type": "object",
            "title": "Pagination"
          }
        },
        "type": "object",
        "required": [
          "query",
          "results",
          "total_results",
          "search_time_ms",
          "sources_searched",
          "filters_applied",
          "pagination"
        ],
        "title": "SearchResponse",
        "description": "Ответ поиска"
      },
      "app__api__v1__search__SearchResult": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "source_type": {
            "type": "string",
            "title": "Source Type"
          },
          "source_name": {
            "type": "string",
            "title": "Source Name"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          },
          "score": {
            "type": "number",
            "title": "Score"
          },
          "highlights": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Highlights"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "title",
          "content",
          "source_type",
          "source_name",
          "url",
          "score",
          "highlights",
          "metadata",
          "created_at",
          "updated_at"
        ],
        "title": "SearchResult",
        "description": "Результат поиска"
      },
      "app__api__v1__users__DataSourceConfig": {
        "properties": {
          "source_type": {
            "type": "string",
            "title": "Source Type"
          },
          "source_name": {
            "type": "string",
            "title": "Source Name"
          },
          "is_enabled_semantic_search": {
            "type": "boolean",
            "title": "Is Enabled Semantic Search"
          },
          "is_enabled_architecture_generation": {
            "type": "boolean",
            "title": "Is Enabled Architecture Generation"
          }
        },
        "type": "object",
        "required": [
          "source_type",
          "source_name",
          "is_enabled_semantic_search",
          "is_enabled_architecture_generation"
        ],
        "title": "DataSourceConfig"
      },
      "models__base__SearchResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "default": true
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/models__base__SearchResult"
            },
            "type": "array",
            "title": "Results",
            "default": []
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "default": 0
          },
          "query": {
            "type": "string",
            "title": "Query"
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "SearchResponse",
        "description": "Search response model."
      },
      "models__base__SearchResult": {
        "properties": {
          "document": {
            "$ref": "#/components/schemas/Document"
          },
          "score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Score"
          },
          "highlights": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Highlights",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "document",
          "score"
        ],
        "title": "SearchResult",
        "description": "Search result model."
      },
      "models__documentation__DocumentationRequest": {
        "properties": {
          "documentation_type": {
            "$ref": "#/components/schemas/DocumentationType"
          },
          "code_input": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodeFile"
              },
              {
                "$ref": "#/components/schemas/CodeRepository"
              },
              {
                "type": "string"
              }
            ],
            "title": "Code Input"
          },
          "target_audience": {
            "type": "string",
            "title": "Target Audience",
            "description": "Целевая аудитория: developers, users, stakeholders, etc.",
            "default": "developers"
          },
          "detail_level": {
            "type": "string",
            "title": "Detail Level",
            "description": "Уровень детализации: brief, detailed, comprehensive",
            "default": "detailed"
          },
          "include_examples": {
            "type": "boolean",
            "title": "Include Examples",
            "default": true
          },
          "include_diagrams": {
            "type": "boolean",
            "title": "Include Diagrams",
            "default": false
          },
          "output_format": {
            "type": "string",
            "title": "Output Format",
            "description": "Формат вывода: markdown, html, rst, docx",
            "default": "markdown"
          },
          "custom_requirements": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Requirements"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          }
        },
        "type": "object",
        "required": [
          "documentation_type",
          "code_input"
        ],
        "title": "DocumentationRequest",
        "description": "Запрос на генерацию документации."
      },
      "models__feedback__FeedbackResponse": {
        "properties": {
          "feedback_id": {
            "type": "string",
            "title": "Feedback Id"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": "Спасибо за обратную связь!"
          },
          "points_earned": {
            "type": "integer",
            "title": "Points Earned",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "feedback_id"
        ],
        "title": "FeedbackResponse",
        "description": "Ответ на отправку обратной связи."
      },
      "models__feedback__FeedbackType": {
        "type": "string",
        "enum": [
          "like",
          "dislike",
          "report"
        ],
        "title": "FeedbackType",
        "description": "Типы обратной связи."
      },
      "models__search__SearchResult": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "source_type": {
            "type": "string",
            "title": "Source Type"
          },
          "source_name": {
            "type": "string",
            "title": "Source Name"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          },
          "score": {
            "type": "number",
            "title": "Score"
          },
          "highlights": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Highlights"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "id",
          "title",
          "content",
          "source_type",
          "source_name",
          "url",
          "score",
          "highlights",
          "metadata"
        ],
        "title": "SearchResult",
        "description": "Результат поиска"
      },
      "services__enhanced_feedback_service__FeedbackType": {
        "type": "string",
        "enum": [
          "like",
          "dislike",
          "comment",
          "rating",
          "report"
        ],
        "title": "FeedbackType",
        "description": "Типы обратной связи"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
