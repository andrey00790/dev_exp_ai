version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai_assistant_postgres
    environment:
      POSTGRES_DB: ai_assistant
      POSTGRES_USER: ai_user
      POSTGRES_PASSWORD: ai_password_secure_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_user -d ai_assistant"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai_assistant_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai_network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: ai_assistant_qdrant
    ports:
      - "6335:6333"
      - "6336:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6333/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ai_network

  # AI Assistant Backend
  backend:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.backend
    container_name: ai_assistant_backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://ai_user:ai_password_secure_2024@postgres:5432/ai_assistant
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_URL=http://qdrant:6333
      - ENVIRONMENT=production
      - DEBUG=false
      - SECRET_KEY=your-super-secret-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    volumes:
      - ./local/bootstrap:/app/bootstrap:ro
      - ./local/logs:/app/logs
      - ./local/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ai_network

  # Frontend (optional)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai_assistant_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      - backend
    networks:
      - ai_network

  # Data Ingestion Service
  data_ingestion:
    build:
      context: .
      dockerfile: Dockerfile.ingestion
    container_name: ai_assistant_ingestion
    environment:
      - DATABASE_URL=postgresql://ai_user:ai_password_secure_2024@postgres:5432/ai_assistant
      - QDRANT_URL=http://qdrant:6333
      - CONFIG_FILE=/app/local_config.yml
    volumes:
      - ./local/bootstrap:/app/bootstrap:ro
      - ./local/config:/app/config:ro
      - ./local/logs:/app/logs
      - ./scripts:/app/scripts:ro
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - ai_network
    profiles:
      - ingestion  # Only start when explicitly requested

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ai_assistant_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ai_network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: ai_assistant_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - ai_network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16 