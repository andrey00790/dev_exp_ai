# =============================================================================
# AI Assistant - Local Deployment Makefile
# =============================================================================

.PHONY: help deploy deploy-monitoring stop restart logs clean status test backup restore

# Default target
.DEFAULT_GOAL := help

# Variables
COMPOSE_FILE := docker-compose.prod.yml
DATA_DIR := ./data
BACKUP_DIR := ./backups

# Colors
BLUE := \033[0;34m
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m

help: ## Show this help message
	@echo "$(BLUE)AI Assistant - Local Deployment Commands$(NC)"
	@echo ""
	@echo "Usage: make [target]"
	@echo ""
	@echo "Targets:"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

deploy: ## Deploy AI Assistant locally (one command)
	@echo "$(BLUE)🚀 Deploying AI Assistant locally...$(NC)"
	@chmod +x deploy-local.sh
	@./deploy-local.sh

deploy-monitoring: ## Deploy with monitoring stack (Prometheus + Grafana)
	@echo "$(BLUE)🚀 Deploying AI Assistant with monitoring...$(NC)"
	@chmod +x deploy-local.sh
	@./deploy-local.sh --monitoring

stop: ## Stop all services
	@echo "$(YELLOW)🛑 Stopping all services...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) down

stop-all: ## Stop all services and remove volumes
	@echo "$(RED)🛑 Stopping all services and removing volumes...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) down -v

restart: ## Restart all services
	@echo "$(BLUE)🔄 Restarting all services...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) restart

logs: ## Show logs for all services
	@echo "$(BLUE)📋 Showing logs for all services...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) logs -f

logs-app: ## Show logs for main application
	@echo "$(BLUE)📋 Showing application logs...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) logs -f app

logs-frontend: ## Show logs for frontend
	@echo "$(BLUE)📋 Showing frontend logs...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) logs -f frontend

status: ## Show status of all services
	@echo "$(BLUE)📊 Service Status:$(NC)"
	@docker-compose -f $(COMPOSE_FILE) ps
	@echo ""
	@echo "$(BLUE)🏥 Health Checks:$(NC)"
	@echo -n "Backend API: "
	@curl -sf http://localhost:8000/health >/dev/null 2>&1 && echo "$(GREEN)✅ Healthy$(NC)" || echo "$(RED)❌ Unhealthy$(NC)"
	@echo -n "Frontend: "
	@curl -sf http://localhost:3000 >/dev/null 2>&1 && echo "$(GREEN)✅ Healthy$(NC)" || echo "$(RED)❌ Unhealthy$(NC)"
	@echo -n "Qdrant: "
	@curl -sf http://localhost:6333/readyz >/dev/null 2>&1 && echo "$(GREEN)✅ Healthy$(NC)" || echo "$(RED)❌ Unhealthy$(NC)"

test: ## Test the deployment
	@echo "$(BLUE)🧪 Testing deployment...$(NC)"
	@echo "Testing health endpoint..."
	@curl -sf http://localhost:8000/health | jq '.' || echo "$(RED)❌ Health check failed$(NC)"
	@echo ""
	@echo "Testing vector search collections..."
	@curl -sf http://localhost:8000/api/v1/vector-search/collections | jq '.' || echo "$(RED)❌ Vector search failed$(NC)"
	@echo ""
	@echo "Testing LLM providers..."
	@curl -sf http://localhost:8000/api/v1/llm/providers | jq '.' || echo "$(RED)❌ LLM providers failed$(NC)"

clean: ## Clean up Docker resources
	@echo "$(YELLOW)🧹 Cleaning up Docker resources...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) down --remove-orphans
	@docker system prune -f
	@echo "$(GREEN)✅ Cleanup completed$(NC)"

backup: ## Backup all data
	@echo "$(BLUE)💾 Creating backup...$(NC)"
	@mkdir -p $(BACKUP_DIR)
	@tar -czf $(BACKUP_DIR)/ai-assistant-backup-$(shell date +%Y%m%d-%H%M%S).tar.gz $(DATA_DIR) logs
	@echo "$(GREEN)✅ Backup created in $(BACKUP_DIR)$(NC)"

restore: ## Restore from latest backup (requires BACKUP_FILE variable)
	@echo "$(BLUE)📥 Restoring from backup...$(NC)"
	@if [ -z "$(BACKUP_FILE)" ]; then \
		echo "$(RED)❌ Please specify BACKUP_FILE variable$(NC)"; \
		echo "Usage: make restore BACKUP_FILE=path/to/backup.tar.gz"; \
		exit 1; \
	fi
	@docker-compose -f $(COMPOSE_FILE) down
	@rm -rf $(DATA_DIR) logs
	@tar -xzf $(BACKUP_FILE)
	@echo "$(GREEN)✅ Backup restored$(NC)"

update: ## Update and redeploy
	@echo "$(BLUE)🔄 Updating and redeploying...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) down
	@docker-compose -f $(COMPOSE_FILE) build --no-cache
	@$(MAKE) deploy

shell-app: ## Open shell in app container
	@docker-compose -f $(COMPOSE_FILE) exec app /bin/bash

shell-frontend: ## Open shell in frontend container
	@docker-compose -f $(COMPOSE_FILE) exec frontend /bin/sh

urls: ## Show all service URLs
	@echo "$(BLUE)📋 Service URLs:$(NC)"
	@echo "Frontend:           http://localhost:3000"
	@echo "Backend API:        http://localhost:8000"
	@echo "API Documentation:  http://localhost:8000/docs"
	@echo "Health Check:       http://localhost:8000/health"
	@echo "Qdrant Dashboard:   http://localhost:6333/dashboard"
	@echo "Prometheus:         http://localhost:9090 (if monitoring enabled)"
	@echo "Grafana:            http://localhost:3001 (if monitoring enabled)"

data-info: ## Show data directory information
	@echo "$(BLUE)🗂️  Data Directory Information:$(NC)"
	@echo "Redis data size:    $(shell du -sh $(DATA_DIR)/redis 2>/dev/null || echo 'Not found')"
	@echo "Qdrant data size:   $(shell du -sh $(DATA_DIR)/qdrant 2>/dev/null || echo 'Not found')"
	@echo "App data size:      $(shell du -sh $(DATA_DIR)/app 2>/dev/null || echo 'Not found')"
	@echo "Logs size:          $(shell du -sh logs 2>/dev/null || echo 'Not found')"
	@echo "Total data size:    $(shell du -sh $(DATA_DIR) logs 2>/dev/null | tail -1 | cut -f1 || echo 'Not found')" 