#!/usr/bin/env python3
"""
AI Enhancement Testing Script
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ AI –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: fine-tuning, –∫–∞—á–µ—Å—Ç–≤–æ RFC, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–æ–∏—Å–∫–∞
"""

import asyncio
import logging
import time
from datetime import datetime
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_model_trainer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ModelTrainer."""
    print("\nüß† –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MODEL TRAINER")
    print("=" * 50)
    
    try:
        from model_training import ModelTrainer
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        trainer = ModelTrainer()
        print(f"‚úÖ ModelTrainer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {trainer.model_name}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        examples = trainer.load_training_data()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(examples)} –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        model = trainer.load_model()
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {type(model).__name__}")
        
        # –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
        metrics = trainer.evaluate_model()
        print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏: {metrics}")
        
        # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è)
        print("üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—É—á–µ–Ω–∏—è...")
        result = trainer.run_full_training_pipeline()
        print(f"‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω: {result['status']}")
        
        # –¢–µ—Å—Ç –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        print("üåç –¢–µ—Å—Ç –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
        multilingual_result = trainer.optimize_for_multilingual()
        print(f"‚úÖ –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {multilingual_result['status']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ ModelTrainer: {e}")
        return False

def test_rfc_quality_enhancer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç RFCQualityEnhancer."""
    print("\nüìù –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RFC QUALITY ENHANCER")
    print("=" * 50)
    
    try:
        from domain.rfc_generation.rfc_quality_enhancer import get_rfc_quality_enhancer
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        enhancer = get_rfc_quality_enhancer()
        print("‚úÖ RFCQualityEnhancer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π RFC –∫–æ–Ω—Ç–µ–Ω—Ç
        test_rfc_content = """
# OAuth 2.0 Authentication System

## Problem Statement
We need to implement OAuth 2.0 authentication for our API.

## Requirements
- Support multiple OAuth providers
- Secure token handling
- User management

## Architecture
The system will use JWT tokens and Redis for session storage.

## Implementation
```python
def authenticate_user(token):
    return validate_jwt(token)
```

## Security
All tokens will be encrypted and have expiration times.

## Monitoring
We will track authentication metrics and failures.
"""
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
        print("üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ RFC...")
        metrics = enhancer.analyze_rfc_quality(test_rfc_content, "OAuth 2.0 System")
        
        print(f"‚úÖ –û–±—â–∏–π —Å—á–µ—Ç: {metrics.overall_score:.2f}")
        print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {metrics.structure_score:.2f}")
        print(f"‚úÖ –ü–æ–ª–Ω–æ—Ç–∞: {metrics.completeness_score:.2f}")
        print(f"‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –≥–ª—É–±–∏–Ω–∞: {metrics.technical_depth_score:.2f}")
        print(f"‚úÖ –Ø—Å–Ω–æ—Å—Ç—å: {metrics.clarity_score:.2f}")
        
        if metrics.improvement_suggestions:
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:")
            for suggestion in metrics.improvement_suggestions[:3]:
                print(f"   - {suggestion}")
        
        if metrics.missing_sections:
            print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å–µ–∫—Ü–∏–∏:")
            for section in metrics.missing_sections[:3]:
                print(f"   - {section}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ RFCQualityEnhancer: {e}")
        return False

async def test_vector_search_optimizer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç VectorSearchOptimizer."""
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï VECTOR SEARCH OPTIMIZER")
    print("=" * 50)
    
    try:
        from domain.integration.vector_search_optimizer import get_vector_search_optimizer
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        optimizer = get_vector_search_optimizer()
        print("‚úÖ VectorSearchOptimizer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_queries = [
            "OAuth 2.0 authentication",
            "microservices architecture",
            "database optimization",
            "API security",
            "monitoring system"
        ]
        
        # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("‚è±Ô∏è –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞...")
        start_time = time.time()
        
        performance_metrics = await optimizer.measure_search_performance(test_queries)
        
        measurement_time = time.time() - start_time
        print(f"‚úÖ –ò–∑–º–µ—Ä–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {measurement_time:.2f}s")
        
        print(f"‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {performance_metrics.avg_response_time_ms:.2f}ms")
        print(f"‚úÖ P95 –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {performance_metrics.p95_response_time_ms:.2f}ms")
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {performance_metrics.queries_per_second:.2f}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {performance_metrics.success_rate:.2%}")
        print(f"‚úÖ Cache hit rate: {performance_metrics.cache_hit_rate:.2%}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        print("üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
        recommendations = optimizer.generate_optimization_recommendations(performance_metrics)
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        for rec in recommendations[:3]:
            print(f"   - [{rec.priority.upper()}] {rec.title}")
            print(f"     {rec.description}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
        report = optimizer.get_optimization_report()
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {len(report['optimization_recommendations'])} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ VectorSearchOptimizer: {e}")
        return False

def test_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
    print("\nüîó –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ
        from model_training import ModelTrainer
        from domain.rfc_generation.rfc_quality_enhancer import get_rfc_quality_enhancer
        from domain.integration.vector_search_optimizer import get_vector_search_optimizer
        
        trainer = ModelTrainer()
        enhancer = get_rfc_quality_enhancer()
        optimizer = get_vector_search_optimizer()
        
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è: –∞–Ω–∞–ª–∏–∑ RFC -> —É–ª—É—á—à–µ–Ω–∏–µ -> –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
        test_rfc = """
# Simple API Design
Basic API for user management.
"""
        
        # 1. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_metrics = enhancer.analyze_rfc_quality(test_rfc, "Simple API")
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞: {quality_metrics.overall_score:.2f}")
        
        # 2. –ï—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∏–∑–∫–æ–µ, –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ
        if quality_metrics.overall_score < 0.7:
            print("üí° RFC —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è")
            print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(quality_metrics.improvement_suggestions)}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—é
        examples = trainer.load_training_data()
        if len(examples) > 0:
            print(f"‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—é: {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
        
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_multilingual_support():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É."""
    print("\nüåç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–£–õ–¨–¢–ò–Ø–ó–´–ß–ù–û–°–¢–ò")
    print("=" * 50)
    
    try:
        from domain.rfc_generation.rfc_quality_enhancer import get_rfc_quality_enhancer
        
        enhancer = get_rfc_quality_enhancer()
        
        # –¢–µ—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        russian_rfc = """
# –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ OAuth 2.0

## –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏
–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ OAuth 2.0 –¥–ª—è –Ω–∞—à–µ–≥–æ API.

## –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ OAuth
- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JWT —Ç–æ–∫–µ–Ω—ã –∏ Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π.

## –†–µ–∞–ª–∏–∑–∞—Ü–∏—è
```python
def authenticate_user(token):
    return validate_jwt(token)
```

## –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
–í—Å–µ —Ç–æ–∫–µ–Ω—ã –±—É–¥—É—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –∏ –∏–º–µ—Ç—å –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è.

## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
–ú—ã –±—É–¥–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Å–±–æ–∏.
"""
        
        # –ê–Ω–∞–ª–∏–∑ —Ä—É—Å—Å–∫–æ–≥–æ RFC
        ru_metrics = enhancer.analyze_rfc_quality(russian_rfc, "–°–∏—Å—Ç–µ–º–∞ OAuth 2.0")
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä—É—Å—Å–∫–æ–≥–æ RFC: {ru_metrics.overall_score:.2f}")
        
        # –¢–µ—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
        english_rfc = """
# OAuth 2.0 Authentication System

## Problem Statement
We need to implement OAuth 2.0 authentication for our API.

## Requirements
- Support multiple OAuth providers
- Secure token handling
- User management

## Architecture
The system will use JWT tokens and Redis for session storage.

## Implementation
```python
def authenticate_user(token):
    return validate_jwt(token)
```

## Security
All tokens will be encrypted and have expiration times.

## Monitoring
We will track authentication metrics and failures.
"""
        
        # –ê–Ω–∞–ª–∏–∑ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ RFC
        en_metrics = enhancer.analyze_rfc_quality(english_rfc, "OAuth 2.0 System")
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ RFC: {en_metrics.overall_score:.2f}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        score_diff = abs(ru_metrics.overall_score - en_metrics.overall_score)
        if score_diff < 0.1:
            print("‚úÖ –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"‚ö†Ô∏è –†–∞–∑–Ω–∏—Ü–∞ –≤ –æ—Ü–µ–Ω–∫–∞—Ö: {score_diff:.2f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø AI ENHANCEMENT")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    results = {}
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    results["model_trainer"] = test_model_trainer()
    results["rfc_quality_enhancer"] = test_rfc_quality_enhancer()
    results["vector_search_optimizer"] = await test_vector_search_optimizer()
    results["integration"] = test_integration()
    results["multilingual"] = test_multilingual_support()
    
    # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    total_tests = len(results)
    passed_tests = sum(1 for result in results.values() if result)
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name.replace('_', ' ').title()}: {status}")
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüöÄ AI Enhancement –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        print("   - ‚úÖ Fine-tuning –º–æ–¥–µ–ª–µ–π")
        print("   - ‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ RFC")
        print("   - ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞")
        print("   - ‚úÖ –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
        print("   - ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
    
    print(f"\n–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    asyncio.run(main())
