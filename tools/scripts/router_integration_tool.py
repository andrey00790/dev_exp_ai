#!/usr/bin/env python3
"""
Router Integration Tool
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ –≤ main.py

Usage:
    python tools/scripts/router_integration_tool.py --scan
    python tools/scripts/router_integration_tool.py --connect --priority=high
    python tools/scripts/router_integration_tool.py --test --router=health
"""

import os
import re
import ast
import argparse
from pathlib import Path
from typing import List, Dict, Tuple, Optional
import logging

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class RouterInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ—É—Ç–µ—Ä–µ"""
    def __init__(self, file_path: str, prefix: str = "", tags: List[str] = None):
        self.file_path = file_path
        self.prefix = prefix
        self.tags = tags or []
        self.priority = self._calculate_priority()
        
    def _calculate_priority(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ä–æ—É—Ç–µ—Ä–∞"""
        high_priority = ["health", "auth", "search", "ai", "documents"]
        medium_priority = ["monitoring", "admin", "budget", "vector"]
        
        path_lower = self.file_path.lower()
        
        for keyword in high_priority:
            if keyword in path_lower:
                return "high"
                
        for keyword in medium_priority:
            if keyword in path_lower:
                return "medium"
                
        return "low"
        
    def get_import_statement(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è import statement"""
        module_path = self.file_path.replace("/", ".").replace(".py", "")
        router_name = f"{Path(self.file_path).stem}_router"
        return f"from {module_path} import router as {router_name}"
        
    def get_include_statement(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è include_router statement"""
        router_name = f"{Path(self.file_path).stem}_router"
        prefix = f'prefix="{self.prefix}"' if self.prefix else ''
        return f"app.include_router({router_name}, {prefix})"


class RouterScanner:
    """–°–∫–∞–Ω–µ—Ä —Ä–æ—É—Ç–µ—Ä–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
    
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root)
        self.found_routers: List[RouterInfo] = []
        
    def scan_routers(self) -> List[RouterInfo]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
        logger.info("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤...")
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —Ä–æ—É—Ç–µ—Ä–∞–º–∏
        router_patterns = [
            "app/api/**/*.py",
            "backend/presentation/**/*.py", 
            "infrastructure/**/presentation/**/*.py"
        ]
        
        routers = []
        
        for pattern in router_patterns:
            for file_path in self.project_root.glob(pattern):
                if self._is_router_file(file_path):
                    router_info = self._extract_router_info(file_path)
                    if router_info:
                        routers.append(router_info)
                        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(routers)} —Ä–æ—É—Ç–µ—Ä–æ–≤")
        self.found_routers = routers
        return routers
        
    def _is_router_file(self, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ñ–∞–π–ª —Ä–æ—É—Ç–µ—Ä"""
        try:
            content = file_path.read_text(encoding='utf-8')
            # –ò—â–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
            return bool(re.search(r'router\s*=\s*APIRouter', content))
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False
            
    def _extract_router_info(self, file_path: Path) -> Optional[RouterInfo]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ—É—Ç–µ—Ä–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            content = file_path.read_text(encoding='utf-8')
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ prefix –∏–∑ APIRouter
            prefix_match = re.search(r'APIRouter\([^)]*prefix\s*=\s*["\']([^"\']+)["\']', content)
            prefix = prefix_match.group(1) if prefix_match else ""
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ tags
            tags_match = re.search(r'tags\s*=\s*\[(.*?)\]', content)
            tags = []
            if tags_match:
                tags_str = tags_match.group(1)
                tags = [tag.strip(' "\'') for tag in tags_str.split(',') if tag.strip()]
            
            # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
            rel_path = str(file_path.relative_to(self.project_root))
            
            return RouterInfo(rel_path, prefix, tags)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ {file_path}: {e}")
            return None


class MainPyAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä main.py –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    
    def __init__(self, main_py_path: str = "main.py"):
        self.main_py_path = Path(main_py_path)
        
    def get_connected_routers(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤"""
        try:
            content = self.main_py_path.read_text(encoding='utf-8')
            
            # –ò—â–µ–º –≤—Å–µ include_router –≤—ã–∑–æ–≤—ã
            connected = re.findall(r'app\.include_router\([^)]+\)', content)
            return connected
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ main.py: {e}")
            return []
            
    def add_router_to_main(self, router_info: RouterInfo) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –≤ main.py"""
        try:
            content = self.main_py_path.read_text(encoding='utf-8')
            
            # –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ setup_routes
            setup_routes_match = re.search(
                r'(def setup_routes\(app: FastAPI\) -> None:.*?)(    except Exception as e:)',
                content, re.DOTALL
            )
            
            if not setup_routes_match:
                logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è setup_routes –≤ main.py")
                return False
                
            setup_function = setup_routes_match.group(1)
            exception_block = setup_routes_match.group(2)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞
            import_stmt = router_info.get_import_statement()
            include_stmt = router_info.get_include_statement()
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–µ–∫—Ü–∏—é –∏–º–ø–æ—Ä—Ç–æ–≤ (–ø–µ—Ä–µ–¥ exception block)
            new_router_block = f"""
        # Import {router_info.file_path} router
        try:
            {import_stmt}
            {include_stmt}
            logger.info("‚úÖ {router_info.file_path} router configured")
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è {router_info.file_path} router not available: {{e}}")
        
"""
            
            new_setup_function = setup_function + new_router_block
            new_content = content.replace(
                setup_routes_match.group(0),
                new_setup_function + exception_block
            )
            
            # –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            self.main_py_path.write_text(new_content, encoding='utf-8')
            logger.info(f"‚úÖ –†–æ—É—Ç–µ—Ä {router_info.file_path} –¥–æ–±–∞–≤–ª–µ–Ω –≤ main.py")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –≤ main.py: {e}")
            return False


class RouterIntegrationTool:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–æ–≤"""
    
    def __init__(self, project_root: str = "."):
        self.project_root = project_root
        self.scanner = RouterScanner(project_root)
        self.main_analyzer = MainPyAnalyzer()
        
    def scan_and_report(self) -> Dict:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç—á–µ—Ç –æ —Ä–æ—É—Ç–µ—Ä–∞—Ö"""
        routers = self.scanner.scan_routers()
        connected = self.main_analyzer.get_connected_routers()
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        by_priority = {"high": [], "medium": [], "low": []}
        for router in routers:
            by_priority[router.priority].append(router)
            
        report = {
            "total_found": len(routers),
            "total_connected": len(connected),
            "by_priority": by_priority,
            "coverage": len(connected) / len(routers) * 100 if routers else 0
        }
        
        return report
        
    def print_scan_report(self):
        """–ü–µ—á–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        report = self.scan_and_report()
        
        print("\n" + "="*60)
        print("üîç ROUTER INTEGRATION ANALYSIS")
        print("="*60)
        
        print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ä–æ—É—Ç–µ—Ä–æ–≤: {report['total_found']}")
        print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –≤ main.py: {report['total_connected']}")
        print(f"üìà –ü–æ–∫—Ä—ã—Ç–∏–µ: {report['coverage']:.1f}%")
        
        print("\nüìã –†–æ—É—Ç–µ—Ä—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É:")
        
        for priority in ["high", "medium", "low"]:
            routers = report['by_priority'][priority]
            if routers:
                print(f"\nüî• {priority.upper()} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ({len(routers)} —Ä–æ—É—Ç–µ—Ä–æ–≤):")
                for router in routers:
                    status = "‚úÖ" if self._is_router_connected(router) else "‚ùå"
                    print(f"  {status} {router.file_path}")
                    if router.prefix:
                        print(f"       prefix: {router.prefix}")
                    if router.tags:
                        print(f"       tags: {', '.join(router.tags)}")
                        
    def _is_router_connected(self, router_info: RouterInfo) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ —Ä–æ—É—Ç–µ—Ä"""
        connected = self.main_analyzer.get_connected_routers()
        router_name = f"{Path(router_info.file_path).stem}_router"
        return any(router_name in conn for conn in connected)
        
    def connect_routers_by_priority(self, priority: str = "high") -> int:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        routers = self.scanner.scan_routers()
        priority_routers = [r for r in routers if r.priority == priority]
        
        connected_count = 0
        
        logger.info(f"üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {len(priority_routers)} —Ä–æ—É—Ç–µ—Ä–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º {priority}")
        
        for router in priority_routers:
            if not self._is_router_connected(router):
                if self.main_analyzer.add_router_to_main(router):
                    connected_count += 1
                    logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω: {router.file_path}")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {router.file_path}")
            else:
                logger.info(f"‚ö†Ô∏è –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω: {router.file_path}")
                
        logger.info(f"üéâ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ {connected_count} –Ω–æ–≤—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤")
        return connected_count
        
    def test_router_connectivity(self, router_name: str = None):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤...")
        
        import subprocess
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        try:
            result = subprocess.run([
                "python", "-c", 
                "from main import app; print('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ')"
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                logger.info("‚úÖ –í—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(description="Router Integration Tool")
    parser.add_argument("--scan", action="store_true", help="–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–æ—É—Ç–µ—Ä—ã")
    parser.add_argument("--connect", action="store_true", help="–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–æ—É—Ç–µ—Ä—ã")
    parser.add_argument("--test", action="store_true", help="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
    parser.add_argument("--priority", choices=["high", "medium", "low"], 
                       default="high", help="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–æ—É—Ç–µ—Ä–æ–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    parser.add_argument("--router", help="–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏")
    
    args = parser.parse_args()
    
    tool = RouterIntegrationTool()
    
    if args.scan:
        tool.print_scan_report()
        
    elif args.connect:
        connected = tool.connect_routers_by_priority(args.priority)
        print(f"\nüéâ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ {connected} —Ä–æ—É—Ç–µ—Ä–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º {args.priority}")
        
    elif args.test:
        success = tool.test_router_connectivity(args.router)
        exit(0 if success else 1)
        
    else:
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --scan, --connect –∏–ª–∏ --test")
        parser.print_help()


if __name__ == "__main__":
    main() 