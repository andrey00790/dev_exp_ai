"""
VK Teams Bot Adapter

–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ VK Teams –±–æ—Ç–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ API AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:
- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –í—ã–∑–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö API endpoints
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è VK Teams
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
"""

import asyncio
import json
import logging
import time
from datetime import datetime, timezone
from typing import Any, Dict, List, Optional, Union

import httpx
from vk_teams_async_bot.bot import Bot
from vk_teams_async_bot.events import Event
from vk_teams_async_bot.helpers import InlineKeyboardMarkup, KeyboardButton
from vk_teams_async_bot.constants import StyleKeyboard, ParseMode

from app.config import get_settings
from infrastructure.vk_teams.domain.bot_models import AIAssistantContext, BotMessage, BotStats

logger = logging.getLogger(__name__)


class VKTeamsBotAdapter:
    """
    –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ VK Teams –±–æ—Ç–∞ —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
    """
    
    def __init__(self):
        self.settings = get_settings()
        self.stats: Optional[BotStats] = None
        self.user_contexts: Dict[str, AIAssistantContext] = {}
        
        # HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö API –≤—ã–∑–æ–≤–æ–≤
        self.api_client = httpx.AsyncClient(
            base_url=f"http://localhost:{self.settings.SERVER_PORT}",
            timeout=30.0
        )
        
        # –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º
        self._user_cache: Dict[str, Dict[str, Any]] = {}
        
        # VK OAuth –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self._vk_auth_enabled = getattr(self.settings, 'VK_OAUTH_ENABLED', False)
        
    async def handle_event(
        self, 
        event_type: str, 
        event_id: str, 
        timestamp: int, 
        payload: Dict[str, Any]
    ) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –æ—Ç VK Teams
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            event_id: ID —Å–æ–±—ã—Ç–∏—è
            timestamp: –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
            payload: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è {event_type} (ID: {event_id})")
            
            if event_type == "newMessage":
                return await self._handle_new_message(payload)
            elif event_type == "callbackQuery":
                return await self._handle_callback_query(payload)
            elif event_type == "editedMessage":
                return await self._handle_edited_message(payload)
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}")
                return {"status": "ignored", "reason": f"Unknown event type: {event_type}"}
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
            if self.stats:
                self.stats.record_error("event_processing", str(e), {"event_type": event_type})
            return {"status": "error", "error": str(e)}
    
    async def handle_message_event(self, event_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            payload = event_data.get("payload", {})
            return await self._handle_new_message(payload)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {"status": "error", "error": str(e)}
    
    async def handle_callback_query(self, event_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            payload = event_data.get("payload", {})
            return await self._handle_callback_query(payload)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            return {"status": "error", "error": str(e)}
    
    async def handle_start_command(self, event: Event, bot: Bot):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ VK Teams
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        try:
            chat_id = event.chat.chatId
            user_id = event.from_.userId
            
            # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context = self._get_or_create_user_context(user_id, chat_id)
            
            welcome_text = """ü§ñ **AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç VK Teams - Enhanced Edition**
            
–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ —Å –Ω–æ–≤—ã–º–∏ —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏! üöÄ

üéØ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
üîç **–£–º–Ω—ã–π –ø–æ–∏—Å–∫** - —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
üí¨ **AI –î–∏–∞–ª–æ–≥–∏** - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
üìù **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞** - RFC, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è, –∫–æ–¥
üîß **–ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–≤—å—é** - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
‚ö° **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è** - —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
üìä **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞** - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

üÜï **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
üìö **–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏** - —Å–æ–∑–¥–∞—é docs –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
üìã **–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤** - –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
üéØ **Contextual AI** - –ø–æ–º–Ω—é –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
üèÜ **–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π** - –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å
üì§ **–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤** - —Å–æ—Ö—Ä–∞–Ω—è—é –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö

**üéÆ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/search` - –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ `/analyze` - –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞/–∫–æ–¥–∞  
‚Ä¢ `/review` - —Ä–µ–≤—å—é –∫–æ–¥–∞
‚Ä¢ `/generate` - —Å–æ–∑–¥–∞—Ç—å RFC
‚Ä¢ `/docs` - –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
‚Ä¢ `/template` - —à–∞–±–ª–æ–Ω—ã –∫–æ–¥–∞
‚Ä¢ `/stats` - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üí° **–°–æ–≤–µ—Ç:** –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º - —è –ø–æ–π–º—É!

–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å! ‚ú®"""
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
            keyboard = self._create_main_menu_keyboard()
            
            await bot.send_text(
                chat_id=chat_id,
                text=welcome_text,
                parse_mode=ParseMode.MARKDOWNV2,
                inline_keyboard_markup=keyboard
            )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if self.stats:
                message = BotMessage(
                    chat_id=chat_id,
                    user_id=user_id,
                    text="/start",
                    is_command=True,
                    command="start"
                )
                self.stats.record_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
            await bot.send_text(
                chat_id=event.chat.chatId,
                text="üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def handle_help_command(self, event: Event, bot: Bot):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ VK Teams
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        try:
            help_text = """üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞**

üîç **–ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑:**
‚Ä¢ `/search <–∑–∞–ø—Ä–æ—Å>` - —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
‚Ä¢ `/analyze <—Ç–µ–∫—Å—Ç>` - –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞/–∫–æ–¥–∞
‚Ä¢ `/review <–∫–æ–¥>` - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–≤—å—é –∫–æ–¥–∞
‚Ä¢ `/optimize <–∫–æ–¥>` - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

üìù **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**
‚Ä¢ `/generate <—Ç–µ–º–∞>` - —Å–æ–∑–¥–∞–Ω–∏–µ RFC –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ `/docs <—Ç–µ–º–∞>` - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
‚Ä¢ `/template [—Ç–∏–ø]` - –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –∫–æ–¥–∞

üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ `/status` - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
‚Ä¢ `/stats` - –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ `/settings` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üéØ **–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º!

üí° **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
‚Ä¢ `–ù–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏`
‚Ä¢ `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç Python –∫–æ–¥ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å`
‚Ä¢ `–°–æ–∑–¥–∞–π RFC –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã`
‚Ä¢ `–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏`
‚Ä¢ `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π README –¥–ª—è React –ø—Ä–æ–µ–∫—Ç–∞`

üöÄ **–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ —Å –ø–∞–º—è—Ç—å—é
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ –º–µ–Ω—é
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""

            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            keyboard = InlineKeyboardMarkup(buttons_in_row=3)
            keyboard.add(
                KeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="action:search"),
                KeyboardButton("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data="action:generate"),
                KeyboardButton("üîß –ê–Ω–∞–ª–∏–∑", callback_data="action:analyze"),
                KeyboardButton("‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", callback_data="action:optimize"),
                KeyboardButton("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", callback_data="action:docs"),
                KeyboardButton("üìã –®–∞–±–ª–æ–Ω—ã", callback_data="action:template"),
                KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="action:stats"),
                KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="action:settings"),
                KeyboardButton("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ", callback_data="action:about")
            )
            
            await bot.send_text(
                chat_id=event.chat.chatId,
                text=help_text,
                parse_mode=ParseMode.MARKDOWNV2,
                inline_keyboard_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help: {e}")
            await bot.send_text(
                chat_id=event.chat.chatId,
                text="üòî –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏."
            )
    
    async def handle_text_message(self, event: Event, bot: Bot):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ VK Teams
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        start_time = time.time()
        
        try:
            chat_id = event.chat.chatId
            user_id = event.from_.userId
            text = event.text
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text[:100]}...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ VK OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if self._vk_auth_enabled:
                if not await self._check_vk_user_access(user_id):
                    await self._send_access_denied_message(bot, chat_id, user_id)
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
            if text.startswith('/'):
                await self._handle_command_message(event, bot)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context = self._get_or_create_user_context(user_id, chat_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º typing indicator
            # await bot.send_typing(chat_id)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI API
            response = await self._process_ai_request(text, context)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await self._send_ai_response(bot, chat_id, response)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if self.stats:
                response_time = (time.time() - start_time) * 1000
                message = BotMessage(
                    chat_id=chat_id,
                    user_id=user_id,
                    text=text,
                    response_time_ms=response_time
                )
                self.stats.record_message(message)
                context.add_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await bot.send_text(
                chat_id=event.chat.chatId,
                text="üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            
            if self.stats:
                self.stats.record_error("message_processing", str(e))
    
    async def test_event_processing(self, test_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
        
        Args:
            test_data: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        return {
            "test_successful": True,
            "processed_data": test_data,
            "timestamp": datetime.now(timezone.utc).isoformat()
        }
    
    async def _handle_new_message(self, payload: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            chat = payload.get("chat", {})
            from_user = payload.get("from", {})
            text = payload.get("text", "")
            
            chat_id = chat.get("chatId")
            user_id = from_user.get("userId")
            
            logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –≤ —á–∞—Ç–µ {chat_id}: {text}")
            
            return {"status": "processed", "chat_id": chat_id, "user_id": user_id}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {"status": "error", "error": str(e)}
    
    async def _handle_callback_query(self, payload: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
        """
        try:
            callback_data = payload.get("callbackData", "")
            chat_id = payload.get("message", {}).get("chat", {}).get("chatId")
            user_id = payload.get("from", {}).get("userId")
            
            logger.info(f"Callback –æ—Ç {user_id}: {callback_data}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –¥–∞–Ω–Ω—ã–µ
            await self._process_callback_action(callback_data, chat_id, user_id)
            
            return {"status": "processed", "callback_data": callback_data}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            return {"status": "error", "error": str(e)}
    
    async def _handle_edited_message(self, payload: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        return {"status": "ignored", "reason": "Edited messages not processed"}
    
    async def _handle_command_message(self, event: Event, bot: Bot):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        """
        text = event.text.strip()
        command_parts = text.split(' ', 1)
        command = command_parts[0][1:]  # –£–±–∏—Ä–∞–µ–º /
        args = command_parts[1] if len(command_parts) > 1 else ""
        
        chat_id = event.chat.chatId
        user_id = event.from_.userId
        
        try:
            if command == "search":
                await self._handle_search_command(bot, chat_id, user_id, args)
            elif command == "generate":
                await self._handle_generate_command(bot, chat_id, user_id, args)
            elif command == "status":
                await self._handle_status_command(bot, chat_id, user_id)
            elif command == "settings":
                await self._handle_settings_command(bot, chat_id, user_id)
            elif command == "analyze":
                await self._handle_analyze_command(bot, chat_id, user_id, args)
            elif command == "review":
                await self._handle_code_review_command(bot, chat_id, user_id, args)
            elif command == "optimize":
                await self._handle_optimize_command(bot, chat_id, user_id, args)
            elif command == "docs":
                await self._handle_docs_command(bot, chat_id, user_id, args)
            elif command == "template":
                await self._handle_template_command(bot, chat_id, user_id, args)
            elif command == "stats":
                await self._handle_stats_command(bot, chat_id, user_id)
            else:
                await bot.send_text(
                    chat_id=chat_id,
                    text=f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: `{command}`\n\nüîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n‚Ä¢ `/help` - –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n‚Ä¢ `/search <–∑–∞–ø—Ä–æ—Å>` - –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n‚Ä¢ `/generate <—Ç–µ–º–∞>` - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n‚Ä¢ `/analyze <—Ç–µ–∫—Å—Ç>` - –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞\n‚Ä¢ `/review <–∫–æ–¥>` - —Ä–µ–≤—å—é –∫–æ–¥–∞\n‚Ä¢ `/optimize <–∫–æ–¥>` - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è\n‚Ä¢ `/status` - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã",
                    parse_mode=ParseMode.MARKDOWNV2
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
            await bot.send_text(
                chat_id=chat_id,
                text="üòî –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help."
            )

    async def _handle_analyze_command(self, bot: Bot, chat_id: str, user_id: str, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞/–∫–æ–¥–∞"""
        if not text:
            await bot.send_text(
                chat_id, 
                "‚ùì –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n`/analyze –≤–∞—à —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–æ–¥`",
                parse_mode=ParseMode.MARKDOWNV2
            )
            return
            
        try:
            context = self._get_or_create_user_context(user_id, chat_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º typing indicator
            loading_msg = await bot.send_text(chat_id, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
            
            response = await self.api_client.post(
                "/api/v1/ai/analyze",
                json={
                    "text": text,
                    "analysis_type": "comprehensive",
                    "include_suggestions": True
                },
                headers={"Authorization": f"Bearer {self._get_internal_token()}"}
            )
            
            if response.status_code == 200:
                data = response.json()
                
                analysis_text = f"""üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞**

üéØ **–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:** {data.get('content_type', '–¢–µ–∫—Å—Ç')}
üìè **–†–∞–∑–º–µ—Ä:** {len(text)} —Å–∏–º–≤–æ–ª–æ–≤
üè∑Ô∏è **–Ø–∑—ã–∫:** {data.get('language', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}

üìà **–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:**
‚Ä¢ –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å: {data.get('readability_score', 'N/A')}/10
‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {data.get('complexity', '–°—Ä–µ–¥–Ω—è—è')}
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: {data.get('structure_score', 'N/A')}/10

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
{data.get('suggestions', '–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π')}

‚ú® **–ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã:**
{', '.join(data.get('key_topics', ['–ù–µ –Ω–∞–π–¥–µ–Ω—ã']))}"""

                keyboard = InlineKeyboardMarkup(buttons_in_row=2)
                keyboard.add(
                    KeyboardButton("üîç –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data=f"analyze:detailed:{user_id}"),
                    KeyboardButton("üí° –£–ª—É—á—à–µ–Ω–∏—è", callback_data=f"analyze:improve:{user_id}"),
                    KeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç", callback_data=f"analyze:export:{user_id}"),
                    KeyboardButton("üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="action:analyze")
                )
                
                await bot.edit_text(
                    chat_id=chat_id,
                    msg_id=loading_msg.msg_id,
                    text=analysis_text,
                    parse_mode=ParseMode.MARKDOWNV2,
                    inline_keyboard_markup=keyboard
                )
            else:
                await bot.edit_text(
                    chat_id=chat_id,
                    msg_id=loading_msg.msg_id,
                    text="‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            await bot.send_text(chat_id, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞")

    async def _handle_code_review_command(self, bot: Bot, chat_id: str, user_id: str, code: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–≤—å—é –∫–æ–¥–∞"""
        if not code:
            await bot.send_text(
                chat_id,
                "‚ùì –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –¥–ª—è —Ä–µ–≤—å—é:\n`/review –≤–∞—à –∫–æ–¥`\n\n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ:\n`/review` - –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏",
                parse_mode=ParseMode.MARKDOWNV2
            )
            return
            
        try:
            loading_msg = await bot.send_text(chat_id, "üîç –ü—Ä–æ–≤–æ–∂—É —Ä–µ–≤—å—é –∫–æ–¥–∞...")
            
            response = await self.api_client.post(
                "/api/v1/ai/code-review",
                json={
                    "code": code,
                    "check_security": True,
                    "check_performance": True,
                    "check_style": True
                },
                headers={"Authorization": f"Bearer {self._get_internal_token()}"}
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
                score = data.get('overall_score', 0)
                if score >= 8:
                    score_emoji = "üü¢"
                elif score >= 6:
                    score_emoji = "üü°"
                else:
                    score_emoji = "üî¥"
                
                review_text = f"""{score_emoji} **Code Review Results**

üìä **–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞:** {score}/10

üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** {data.get('security_score', 'N/A')}/10
‚ö° **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {data.get('performance_score', 'N/A')}/10
üé® **–°—Ç–∏–ª—å –∫–æ–¥–∞:** {data.get('style_score', 'N/A')}/10

‚ö†Ô∏è **–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:** {len(data.get('issues', []))}

üîß **–ö—Ä–∏—Ç–∏—á–Ω—ã–µ:** {len([i for i in data.get('issues', []) if i.get('severity') == 'critical'])}
‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:** {len([i for i in data.get('issues', []) if i.get('severity') == 'warning'])}
üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:** {len([i for i in data.get('issues', []) if i.get('severity') == 'info'])}"""

                if data.get('issues'):
                    review_text += f"\n\nüîç **–¢–æ–ø –ø—Ä–æ–±–ª–µ–º—ã:**\n"
                    for issue in data['issues'][:3]:
                        review_text += f"‚Ä¢ {issue.get('description', 'No description')}\n"

                keyboard = InlineKeyboardMarkup(buttons_in_row=2)
                keyboard.add(
                    KeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data=f"review:detailed:{user_id}"),
                    KeyboardButton("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data=f"review:fix:{user_id}"),
                    KeyboardButton("üìä –ú–µ—Ç—Ä–∏–∫–∏", callback_data=f"review:metrics:{user_id}"),
                    KeyboardButton("üîÑ –ù–æ–≤–æ–µ —Ä–µ–≤—å—é", callback_data="action:review")
                )
                
                await bot.edit_text(
                    chat_id=chat_id,
                    msg_id=loading_msg.msg_id,
                    text=review_text,
                    parse_mode=ParseMode.MARKDOWNV2,
                    inline_keyboard_markup=keyboard
                )
            else:
                await bot.edit_text(
                    chat_id=chat_id,
                    msg_id=loading_msg.msg_id,
                    text="‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≤—å—é –∫–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≤—å—é –∫–æ–¥–∞: {e}")
            await bot.send_text(chat_id, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–≤—å—é")

    async def _handle_optimize_command(self, bot: Bot, chat_id: str, user_id: str, code: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞"""
        if not code:
            await bot.send_text(
                chat_id,
                "‚ùì –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:\n`/optimize –≤–∞—à –∫–æ–¥`",
                parse_mode=ParseMode.MARKDOWNV2
            )
            return
            
        try:
            loading_msg = await bot.send_text(chat_id, "‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é –∫–æ–¥...")
            
            response = await self.api_client.post(
                "/api/v1/ai/optimize",
                json={
                    "code": code,
                    "optimization_type": "performance",
                    "target": "speed"
                },
                headers={"Authorization": f"Bearer {self._get_internal_token()}"}
            )
            
            if response.status_code == 200:
                data = response.json()
                
                improvements = data.get('improvements', [])
                optimized_code = data.get('optimized_code', code)
                
                optimize_text = f"""‚ö° **–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏**

üìà **–£–ª—É—á—à–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã:** {len(improvements)}
üöÄ **–û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–∏—Ä–æ—Å—Ç:** {data.get('performance_gain', 'N/A')}%
üíæ **–≠–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏:** {data.get('memory_savings', 'N/A')}%

üîß **–û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:**"""

                for improvement in improvements[:3]:
                    optimize_text += f"\n‚Ä¢ {improvement.get('description', 'No description')}"

                keyboard = InlineKeyboardMarkup(buttons_in_row=2)
                keyboard.add(
                    KeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥", callback_data=f"optimize:code:{user_id}"),
                    KeyboardButton("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ", callback_data=f"optimize:compare:{user_id}"),
                    KeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"optimize:save:{user_id}"),
                    KeyboardButton("üîÑ –î—Ä—É–≥–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", callback_data="action:optimize")
                )
                
                await bot.edit_text(
                    chat_id=chat_id,
                    msg_id=loading_msg.msg_id,
                    text=optimize_text,
                    parse_mode=ParseMode.MARKDOWNV2,
                    inline_keyboard_markup=keyboard
                )
            else:
                await bot.edit_text(
                    chat_id=chat_id,
                    msg_id=loading_msg.msg_id,
                    text="‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            await bot.send_text(chat_id, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")

    async def _handle_docs_command(self, bot: Bot, chat_id: str, user_id: str, topic: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        if not topic:
            await bot.send_text(
                chat_id,
                "‚ùì –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:\n`/docs API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏`\n`/docs –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞`",
                parse_mode=ParseMode.MARKDOWNV2
            )
            return
            
        try:
            loading_msg = await bot.send_text(chat_id, "üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é...")
            
            response = await self.api_client.post(
                "/api/v1/documentation/generate",
                json={
                    "topic": topic,
                    "format": "markdown",
                    "include_examples": True,
                    "technical_level": "intermediate"
                },
                headers={"Authorization": f"Bearer {self._get_internal_token()}"}
            )
            
            if response.status_code == 200:
                data = response.json()
                
                docs_text = f"""üìö **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞**

üìñ **–¢–µ–º–∞:** {topic}
üìÑ **–°—Ç—Ä–∞–Ω–∏—Ü:** {data.get('pages_count', 1)}
üìä **–†–∞–∑–º–µ—Ä:** {data.get('word_count', 'N/A')} —Å–ª–æ–≤
üè∑Ô∏è **–§–æ—Ä–º–∞—Ç:** {data.get('format', 'Markdown')}

üéØ **–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**
{data.get('table_of_contents', '–ù–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ')}

‚úÖ **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**"""

                keyboard = InlineKeyboardMarkup(buttons_in_row=2)
                keyboard.add(
                    KeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å", callback_data=f"docs:show:{user_id}"),
                    KeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data=f"docs:export:{user_id}"),
                    KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"docs:edit:{user_id}"),
                    KeyboardButton("üîÑ –ù–æ–≤–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", callback_data="action:docs")
                )
                
                await bot.edit_text(
                    chat_id=chat_id,
                    msg_id=loading_msg.msg_id,
                    text=docs_text,
                    parse_mode=ParseMode.MARKDOWNV2,
                    inline_keyboard_markup=keyboard
                )
            else:
                await bot.edit_text(
                    chat_id=chat_id,
                    msg_id=loading_msg.msg_id,
                    text="‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
            await bot.send_text(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")

    async def _handle_template_command(self, bot: Bot, chat_id: str, user_id: str, template_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —à–∞–±–ª–æ–Ω–æ–≤"""
        if not template_type:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
            templates_text = """üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã**

üèóÔ∏è **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ:**
‚Ä¢ `/template rfc` - RFC –¥–æ–∫—É–º–µ–Ω—Ç
‚Ä¢ `/template api` - API —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è
‚Ä¢ `/template architecture` - –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ

üíª **–ö–æ–¥–æ–≤—ã–µ:**
‚Ä¢ `/template class` - –∫–ª–∞—Å—Å Python
‚Ä¢ `/template function` - —Ñ—É–Ω–∫—Ü–∏—è
‚Ä¢ `/template test` - unit —Ç–µ—Å—Ç

üìù **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:**
‚Ä¢ `/template readme` - README —Ñ–∞–π–ª
‚Ä¢ `/template guide` - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≥–∞–π–¥
‚Ä¢ `/template changelog` - changelog

üîß **DevOps:**
‚Ä¢ `/template docker` - Dockerfile
‚Ä¢ `/template ci` - CI/CD pipeline
‚Ä¢ `/template deploy` - deployment —Å–∫—Ä–∏–ø—Ç"""

            keyboard = InlineKeyboardMarkup(buttons_in_row=3)
            keyboard.add(
                KeyboardButton("üèóÔ∏è RFC", callback_data="template:rfc"),
                KeyboardButton("üîå API", callback_data="template:api"),
                KeyboardButton("üíª Class", callback_data="template:class"),
                KeyboardButton("üìù README", callback_data="template:readme"),
                KeyboardButton("üê≥ Docker", callback_data="template:docker"),
                KeyboardButton("üîß CI/CD", callback_data="template:ci")
            )
            
            await bot.send_text(
                chat_id,
                templates_text,
                parse_mode=ParseMode.MARKDOWNV2,
                inline_keyboard_markup=keyboard
            )
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω
            await self._generate_template(bot, chat_id, user_id, template_type)

    async def _handle_stats_command(self, bot: Bot, chat_id: str, user_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            context = self._get_or_create_user_context(user_id, chat_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response = await self.api_client.get(
                f"/api/v1/users/{user_id}/stats",
                headers={"Authorization": f"Bearer {self._get_internal_token()}"}
            )
            
            if response.status_code == 200:
                data = response.json()
                
                stats_text = f"""üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_id}
üìÖ **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:** {data.get('created_at', 'N/A')}
üéØ **–£—Ä–æ–≤–µ–Ω—å:** {data.get('user_level', '–ù–æ–≤–∏—á–æ–∫')}

üí¨ **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {data.get('messages_sent', 0)}
‚Ä¢ –ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {data.get('commands_used', 0)}
‚Ä¢ –í—Ä–µ–º—è –≤ —Å–∏—Å—Ç–µ–º–µ: {data.get('total_time', '0')} –º–∏–Ω

üîç **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π:**
‚Ä¢ –ü–æ–∏—Å–∫: {data.get('search_count', 0)} —Ä–∞–∑
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: {data.get('generation_count', 0)} —Ä–∞–∑
‚Ä¢ –ê–Ω–∞–ª–∏–∑: {data.get('analysis_count', 0)} —Ä–∞–∑
‚Ä¢ –†–µ–≤—å—é –∫–æ–¥–∞: {data.get('review_count', 0)} —Ä–∞–∑

‚≠ê **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**
{self._format_achievements(data.get('achievements', []))}

üèÜ **–†–µ–π—Ç–∏–Ω–≥:** #{data.get('user_rank', 'N/A')} –∏–∑ {data.get('total_users', 'N/A')}"""

                keyboard = InlineKeyboardMarkup(buttons_in_row=2)
                keyboard.add(
                    KeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats:detailed:{user_id}"),
                    KeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data=f"stats:achievements:{user_id}"),
                    KeyboardButton("üìä –°—Ä–∞–≤–Ω–∏—Ç—å", callback_data=f"stats:compare:{user_id}"),
                    KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats:refresh")
                )
                
                await bot.send_text(
                    chat_id,
                    stats_text,
                    parse_mode=ParseMode.MARKDOWNV2,
                    inline_keyboard_markup=keyboard
                )
            else:
                await bot.send_text(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await bot.send_text(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    def _format_achievements(self, achievements: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        if not achievements:
            return "üéØ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
        
        formatted = []
        for achievement in achievements[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø 5
            emoji = achievement.get('emoji', 'üèÖ')
            name = achievement.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            formatted.append(f"{emoji} {name}")
        
        return '\n'.join(formatted)

    async def _generate_template(self, bot: Bot, chat_id: str, user_id: str, template_type: str):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        try:
            loading_msg = await bot.send_text(chat_id, f"üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é {template_type} —à–∞–±–ª–æ–Ω...")
            
            response = await self.api_client.post(
                "/api/v1/templates/generate",
                json={
                    "template_type": template_type,
                    "include_comments": True,
                    "include_examples": True
                },
                headers={"Authorization": f"Bearer {self._get_internal_token()}"}
            )
            
            if response.status_code == 200:
                data = response.json()
                
                template_text = f"""üìù **{template_type.upper()} —à–∞–±–ª–æ–Ω –≥–æ—Ç–æ–≤**

üìÑ **–¢–∏–ø:** {data.get('type', template_type)}
üìè **–†–∞–∑–º–µ—Ä:** {data.get('lines_count', 'N/A')} —Å—Ç—Ä–æ–∫
üè∑Ô∏è **–Ø–∑—ã–∫:** {data.get('language', '–ù–µ —É–∫–∞–∑–∞–Ω')}

‚úÖ **–®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!**
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞."""

                keyboard = InlineKeyboardMarkup(buttons_in_row=2)
                keyboard.add(
                    KeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"template:view:{template_type}:{user_id}"),
                    KeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"template:copy:{template_type}:{user_id}"),
                    KeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data=f"template:export:{template_type}:{user_id}"),
                    KeyboardButton("‚úèÔ∏è –ö–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"template:customize:{template_type}:{user_id}")
                )
                
                await bot.edit_text(
                    chat_id=chat_id,
                    msg_id=loading_msg.msg_id,
                    text=template_text,
                    parse_mode=ParseMode.MARKDOWNV2,
                    inline_keyboard_markup=keyboard
                )
            else:
                await bot.edit_text(
                    chat_id=chat_id,
                    msg_id=loading_msg.msg_id,
                    text="‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
            await bot.send_text(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞")
    
    async def _process_ai_request(self, text: str, context: AIAssistantContext) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ AI API
        
        Args:
            text: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç AI
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π API
            if any(keyword in text.lower() for keyword in ["–Ω–∞–π–¥–∏", "–ø–æ–∏—Å–∫", "–∏—â–∏", "search"]):
                return await self._call_search_api(text, context)
            elif any(keyword in text.lower() for keyword in ["—Å–æ–∑–¥–∞–π", "–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "generate"]):
                return await self._call_generation_api(text, context)
            elif any(keyword in text.lower() for keyword in ["–∞–Ω–∞–ª–∏–∑", "–ø—Ä–æ–≤–µ—Ä—å", "analyze"]):
                return await self._call_analysis_api(text, context)
            else:
                # –û–±—â–∏–π —á–∞—Ç —Å AI
                return await self._call_chat_api(text, context)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ AI –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {
                "success": False,
                "error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
                "message": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ."
            }
    
    async def _call_search_api(self, query: str, context: AIAssistantContext) -> Dict[str, Any]:
        """
        –í—ã–∑–æ–≤ API –ø–æ–∏—Å–∫–∞
        """
        try:
            response = await self.api_client.post(
                "/api/v1/search",
                json={
                    "query": query,
                    "limit": 5,
                    "include_snippets": True
                },
                headers={"Authorization": f"Bearer {self._get_internal_token()}"}
            )
            
            if response.status_code == 200:
                data = response.json()
                return {
                    "success": True,
                    "type": "search_results",
                    "data": data,
                    "message": f"–ù–∞–π–¥–µ–Ω–æ {len(data.get('results', []))} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                }
            else:
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}"
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ search API: {e}")
            return {"success": False, "error": str(e)}
    
    async def _call_generation_api(self, prompt: str, context: AIAssistantContext) -> Dict[str, Any]:
        """
        –í—ã–∑–æ–≤ API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        try:
            response = await self.api_client.post(
                "/api/v1/generate",
                json={
                    "prompt": prompt,
                    "type": "general",
                    "context": context.user_preferences
                },
                headers={"Authorization": f"Bearer {self._get_internal_token()}"}
            )
            
            if response.status_code == 200:
                data = response.json()
                return {
                    "success": True,
                    "type": "generated_content",
                    "data": data,
                    "message": "–ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
                }
            else:
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code}"
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ generation API: {e}")
            return {"success": False, "error": str(e)}
    
    async def _call_analysis_api(self, text: str, context: AIAssistantContext) -> Dict[str, Any]:
        """
        –í—ã–∑–æ–≤ API –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            response = await self.api_client.post(
                "/api/v1/ai/ai_code_analysis",
                json={
                    "code": text,
                    "analysis_type": "comprehensive"
                },
                headers={"Authorization": f"Bearer {self._get_internal_token()}"}
            )
            
            if response.status_code == 200:
                data = response.json()
                return {
                    "success": True,
                    "type": "analysis_results",
                    "data": data,
                    "message": "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω"
                }
            else:
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {response.status_code}"
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ analysis API: {e}")
            return {"success": False, "error": str(e)}
    
    async def _call_chat_api(self, message: str, context: AIAssistantContext) -> Dict[str, Any]:
        """
        –í—ã–∑–æ–≤ chat API
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            history = [
                {"role": "user" if not msg.is_from_bot else "assistant", "content": msg.text}
                for msg in context.get_recent_messages(10)
                if msg.text
            ]
            
            response = await self.api_client.post(
                "/api/v1/ai/ai_advanced",
                json={
                    "message": message,
                    "history": history,
                    "stream": False
                },
                headers={"Authorization": f"Bearer {self._get_internal_token()}"}
            )
            
            if response.status_code == 200:
                data = response.json()
                return {
                    "success": True,
                    "type": "chat_response",
                    "data": data,
                    "message": data.get("response", "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
                }
            else:
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ —á–∞—Ç–∞: {response.status_code}"
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ chat API: {e}")
            return {"success": False, "error": str(e)}
    
    async def _send_ai_response(self, bot: Bot, chat_id: str, response: Dict[str, Any]):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        try:
            if not response.get("success"):
                await bot.send_text(
                    chat_id=chat_id,
                    text=f"‚ùå {response.get('error', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')}"
                )
                return
            
            response_type = response.get("type", "unknown")
            data = response.get("data", {})
            
            if response_type == "search_results":
                await self._send_search_results(bot, chat_id, data)
            elif response_type == "generated_content":
                await self._send_generated_content(bot, chat_id, data)
            elif response_type == "analysis_results":
                await self._send_analysis_results(bot, chat_id, data)
            elif response_type == "chat_response":
                await self._send_chat_response(bot, chat_id, data)
            else:
                await bot.send_text(
                    chat_id=chat_id,
                    text=f"‚úÖ {response.get('message', '–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞')}"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            await bot.send_text(
                chat_id=chat_id,
                text="üòî –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞."
            )
    
    def _get_or_create_user_context(self, user_id: str, chat_id: str) -> AIAssistantContext:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id not in self.user_contexts:
            self.user_contexts[user_id] = AIAssistantContext(
                user_id=user_id,
                chat_id=chat_id
            )
        return self.user_contexts[user_id]
    
    def _create_main_menu_keyboard(self) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        keyboard = InlineKeyboardMarkup(buttons_in_row=2)
        
        keyboard.add(
            KeyboardButton(
                text="üîç –ü–æ–∏—Å–∫",
                callback_data="action:search",
                style=StyleKeyboard.PRIMARY
            ),
            KeyboardButton(
                text="üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è",
                callback_data="action:generate", 
                style=StyleKeyboard.BASE
            ),
            KeyboardButton(
                text="üîß –ê–Ω–∞–ª–∏–∑",
                callback_data="action:analyze",
                style=StyleKeyboard.ATTENTION
            ),
            KeyboardButton(
                text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞",
                callback_data="action:help",
                style=StyleKeyboard.BASE
            )
        )
        
        return keyboard
    
    def _get_internal_token(self) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö API –≤—ã–∑–æ–≤–æ–≤
        """
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        # –í–æ–∑–º–æ–∂–Ω–æ, –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è service token
        return "internal-service-token"
    
    async def _handle_search_command(self, bot: Bot, chat_id: str, user_id: str, query: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞"""
        if not query:
            await bot.send_text(chat_id, "‚ùì –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞: `/search –≤–∞—à –∑–∞–ø—Ä–æ—Å`")
            return
            
        context = self._get_or_create_user_context(user_id, chat_id)
        response = await self._call_search_api(query, context)
        await self._send_ai_response(bot, chat_id, response)
    
    async def _handle_generate_command(self, bot: Bot, chat_id: str, user_id: str, prompt: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        if not prompt:
            await bot.send_text(chat_id, "‚ùì –£–∫–∞–∂–∏—Ç–µ —á—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å: `/generate –æ–ø–∏—Å–∞–Ω–∏–µ`")
            return
            
        context = self._get_or_create_user_context(user_id, chat_id)
        response = await self._call_generation_api(prompt, context)
        await self._send_ai_response(bot, chat_id, response)
    
    async def _handle_status_command(self, bot: Bot, chat_id: str, user_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            response = await self.api_client.get(
                "/api/v1/health",
                headers={"Authorization": f"Bearer {self._get_internal_token()}"}
            )
            
            if response.status_code == 200:
                data = response.json()
                status_text = f"üü¢ **–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç**\n\n–°—Ç–∞—Ç—É—Å: {data.get('status', 'unknown')}"
            else:
                status_text = "üî¥ **–°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**"
                
            await bot.send_text(chat_id, status_text, parse_mode=ParseMode.MARKDOWNV2)
            
        except Exception as e:
            await bot.send_text(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
    
    async def _handle_settings_command(self, bot: Bot, chat_id: str, user_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        context = self._get_or_create_user_context(user_id, chat_id)
        
        settings_text = f"""‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**

**ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** `{user_id}`
**ID —á–∞—Ç–∞:** `{chat_id}`
**–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è:** {context.active_session or '–ù–µ—Ç'}
**–°–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏:** {len(context.conversation_history)}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"""

        keyboard = InlineKeyboardMarkup(buttons_in_row=1)
        keyboard.add(
            KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="settings:clear_history"),
            KeyboardButton("üîÑ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è", callback_data="settings:new_session"),
            KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="settings:stats")
        )
        
        await bot.send_text(
            chat_id, 
            settings_text, 
            parse_mode=ParseMode.MARKDOWNV2,
            inline_keyboard_markup=keyboard
        )
    
    async def _process_callback_action(self, callback_data: str, chat_id: str, user_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–µ–π—Å—Ç–≤–∏–π"""
        try:
            parts = callback_data.split(':')
            action = parts[0]
            
            if action == "action":
                # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                sub_action = parts[1]
                await self._handle_main_action(sub_action, chat_id, user_id)
                
            elif action == "analyze":
                # –î–µ–π—Å—Ç–≤–∏—è –∞–Ω–∞–ª–∏–∑–∞
                sub_action = parts[1]
                target_user = parts[2] if len(parts) > 2 else user_id
                await self._handle_analyze_action(sub_action, chat_id, user_id, target_user)
                
            elif action == "review":
                # –î–µ–π—Å—Ç–≤–∏—è —Ä–µ–≤—å—é –∫–æ–¥–∞
                sub_action = parts[1]
                target_user = parts[2] if len(parts) > 2 else user_id
                await self._handle_review_action(sub_action, chat_id, user_id, target_user)
                
            elif action == "optimize":
                # –î–µ–π—Å—Ç–≤–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                sub_action = parts[1]
                target_user = parts[2] if len(parts) > 2 else user_id
                await self._handle_optimize_action(sub_action, chat_id, user_id, target_user)
                
            elif action == "docs":
                # –î–µ–π—Å—Ç–≤–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                sub_action = parts[1]
                target_user = parts[2] if len(parts) > 2 else user_id
                await self._handle_docs_action(sub_action, chat_id, user_id, target_user)
                
            elif action == "template":
                # –î–µ–π—Å—Ç–≤–∏—è —à–∞–±–ª–æ–Ω–æ–≤
                if len(parts) >= 2:
                    sub_action = parts[1]
                    template_type = parts[2] if len(parts) > 2 else None
                    target_user = parts[3] if len(parts) > 3 else user_id
                    await self._handle_template_action(sub_action, template_type, chat_id, user_id, target_user)
                
            elif action == "stats":
                # –î–µ–π—Å—Ç–≤–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                sub_action = parts[1]
                target_user = parts[2] if len(parts) > 2 else user_id
                await self._handle_stats_action(sub_action, chat_id, user_id, target_user)
                
            elif action == "settings":
                # –î–µ–π—Å—Ç–≤–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
                sub_action = parts[1]
                await self._handle_settings_action(sub_action, chat_id, user_id)
                
            else:
                logger.warning(f"Unknown callback action: {action}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {callback_data}: {e}")

    async def _handle_main_action(self, action: str, chat_id: str, user_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        prompts = {
            "search": "üîç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞:\n–ù–∞–ø—Ä–∏–º–µ—Ä: `JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è` –∏–ª–∏ `Docker deployment`",
            "generate": "üìù –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n–ù–∞–ø—Ä–∏–º–µ—Ä: `RFC –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤` –∏–ª–∏ `API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è`",
            "analyze": "üîß –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n–ú–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥, —Ç–µ–∫—Å—Ç—ã, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É",
            "optimize": "‚ö° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:\n–£–ª—É—á—à—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ",
            "docs": "üìö –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:\n–ù–∞–ø—Ä–∏–º–µ—Ä: `–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞` –∏–ª–∏ `API Reference`",
            "template": "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ `/template` –¥–ª—è —Å–ø–∏—Å–∫–∞",
            "stats": "üìä –ü–æ–∫–∞–∑—ã–≤–∞—é –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...",
            "settings": "‚öôÔ∏è –û—Ç–∫—Ä—ã–≤–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...",
            "about": "‚ÑπÔ∏è **–û —Å–∏—Å—Ç–µ–º–µ AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç**\n\n–í–µ—Ä—Å–∏—è: 2.0 Enhanced\n–°—Ç–∞—Ç—É—Å: ‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞\n–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: 15+ AI —Ñ—É–Ω–∫—Ü–∏–π\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –î–µ–∫–∞–±—Ä—å 2024"
        }
        
        await self.bot.send_text(
            chat_id=chat_id,
            text=prompts.get(action, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
            parse_mode=ParseMode.MARKDOWNV2
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if action == "stats":
            await self._handle_stats_command(self.bot, chat_id, user_id)
        elif action == "settings":
            await self._handle_settings_command(self.bot, chat_id, user_id)

    async def _handle_analyze_action(self, action: str, chat_id: str, user_id: str, target_user: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–Ω–∞–ª–∏–∑–∞"""
        if action == "detailed":
            await self.bot.send_text(
                chat_id,
                "üìä **–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑**\n\n–ó–∞–≥—Ä—É–∂–∞—é –ø–æ–¥—Ä–æ–±–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏...",
                parse_mode=ParseMode.MARKDOWNV2
            )
        elif action == "improve":
            await self.bot.send_text(
                chat_id,
                "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é**\n\n–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...",
                parse_mode=ParseMode.MARKDOWNV2
            )
        elif action == "export":
            await self.bot.send_text(
                chat_id,
                "üì§ **–≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞**\n\n–§–æ—Ä–º–∞—Ç: PDF, Markdown, JSON\n–û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ email...",
                parse_mode=ParseMode.MARKDOWNV2
            )

    async def _handle_review_action(self, action: str, chat_id: str, user_id: str, target_user: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Ä–µ–≤—å—é"""
        if action == "detailed":
            await self.bot.send_text(
                chat_id,
                "üìù **–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Ä–µ–≤—å—é**\n\n–ü–æ–∫–∞–∑—ã–≤–∞—é –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...",
                parse_mode=ParseMode.MARKDOWNV2
            )
        elif action == "fix":
            await self.bot.send_text(
                chat_id,
                "üîß **–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è**\n\n–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∫–æ–¥–∞...",
                parse_mode=ParseMode.MARKDOWNV2
            )
        elif action == "metrics":
            await self.bot.send_text(
                chat_id,
                "üìä **–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞**\n\n–¶–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å, –ø–æ–∫—Ä—ã—Ç–∏–µ, –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ...",
                parse_mode=ParseMode.MARKDOWNV2
            )

    async def _handle_optimize_action(self, action: str, chat_id: str, user_id: str, target_user: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        if action == "code":
            await self.bot.send_text(
                chat_id,
                "üíª **–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥**\n\n–ü–æ–∫–∞–∑—ã–≤–∞—é —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏...",
                parse_mode=ParseMode.MARKDOWNV2
            )
        elif action == "compare":
            await self.bot.send_text(
                chat_id,
                "üîÑ **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ/–ø–æ—Å–ª–µ**\n\n–í–∏–∑—É–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –º–µ—Ç—Ä–∏–∫...",
                parse_mode=ParseMode.MARKDOWNV2
            )
        elif action == "save":
            await self.bot.send_text(
                chat_id,
                "üíæ **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞**\n\n–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å",
                parse_mode=ParseMode.MARKDOWNV2
            )

    async def _handle_docs_action(self, action: str, chat_id: str, user_id: str, target_user: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        if action == "show":
            await self.bot.send_text(
                chat_id,
                "üìÑ **–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏**\n\n–ü–æ–∫–∞–∑—ã–≤–∞—é —Å–æ–∑–¥–∞–Ω–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é...",
                parse_mode=ParseMode.MARKDOWNV2
            )
        elif action == "export":
            await self.bot.send_text(
                chat_id,
                "üì§ **–≠–∫—Å–ø–æ—Ä—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏**\n\n–î–æ—Å—Ç—É–ø–Ω—ã —Ñ–æ—Ä–º–∞—Ç—ã: Markdown, PDF, HTML, Confluence",
                parse_mode=ParseMode.MARKDOWNV2
            )
        elif action == "edit":
            await self.bot.send_text(
                chat_id,
                "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**\n\n–û—Ç–∫—Ä—ã–≤–∞—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...",
                parse_mode=ParseMode.MARKDOWNV2
            )

    async def _handle_template_action(self, action: str, template_type: Optional[str], chat_id: str, user_id: str, target_user: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —à–∞–±–ª–æ–Ω–æ–≤"""
        if action == "view" and template_type:
            await self._send_bot_message(
                chat_id,
                f"üëÅÔ∏è **–ü—Ä–æ—Å–º–æ—Ç—Ä {template_type} —à–∞–±–ª–æ–Ω–∞**\n\n–ü–æ–∫–∞–∑—ã–≤–∞—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞...",
            )
        elif action == "copy" and template_type:
            await self._send_bot_message(
                chat_id,
                f"üìã **–®–∞–±–ª–æ–Ω {template_type} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω**\n\n–ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ!",
            )
        elif action == "export" and template_type:
            await self._send_bot_message(
                chat_id,
                f"üì§ **–≠–∫—Å–ø–æ—Ä—Ç {template_type}**\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª –Ω–∞ email –∏–ª–∏ –≤ —á–∞—Ç...",
            )
        elif action == "customize" and template_type:
            await self._send_bot_message(
                chat_id,
                f"‚úèÔ∏è **–ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è {template_type}**\n\n–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é —à–∞–±–ª–æ–Ω –ø–æ–¥ –≤–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è...",
            )
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫
        elif template_type in ["rfc", "api", "class", "readme", "docker", "ci"]:
            await self._generate_template_from_callback(chat_id, user_id, template_type)

    async def _send_bot_message(self, chat_id: str, text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É —á–µ—Ä–µ–∑ service –∏–ª–∏ adapter
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            logger.info(f"Sending message to {chat_id}: {text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def _generate_template_from_callback(self, chat_id: str, user_id: str, template_type: str):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ –∏–∑ callback"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞
            await self._send_bot_message(chat_id, f"üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é {template_type} —à–∞–±–ª–æ–Ω...")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")

    async def _handle_stats_action(self, action: str, chat_id: str, user_id: str, target_user: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if action == "detailed":
            await self.bot.send_text(
                chat_id,
                "üìà **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n–ü–æ–∫–∞–∑—ã–≤–∞—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è...",
                parse_mode=ParseMode.MARKDOWNV2
            )
        elif action == "achievements":
            await self.bot.send_text(
                chat_id,
                "üèÜ **–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è**\n\n–ü–æ–∫–∞–∑—ã–≤–∞—é –≤—Å–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å...",
                parse_mode=ParseMode.MARKDOWNV2
            )
        elif action == "compare":
            await self.bot.send_text(
                chat_id,
                "üìä **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏**\n\n–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
                parse_mode=ParseMode.MARKDOWNV2
            )
        elif action == "refresh":
            await self._handle_stats_command(self.bot, chat_id, user_id)

    async def _handle_settings_action(self, action: str, chat_id: str, user_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if action == "clear_history":
            context = self._get_or_create_user_context(user_id, chat_id)
            context.conversation_history.clear()
            await self.bot.send_text(
                chat_id,
                "üóëÔ∏è **–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞**\n\n–í—Å—è –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ —É–¥–∞–ª–µ–Ω–∞",
                parse_mode=ParseMode.MARKDOWNV2
            )
        elif action == "new_session":
            context = self._get_or_create_user_context(user_id, chat_id)
            context.active_session = f"session_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            await self.bot.send_text(
                chat_id,
                f"üîÑ **–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞**\n\nID: `{context.active_session}`",
                parse_mode=ParseMode.MARKDOWNV2
            )
        elif action == "stats":
            await self._handle_stats_command(self.bot, chat_id, user_id)
    
    async def _send_search_results(self, bot: Bot, chat_id: str, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        results = data.get("results", [])
        if not results:
            await bot.send_text(chat_id, "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        text = "üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:**\n\n"
        for i, result in enumerate(results[:5], 1):
            title = result.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            score = result.get("score", 0)
            text += f"{i}. **{title}** (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.2f})\n"
            
        await bot.send_text(chat_id, text, parse_mode=ParseMode.MARKDOWNV2)
    
    async def _send_generated_content(self, bot: Bot, chat_id: str, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        content = data.get("content", "–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        await bot.send_text(chat_id, f"üìù **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:**\n\n{content}")
    
    async def _send_analysis_results(self, bot: Bot, chat_id: str, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        analysis = data.get("analysis", "–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        await bot.send_text(chat_id, f"üîß **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:**\n\n{analysis}")
    
    async def _send_chat_response(self, bot: Bot, chat_id: str, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–∞—Ç–∞"""
        response = data.get("response", "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")
        await bot.send_text(chat_id, response)
    
    async def _check_vk_user_access(self, user_id: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ VK –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK Teams
            
        Returns:
            True –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å–Ω–∞—á–∞–ª–∞
            cache_key = f"vk_access_{user_id}"
            if cache_key in self._user_cache:
                cache_data = self._user_cache[cache_key]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫—ç—à –Ω–µ —É—Å—Ç–∞—Ä–µ–ª (5 –º–∏–Ω—É—Ç)
                if time.time() - cache_data.get("timestamp", 0) < 300:
                    return cache_data.get("has_access", False)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            try:
                from app.security.unified_auth import unified_auth_service
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
                user = await unified_auth_service.authenticate_vk_teams_user(user_id)
                has_access = user is not None
                
                # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self._user_cache[cache_key] = {
                    "has_access": has_access,
                    "user": user,
                    "timestamp": time.time()
                }
                
                logger.info(f"VK Teams user {user_id} access check: {has_access}")
                return has_access
                
            except ImportError:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –µ—Å–ª–∏ unified_auth –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                response = await self.api_client.get(
                    f"/api/v1/auth/vk/check-access/{user_id}",
                    headers={"Authorization": f"Bearer {self._get_internal_token()}"}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    has_access = data.get("has_access", False)
                    
                    # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    self._user_cache[cache_key] = {
                        "has_access": has_access,
                        "timestamp": time.time()
                    }
                    
                    logger.info(f"VK user {user_id} access check (fallback): {has_access}")
                    return has_access
                else:
                    logger.warning(f"VK access check failed for user {user_id}: {response.status_code}")
                    return False
                
        except Exception as e:
            logger.error(f"Error checking VK user access for {user_id}: {e}")
            return False
    
    async def _send_access_denied_message(self, bot: Bot, chat_id: str, user_id: str):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            chat_id: ID —á–∞—Ç–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            access_denied_text = """üö´ **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç VK –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.

**–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**
1. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ VK OAuth
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤–∞—à VK ID –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

**–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:**
‚Ä¢ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à VK ID: `{user_id}`

–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! üôè"""
            
            await bot.send_text(
                chat_id=chat_id,
                text=access_denied_text.format(user_id=user_id),
                parse_mode=ParseMode.MARKDOWNV2
            )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∫–∞–∑–æ–≤
            if self.stats:
                self.stats.record_error("access_denied", f"VK user {user_id} denied access", {
                    "user_id": user_id,
                    "chat_id": chat_id
                })
            
        except Exception as e:
            logger.error(f"Error sending access denied message: {e}")
            # Fallback –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_text(
                chat_id=chat_id,
                text="üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞
_bot_adapter: Optional[VKTeamsBotAdapter] = None


async def get_vk_teams_bot_adapter() -> VKTeamsBotAdapter:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ VK Teams Bot Adapter
    
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä VKTeamsBotAdapter
    """
    global _bot_adapter
    
    if _bot_adapter is None:
        _bot_adapter = VKTeamsBotAdapter()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        from infrastructure.vk_teams.application.bot_service import get_vk_teams_bot_service
        bot_service = await get_vk_teams_bot_service()
        _bot_adapter.stats = bot_service.stats
    
    return _bot_adapter 