version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai_assistant_postgres
    environment:
      POSTGRES_DB: ai_assistant
      POSTGRES_USER: ai_user
      POSTGRES_PASSWORD: ai_password_secure_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_user -d ai_assistant"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai_assistant_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai_network

  # AI Assistant Backend (simplified for load testing)
  backend:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.load-test
    container_name: ai_assistant_backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://ai_user:ai_password_secure_2024@postgres:5432/ai_assistant
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - DEBUG=false
      - SECRET_KEY=load-test-secret-key-12345
      - SKIP_QDRANT=true
      - PYTHONPATH=/app
    volumes:
      - ../../logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ai_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16 