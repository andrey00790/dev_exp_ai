"""
Deep Research API - REST –∏ WebSocket endpoints –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏,
–≤–∫–ª—é—á–∞—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
"""

import asyncio
import json
import logging
from typing import Any, Dict, List, Optional

from fastapi import (APIRouter, Depends, HTTPException, WebSocket,
                     WebSocketDisconnect)
from pydantic import BaseModel, Field

from app.security.auth import get_current_user
from domain.core.deep_research_engine import (ResearchSession, ResearchStep,
                                              get_deep_research_engine)

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/deep-research", tags=["Deep Research"])

# =============================================================================
# PYDANTIC –ú–û–î–ï–õ–ò
# =============================================================================


class StartResearchRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—á–∞–ª–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""

    query: str = Field(
        ..., min_length=10, max_length=1000, description="–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å"
    )
    max_steps: Optional[int] = Field(
        default=7, ge=3, le=10, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤"
    )
    user_context: Optional[Dict[str, Any]] = Field(
        default=None, description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )


class ResearchSessionResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Å—Å–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""

    session_id: str
    original_query: str
    research_goal: str
    status: str
    current_step: int
    max_steps: int
    created_at: str
    metadata: Dict[str, Any] = Field(default_factory=dict)


class ResearchStepResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —à–∞–≥–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""

    step_id: str
    step_type: str
    title: str
    description: str
    result: str
    confidence: float
    duration: float
    sources_count: int
    status: str
    created_at: str
    completed_at: Optional[str] = None
    next_steps: List[str] = Field(default_factory=list)


class ResearchStatusResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""

    session_id: str
    status: str
    current_step: int
    total_steps: int
    progress: float
    duration: float
    overall_confidence: float
    total_sources: int
    final_result: Optional[str] = None


class ResearchEngineStatusResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –¥–≤–∏–∂–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"""

    engine_status: str
    active_sessions: int
    metrics: Dict[str, Any]
    configuration: Dict[str, Any]
    last_updated: str


# =============================================================================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï WEBSOCKET –°–û–ï–î–ò–ù–ï–ù–ò–Ø–ú–ò
# =============================================================================


class WebSocketManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""

    def __init__(self):
        # session_id -> List[WebSocket]
        self.active_connections: Dict[str, List[WebSocket]] = {}

    async def connect(self, websocket: WebSocket, session_id: str):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket –∫ —Å–µ—Å—Å–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        await websocket.accept()

        if session_id not in self.active_connections:
            self.active_connections[session_id] = []

        self.active_connections[session_id].append(websocket)
        logger.info(f"üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Å—Å–∏–∏ {session_id}")

    def disconnect(self, websocket: WebSocket, session_id: str):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket"""
        if session_id in self.active_connections:
            if websocket in self.active_connections[session_id]:
                self.active_connections[session_id].remove(websocket)

            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
            if not self.active_connections[session_id]:
                del self.active_connections[session_id]

        logger.info(f"üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Å—Å–∏–∏ {session_id}")

    async def broadcast_to_session(self, session_id: str, message: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫ —Å–µ—Å—Å–∏–∏ WebSocket'–∞–º"""
        if session_id not in self.active_connections:
            return

        disconnected = []
        for websocket in self.active_connections[session_id]:
            try:
                await websocket.send_text(json.dumps(message))
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                disconnected.append(websocket)

        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for websocket in disconnected:
            self.disconnect(websocket, session_id)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
websocket_manager = WebSocketManager()

# =============================================================================
# REST API ENDPOINTS
# =============================================================================


@router.post("/start", response_model=ResearchSessionResponse)
async def start_research(
    request: StartResearchRequest, current_user: Dict = Depends(get_current_user)
):
    """
    –ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ

    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.
    –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ real-time –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
    """
    try:
        engine = await get_deep_research_engine()

        session = await engine.start_research(
            query=request.query,
            user_id=current_user.get("user_id", ""),
            max_steps=request.max_steps,
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if request.user_context:
            session.metadata.update(request.user_context)

        logger.info(f"üî¨ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {session.session_id}")

        return ResearchSessionResponse(
            session_id=session.session_id,
            original_query=session.original_query,
            research_goal=session.research_goal,
            status=session.status.value,
            current_step=session.current_step,
            max_steps=session.max_steps,
            created_at=session.created_at.isoformat(),
            metadata=session.metadata,
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {e}")
        raise HTTPException(
            status_code=500, detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {str(e)}"
        )


@router.post("/execute/{session_id}")
async def execute_research(
    session_id: str, current_user: Dict = Depends(get_current_user)
):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è

    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã
    —á–µ—Ä–µ–∑ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ real-time.
    """
    try:
        engine = await get_deep_research_engine()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        session_status = await engine.get_session_status(session_id)
        if not session_status:
            raise HTTPException(
                status_code=404, detail="–°–µ—Å—Å–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
        asyncio.create_task(_execute_research_background(session_id))

        return {"message": "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ", "session_id": session_id}

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {e}")
        raise HTTPException(
            status_code=500, detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {str(e)}"
        )


async def _execute_research_background(session_id: str):
    """–§–æ–Ω–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ WebSocket"""
    try:
        engine = await get_deep_research_engine()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
        await websocket_manager.broadcast_to_session(
            session_id,
            {
                "type": "research_started",
                "session_id": session_id,
                "timestamp": asyncio.get_event_loop().time(),
            },
        )

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        async for step in engine.execute_research(session_id):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∫–∞–∂–¥–æ–º—É —à–∞–≥—É
            step_data = {
                "type": "step_completed",
                "session_id": session_id,
                "step": {
                    "step_id": step.step_id,
                    "step_type": step.step_type.value,
                    "title": step.title,
                    "description": step.description,
                    "result": step.result,
                    "confidence": step.confidence,
                    "duration": step.duration,
                    "sources_count": len(step.sources),
                    "status": step.status.value,
                    "next_steps": step.next_steps,
                },
                "timestamp": asyncio.get_event_loop().time(),
            }

            await websocket_manager.broadcast_to_session(session_id, step_data)

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        final_status = await engine.get_session_status(session_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        await websocket_manager.broadcast_to_session(
            session_id,
            {
                "type": "research_completed",
                "session_id": session_id,
                "final_status": final_status,
                "timestamp": asyncio.get_event_loop().time(),
            },
        )

        logger.info(f"‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {session_id}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è {session_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await websocket_manager.broadcast_to_session(
            session_id,
            {
                "type": "research_error",
                "session_id": session_id,
                "error": str(e),
                "timestamp": asyncio.get_event_loop().time(),
            },
        )


@router.get("/status/{session_id}", response_model=ResearchStatusResponse)
async def get_research_status(
    session_id: str, current_user: Dict = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    try:
        engine = await get_deep_research_engine()
        status = await engine.get_session_status(session_id)

        if not status:
            raise HTTPException(
                status_code=404, detail="–°–µ—Å—Å–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )

        return ResearchStatusResponse(**status)

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        raise HTTPException(
            status_code=500, detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {str(e)}"
        )


@router.delete("/cancel/{session_id}")
async def cancel_research(
    session_id: str, current_user: Dict = Depends(get_current_user)
):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"""
    try:
        engine = await get_deep_research_engine()
        success = await engine.cancel_research(session_id)

        if not success:
            raise HTTPException(
                status_code=404, detail="–°–µ—Å—Å–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
        await websocket_manager.broadcast_to_session(
            session_id,
            {
                "type": "research_cancelled",
                "session_id": session_id,
                "timestamp": asyncio.get_event_loop().time(),
            },
        )

        return {"message": "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", "session_id": session_id}

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {e}")
        raise HTTPException(
            status_code=500, detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {str(e)}"
        )


@router.get("/engine/status", response_model=ResearchEngineStatusResponse)
async def get_engine_status(current_user: Dict = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"""
    try:
        engine = await get_deep_research_engine()
        status = await engine.get_engine_status()

        return ResearchEngineStatusResponse(**status)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–≤–∏–∂–∫–∞: {e}")
        raise HTTPException(
            status_code=500, detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞: {str(e)}"
        )


@router.get("/sessions")
async def list_user_sessions(current_user: Dict = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        engine = await get_deep_research_engine()
        user_id = current_user.get("user_id", "")

        user_sessions = []
        for session in engine.active_sessions.values():
            if session.user_id == user_id:
                user_sessions.append(
                    {
                        "session_id": session.session_id,
                        "original_query": session.original_query,
                        "status": session.status.value,
                        "created_at": session.created_at.isoformat(),
                        "duration": session.duration,
                    }
                )

        return {"sessions": user_sessions, "total": len(user_sessions)}

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π: {e}")
        raise HTTPException(
            status_code=500, detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π: {str(e)}"
        )


# =============================================================================
# WEBSOCKET ENDPOINT
# =============================================================================


@router.websocket("/ws/{session_id}")
async def websocket_research_updates(websocket: WebSocket, session_id: str):
    """
    WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è

    –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —ç—Ç–æ–º—É endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ:
    - –ù–∞—á–∞–ª–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
    - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    - –û—à–∏–±–∫–∞—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    await websocket_manager.connect(websocket, session_id)

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await websocket.send_text(
            json.dumps(
                {
                    "type": "connection_established",
                    "session_id": session_id,
                    "message": "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è...",
                    "timestamp": asyncio.get_event_loop().time(),
                }
            )
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
        engine = await get_deep_research_engine()
        status = await engine.get_session_status(session_id)

        if status:
            await websocket.send_text(
                json.dumps(
                    {
                        "type": "session_status",
                        "session_id": session_id,
                        "status": status,
                        "timestamp": asyncio.get_event_loop().time(),
                    }
                )
            )

        # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        while True:
            try:
                # –û–∂–∏–¥–∞–µ–º ping –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                data = await websocket.receive_text()
                message = json.loads(data)

                if message.get("type") == "ping":
                    await websocket.send_text(
                        json.dumps(
                            {
                                "type": "pong",
                                "timestamp": asyncio.get_event_loop().time(),
                            }
                        )
                    )

            except WebSocketDisconnect:
                break
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                break

    except WebSocketDisconnect:
        pass
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
    finally:
        websocket_manager.disconnect(websocket, session_id)


# =============================================================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´
# =============================================================================


@router.get("/health")
async def health_check():
    """Health check –¥–ª—è Deep Research API"""
    try:
        engine = await get_deep_research_engine()
        status = await engine.get_engine_status()

        return {
            "status": "healthy",
            "service": "deep_research_api",
            "engine_status": status["engine_status"],
            "active_sessions": status["active_sessions"],
            "timestamp": asyncio.get_event_loop().time(),
        }
    except Exception as e:
        logger.error(f"‚ùå Health check failed: {e}")
        raise HTTPException(status_code=503, detail="Service unavailable")
