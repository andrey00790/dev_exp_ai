#!/usr/bin/env python3
"""
üîç AI Assistant - –°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤—ã–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 scripts/check_dev_environment.py
    python3 scripts/check_dev_environment.py --fix  # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
    python3 scripts/check_dev_environment.py --verbose  # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
"""

import sys
import os
import subprocess
import platform
import json
import urllib.request
import urllib.error
import socket
from pathlib import Path
from typing import Dict, List, Tuple, Optional
import argparse

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    RESET = '\033[0m'

class EnvironmentChecker:
    def __init__(self, verbose: bool = False, fix: bool = False):
        self.verbose = verbose
        self.fix = fix
        self.results = []
        self.errors = []
        self.warnings = []
        
    def log(self, message: str, level: str = "INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–∞–º–∏"""
        if level == "SUCCESS":
            print(f"{Colors.GREEN}‚úÖ {message}{Colors.RESET}")
        elif level == "ERROR":
            print(f"{Colors.RED}‚ùå {message}{Colors.RESET}")
            self.errors.append(message)
        elif level == "WARNING":
            print(f"{Colors.YELLOW}‚ö†Ô∏è  {message}{Colors.RESET}")
            self.warnings.append(message)
        elif level == "INFO":
            print(f"{Colors.BLUE}‚ÑπÔ∏è  {message}{Colors.RESET}")
        elif level == "VERBOSE" and self.verbose:
            print(f"{Colors.CYAN}üîç {message}{Colors.RESET}")
            
    def check_command(self, command: str, expected_text: str = None) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            result = subprocess.run(
                command.split(), 
                capture_output=True, 
                text=True, 
                timeout=10
            )
            if result.returncode == 0:
                output = result.stdout.strip()
                if expected_text and expected_text not in output:
                    return False, f"Expected '{expected_text}' not found in output"
                return True, output
            else:
                return False, result.stderr.strip()
        except subprocess.TimeoutExpired:
            return False, "Command timed out"
        except FileNotFoundError:
            return False, "Command not found"
        except Exception as e:
            return False, str(e)
            
    def check_port(self, host: str, port: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(2)
                result = s.connect_ex((host, port))
                return result == 0
        except Exception:
            return False
            
    def check_http_endpoint(self, url: str) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP endpoint"""
        try:
            with urllib.request.urlopen(url, timeout=5) as response:
                status = response.getcode()
                if status == 200:
                    return True, "OK"
                else:
                    return False, f"HTTP {status}"
        except urllib.error.URLError as e:
            return False, str(e)
        except Exception as e:
            return False, str(e)
            
    def check_file_exists(self, filepath: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        return Path(filepath).exists()
        
    def check_system_info(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        self.log(f"{Colors.BOLD}üñ•Ô∏è  –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø{Colors.RESET}")
        
        # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        os_info = platform.system()
        os_version = platform.release()
        arch = platform.machine()
        self.log(f"–û–°: {os_info} {os_version} ({arch})", "INFO")
        
        # Python –≤–µ—Ä—Å–∏—è
        python_version = sys.version.split()[0]
        if python_version >= "3.11":
            self.log(f"Python: {python_version}", "SUCCESS")
        elif python_version >= "3.9":
            self.log(f"Python: {python_version} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 3.11+)", "WARNING")
        else:
            self.log(f"Python: {python_version} (—Ç—Ä–µ–±—É–µ—Ç—Å—è 3.11+)", "ERROR")
            
        # –î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å
        if hasattr(os, 'sysconf'):
            try:
                memory_mb = os.sysconf('SC_PAGE_SIZE') * os.sysconf('SC_PHYS_PAGES') / (1024**2)
                if memory_mb >= 8192:
                    self.log(f"RAM: {memory_mb:.0f} MB", "SUCCESS")
                elif memory_mb >= 4096:
                    self.log(f"RAM: {memory_mb:.0f} MB (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 8GB+)", "WARNING")
                else:
                    self.log(f"RAM: {memory_mb:.0f} MB (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)", "ERROR")
            except:
                self.log("RAM: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å", "WARNING")
                
    def check_required_tools(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        self.log(f"\n{Colors.BOLD}üõ†Ô∏è  –ù–ï–û–ë–•–û–î–ò–ú–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´{Colors.RESET}")
        
        tools = [
            ("python3", "Python 3"),
            ("pip", "Python Package Manager"),
            ("git", "Version Control"),
            ("docker", "Docker Container Runtime"),
            ("docker-compose", "Docker Compose"),
            ("node", "Node.js Runtime"),
            ("npm", "Node Package Manager"),
        ]
        
        for command, description in tools:
            success, output = self.check_command(f"{command} --version")
            if success:
                version = output.split('\n')[0]
                self.log(f"{description}: {version}", "SUCCESS")
                self.log(f"  –ö–æ–º–∞–Ω–¥–∞: {command}", "VERBOSE")
            else:
                self.log(f"{description}: –ù–ï –ù–ê–ô–î–ï–ù", "ERROR")
                if self.fix:
                    self.log(f"  –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: —Å–º. docs/LOCAL_DEVELOPMENT_GUIDE.md", "INFO")
                    
    def check_project_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        self.log(f"\n{Colors.BOLD}üìÅ –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê{Colors.RESET}")
        
        required_files = [
            "app/main.py",
            "app/__init__.py", 
            "requirements.txt", 
            "docker-compose.yml",
            "frontend/package.json",
            "frontend/src/App.tsx",
            ".env.example",
            "openapi.yaml"
        ]
        
        for file_path in required_files:
            if self.check_file_exists(file_path):
                self.log(f"‚úì {file_path}", "SUCCESS")
            else:
                self.log(f"‚úó {file_path}", "ERROR")
                
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        required_dirs = [
            "app/api/v1",
            "app/models", 
            "app/services",
            "frontend/src/components",
            "tests",
            "docs"
        ]
        
        for dir_path in required_dirs:
            if Path(dir_path).is_dir():
                self.log(f"‚úì {dir_path}/", "SUCCESS")
            else:
                self.log(f"‚úó {dir_path}/", "ERROR")
                
    def check_python_environment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.log(f"\n{Colors.BOLD}üêç PYTHON –û–ö–†–£–ñ–ï–ù–ò–ï{Colors.RESET}")
        
        # –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
            self.log("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: –ê–ö–¢–ò–í–ù–û", "SUCCESS")
            self.log(f"  –ü—É—Ç—å: {sys.prefix}", "VERBOSE")
        else:
            self.log("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: –ù–ï –ê–ö–¢–ò–í–ù–û", "WARNING")
            if self.fix:
                self.log("  –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ: source venv/bin/activate", "INFO")
                
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        required_packages = [
            ("fastapi", "FastAPI framework"),
            ("uvicorn", "ASGI server"),
            ("sqlalchemy", "ORM"),
            ("psycopg2-binary", "PostgreSQL driver"),
            ("redis", "Redis client"),
            ("qdrant-client", "Qdrant vector database client"),
            ("pytest", "Testing framework"),
        ]
        
        for package, description in required_packages:
            try:
                __import__(package.replace('-', '_'))
                # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é
                try:
                    import pkg_resources
                    version = pkg_resources.get_distribution(package).version
                    self.log(f"{description}: {version}", "SUCCESS")
                except:
                    self.log(f"{description}: –£–°–¢–ê–ù–û–í–õ–ï–ù", "SUCCESS")
            except ImportError:
                self.log(f"{description}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù", "ERROR")
                if self.fix:
                    self.log(f"  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: pip install {package}", "INFO")
                    
    def check_docker_services(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.log(f"\n{Colors.BOLD}üê≥ DOCKER –°–ï–†–í–ò–°–´{Colors.RESET}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
        success, output = self.check_command("docker --version")
        if not success:
            self.log("Docker –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
        success, output = self.check_command("docker-compose --version")
        if not success:
            self.log("Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        success, output = self.check_command("docker-compose ps")
        if success:
            if "postgres" in output and "Up" in output:
                self.log("PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: –ó–ê–ü–£–©–ï–ù", "SUCCESS")
            else:
                self.log("PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: –ù–ï –ó–ê–ü–£–©–ï–ù", "WARNING")
                if self.fix:
                    self.log("  –ó–∞–ø—É—Å—Ç–∏—Ç—å: docker-compose up -d postgres", "INFO")
                    
            if "redis" in output and "Up" in output:
                self.log("Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: –ó–ê–ü–£–©–ï–ù", "SUCCESS")
            else:
                self.log("Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: –ù–ï –ó–ê–ü–£–©–ï–ù", "WARNING")
                if self.fix:
                    self.log("  –ó–∞–ø—É—Å—Ç–∏—Ç—å: docker-compose up -d redis", "INFO")
                    
            if "qdrant" in output and "Up" in output:
                self.log("Qdrant –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: –ó–ê–ü–£–©–ï–ù", "SUCCESS")
            else:
                self.log("Qdrant –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: –ù–ï –ó–ê–ü–£–©–ï–ù", "WARNING")
                if self.fix:
                    self.log("  –ó–∞–ø—É—Å—Ç–∏—Ç—å: docker-compose up -d qdrant", "INFO")
        else:
            self.log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", "WARNING")
            
    def check_services_connectivity(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å–∞–º"""
        self.log(f"\n{Colors.BOLD}üîå –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –°–ï–†–í–ò–°–ê–ú{Colors.RESET}")
        
        services = [
            ("PostgreSQL", "localhost", 5432),
            ("Redis", "localhost", 6379), 
            ("Qdrant", "localhost", 6333),
        ]
        
        for service_name, host, port in services:
            if self.check_port(host, port):
                self.log(f"{service_name} ({host}:{port}): –î–û–°–¢–£–ü–ï–ù", "SUCCESS")
            else:
                self.log(f"{service_name} ({host}:{port}): –ù–ï–î–û–°–¢–£–ü–ï–ù", "ERROR")
                if self.fix:
                    self.log(f"  –ó–∞–ø—É—Å—Ç–∏—Ç—å: docker-compose up -d {service_name.lower()}", "INFO")
                    
    def check_api_endpoints(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints"""
        self.log(f"\n{Colors.BOLD}üåê API ENDPOINTS{Colors.RESET}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API
        if self.check_port("localhost", 8000):
            self.log("FastAPI —Å–µ—Ä–≤–µ—Ä (localhost:8000): –ó–ê–ü–£–©–ï–ù", "SUCCESS")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö endpoints
            endpoints = [
                ("http://localhost:8000/health", "Health Check"),
                ("http://localhost:8000/", "Root Endpoint"),
                ("http://localhost:8000/docs", "Swagger UI"),
                ("http://localhost:8000/redoc", "ReDoc"),
            ]
            
            for url, description in endpoints:
                success, status = self.check_http_endpoint(url)
                if success:
                    self.log(f"  {description}: –î–û–°–¢–£–ü–ï–ù", "SUCCESS")
                else:
                    self.log(f"  {description}: –ù–ï–î–û–°–¢–£–ü–ï–ù ({status})", "ERROR")
        else:
            self.log("FastAPI —Å–µ—Ä–≤–µ—Ä (localhost:8000): –ù–ï –ó–ê–ü–£–©–ï–ù", "ERROR")
            if self.fix:
                self.log("  –ó–∞–ø—É—Å—Ç–∏—Ç—å: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload", "INFO")
                
    def check_frontend(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
        self.log(f"\n{Colors.BOLD}‚öõÔ∏è  –§–†–û–ù–¢–ï–ù–î{Colors.RESET}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if self.check_file_exists("frontend/node_modules"):
            self.log("Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: –£–°–¢–ê–ù–û–í–õ–ï–ù–´", "SUCCESS")
        else:
            self.log("Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–´", "ERROR")
            if self.fix:
                self.log("  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: cd frontend && npm install", "INFO")
                
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä–∞
        if self.check_port("localhost", 3000):
            self.log("React —Å–µ—Ä–≤–µ—Ä (localhost:3000): –ó–ê–ü–£–©–ï–ù", "SUCCESS")
            success, status = self.check_http_endpoint("http://localhost:3000")
            if success:
                self.log("  React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –î–û–°–¢–£–ü–ù–û", "SUCCESS")
            else:
                self.log(f"  React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –ù–ï–î–û–°–¢–£–ü–ù–û ({status})", "ERROR")
        else:
            self.log("React —Å–µ—Ä–≤–µ—Ä (localhost:3000): –ù–ï –ó–ê–ü–£–©–ï–ù", "WARNING")
            if self.fix:
                self.log("  –ó–∞–ø—É—Å—Ç–∏—Ç—å: cd frontend && npm run dev", "INFO")
                
    def check_environment_variables(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.log(f"\n{Colors.BOLD}üîß –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø{Colors.RESET}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–æ–≤
        env_files = [".env.local", ".env", ".env.development"]
        env_found = False
        
        for env_file in env_files:
            if self.check_file_exists(env_file):
                self.log(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {env_file}", "SUCCESS")
                env_found = True
                break
                
        if not env_found:
            self.log("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
            if self.fix:
                self.log("  –°–æ–∑–¥–∞—Ç—å: cp env.example .env.local", "INFO")
                
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        required_vars = [
            "DATABASE_URL",
            "REDIS_URL", 
            "QDRANT_HOST",
            "SECRET_KEY",
            "OPENAI_API_KEY",
            "ANTHROPIC_API_KEY"
        ]
        
        for var in required_vars:
            value = os.getenv(var)
            if value:
                # –°–∫—Ä—ã–≤–∞–µ–º –∫–ª—é—á–∏ API
                if "API_KEY" in var:
                    display_value = f"{value[:10]}...{value[-4:]}" if len(value) > 14 else "***"
                    self.log(f"  {var}: {display_value}", "SUCCESS")
                else:
                    self.log(f"  {var}: {value}", "SUCCESS")
            else:
                self.log(f"  {var}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê", "ERROR")
                
    def check_database_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.log(f"\n{Colors.BOLD}üóÑÔ∏è  –ë–ê–ó–ê –î–ê–ù–ù–´–•{Colors.RESET}")
        
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
            database_url = os.getenv("DATABASE_URL", "postgresql://postgres:password@localhost:5432/ai_assistant")
            
            import psycopg2
            conn = psycopg2.connect(database_url)
            cursor = conn.cursor()
            cursor.execute("SELECT version();")
            version = cursor.fetchone()[0]
            self.log(f"PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –£–°–ü–ï–®–ù–û", "SUCCESS")
            self.log(f"  –í–µ—Ä—Å–∏—è: {version.split()[0]} {version.split()[1]}", "VERBOSE")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
            cursor.execute("""
                SELECT table_name FROM information_schema.tables 
                WHERE table_schema = 'public'
            """)
            tables = cursor.fetchall()
            if tables:
                self.log(f"  –¢–∞–±–ª–∏—Ü—ã: {len(tables)} –Ω–∞–π–¥–µ–Ω–æ", "SUCCESS")
                for table in tables[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    self.log(f"    - {table[0]}", "VERBOSE")
            else:
                self.log("  –¢–∞–±–ª–∏—Ü—ã: –ù–ï –ù–ê–ô–î–ï–ù–´", "WARNING")
                if self.fix:
                    self.log("  –°–æ–∑–¥–∞—Ç—å: alembic upgrade head", "INFO")
                    
            conn.close()
            
        except ImportError:
            self.log("psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "ERROR")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {str(e)}", "ERROR")
            
    def generate_summary(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log(f"\n{Colors.BOLD}üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢{Colors.RESET}")
        
        total_checks = len(self.results)
        error_count = len(self.errors)
        warning_count = len(self.warnings)
        success_count = total_checks - error_count - warning_count
        
        self.log(f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total_checks}", "INFO")
        if success_count > 0:
            self.log(f"–£—Å–ø–µ—à–Ω–æ: {success_count}", "SUCCESS")
        if warning_count > 0:
            self.log(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warning_count}", "WARNING")
        if error_count > 0:
            self.log(f"–û—à–∏–±–∫–∏: {error_count}", "ERROR")
            
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        if error_count == 0:
            if warning_count == 0:
                self.log(f"\n{Colors.GREEN}{Colors.BOLD}üéâ –û–ö–†–£–ñ–ï–ù–ò–ï –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–û –ö –†–ê–ó–†–ê–ë–û–¢–ö–ï!{Colors.RESET}")
            else:
                self.log(f"\n{Colors.YELLOW}{Colors.BOLD}‚ö†Ô∏è  –û–ö–†–£–ñ–ï–ù–ò–ï –ü–û–ß–¢–ò –ì–û–¢–û–í–û (–µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è){Colors.RESET}")
        else:
            self.log(f"\n{Colors.RED}{Colors.BOLD}‚ùå –û–ö–†–£–ñ–ï–ù–ò–ï –¢–†–ï–ë–£–ï–¢ –ù–ê–°–¢–†–û–ô–ö–ò{Colors.RESET}")
            
        # –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if error_count > 0:
            self.log(f"\n{Colors.BOLD}üîß –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:{Colors.RESET}")
            self.log("# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
            self.log("pip install -r requirements.txt")
            self.log("cd frontend && npm install")
            self.log("")
            self.log("# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤:")
            self.log("docker-compose up -d postgres redis qdrant")
            self.log("")
            self.log("# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
            self.log("export $(cat .env.local | xargs)")
            self.log("uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload")
            
    def run_all_checks(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        self.log(f"{Colors.MAGENTA}{Colors.BOLD}üîç AI ASSISTANT - –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò{Colors.RESET}\n")
        
        try:
            self.check_system_info()
            self.check_required_tools()
            self.check_project_structure()
            self.check_python_environment()
            self.check_environment_variables()
            self.check_docker_services()
            self.check_services_connectivity()
            self.check_database_connection()
            self.check_api_endpoints()
            self.check_frontend()
            self.generate_summary()
            
        except KeyboardInterrupt:
            self.log("\n\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "WARNING")
        except Exception as e:
            self.log(f"\n–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", "ERROR")
            
def main():
    parser = argparse.ArgumentParser(
        description="üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ AI Assistant"
    )
    parser.add_argument(
        "--verbose", "-v", 
        action="store_true", 
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    )
    parser.add_argument(
        "--fix", "-f", 
        action="store_true", 
        help="–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º"
    )
    
    args = parser.parse_args()
    
    checker = EnvironmentChecker(verbose=args.verbose, fix=args.fix)
    checker.run_all_checks()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    if checker.errors:
        sys.exit(1)
    elif checker.warnings:
        sys.exit(2)
    else:
        sys.exit(0)

if __name__ == "__main__":
    main() 