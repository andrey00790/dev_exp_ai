version: '3.8'

services:
  # PostgreSQL для всех сервисов
  postgres:
    image: postgres:13
    container_name: e2e_postgres
    environment:
      POSTGRES_DB: atlassian
      POSTGRES_USER: atlassian
      POSTGRES_PASSWORD: atlassian
      POSTGRES_MULTIPLE_DATABASES: jira,confluence,gitlab
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    networks:
      - e2e_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U atlassian"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Jira
  jira:
    image: atlassian/jira-software:9.4
    container_name: e2e_jira
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      ATL_JDBC_URL: jdbc:postgresql://postgres:5432/jira
      ATL_JDBC_USER: atlassian
      ATL_JDBC_PASSWORD: atlassian
      ATL_DB_TYPE: postgres72
      JVM_MINIMUM_MEMORY: 2g
      JVM_MAXIMUM_MEMORY: 4g
      ATL_PROXY_NAME: localhost
      ATL_PROXY_PORT: 8080
      ATL_TOMCAT_SCHEME: http
      ATL_TOMCAT_SECURE: 'false'
    ports:
      - "8080:8080"
    volumes:
      - jira_data:/var/atlassian/application-data/jira
      - ./test-data/jira:/opt/test-data:ro
    networks:
      - e2e_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/status"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 120s

  # Confluence
  confluence:
    image: atlassian/confluence:8.5
    container_name: e2e_confluence
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      ATL_JDBC_URL: jdbc:postgresql://postgres:5432/confluence
      ATL_JDBC_USER: atlassian
      ATL_JDBC_PASSWORD: atlassian
      ATL_DB_TYPE: postgresql
      JVM_MINIMUM_MEMORY: 2g
      JVM_MAXIMUM_MEMORY: 4g
      ATL_PROXY_NAME: localhost
      ATL_PROXY_PORT: 8090
      ATL_TOMCAT_SCHEME: http
      ATL_TOMCAT_SECURE: 'false'
    ports:
      - "8090:8090"
    volumes:
      - confluence_data:/var/atlassian/application-data/confluence
      - ./test-data/confluence:/opt/test-data:ro
    networks:
      - e2e_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/status"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 120s

  # GitLab CE
  gitlab:
    image: gitlab/gitlab-ce:16.6.0-ce.0
    container_name: e2e_gitlab
    hostname: 'localhost'
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://localhost:8088'
        gitlab_rails['initial_root_password'] = 'testpassword123'
        gitlab_rails['initial_shared_runners_registration_token'] = 'test-token'
        postgresql['enable'] = false
        gitlab_rails['db_adapter'] = 'postgresql'
        gitlab_rails['db_encoding'] = 'utf8'
        gitlab_rails['db_host'] = 'postgres'
        gitlab_rails['db_port'] = 5432
        gitlab_rails['db_database'] = 'gitlab'
        gitlab_rails['db_username'] = 'atlassian'
        gitlab_rails['db_password'] = 'atlassian'
        nginx['listen_port'] = 80
        nginx['listen_https'] = false
        prometheus_monitoring['enable'] = false
        alertmanager['enable'] = false
        node_exporter['enable'] = false
        redis_exporter['enable'] = false
        postgres_exporter['enable'] = false
        pgbouncer_exporter['enable'] = false
        gitlab_exporter['enable'] = false
        grafana['enable'] = false
        sidekiq['max_concurrency'] = 10
    ports:
      - "8088:80"
      - "2222:22"
    volumes:
      - gitlab_config:/etc/gitlab
      - gitlab_logs:/var/log/gitlab
      - gitlab_data:/var/opt/gitlab
      - ./test-data/gitlab:/opt/test-data:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - e2e_network
    shm_size: '256m'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/-/health"]
      interval: 30s
      timeout: 10s
      retries: 15
      start_period: 180s

  # Elasticsearch для семантического поиска
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: e2e_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - e2e_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 20s
      timeout: 10s
      retries: 10

  # Redis для кеширования
  redis:
    image: redis:7-alpine
    container_name: e2e_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - e2e_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Test Data Loader - сервис для наполнения тестовыми данными
  test-data-loader:
    build:
      context: .
      dockerfile: Dockerfile.test-loader
    container_name: e2e_test_loader
    depends_on:
      jira:
        condition: service_healthy
      confluence:
        condition: service_healthy
      gitlab:
        condition: service_healthy
    environment:
      JIRA_URL: http://jira:8080
      CONFLUENCE_URL: http://confluence:8090
      GITLAB_URL: http://gitlab
      POSTGRES_URL: postgresql://atlassian:atlassian@postgres:5432
      ELASTICSEARCH_URL: http://elasticsearch:9200
      REDIS_URL: redis://redis:6379
    volumes:
      - ./test-data:/app/test-data
      - ./scripts:/app/scripts
    networks:
      - e2e_network
    profiles:
      - tools

volumes:
  postgres_data:
  jira_data:
  confluence_data:
  gitlab_config:
  gitlab_logs:
  gitlab_data:
  es_data:
  redis_data:

networks:
  e2e_network:
    driver: bridge 