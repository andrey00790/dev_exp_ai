"""
üìä Team Performance Forecasting API - Phase 4B.4

FastAPI endpoints –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã.
"""

import logging
from datetime import datetime
from typing import Any, Dict, List, Optional

from fastapi import APIRouter, Depends, HTTPException
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field

from app.security.auth import get_current_user
from domain.code_optimization.team_performance_forecasting_engine import (
    PerformanceMetric, TeamAnalysisReport, TeamMember, TeamMetricType,
    TeamPerformanceForecast, TeamRisk, get_team_performance_forecasting_engine)

logger = logging.getLogger(__name__)
router = APIRouter(
    prefix="/api/v1/team-performance", tags=["Team Performance Forecasting"]
)


class TeamAnalysisRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã"""

    team_id: str = Field(..., description="ID –∫–æ–º–∞–Ω–¥—ã")
    historical_metrics: Dict[str, List[Dict]] = Field(
        default={}, description="–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏"
    )
    team_members: List[Dict] = Field(default=[], description="–ß–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã")


class QuickAssessmentRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –±—ã—Å—Ç—Ä—É—é –æ—Ü–µ–Ω–∫—É –∫–æ–º–∞–Ω–¥—ã"""

    team_id: str = Field(..., description="ID –∫–æ–º–∞–Ω–¥—ã")
    basic_metrics: Dict[str, float] = Field(..., description="–ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")


@router.post("/analyze")
async def analyze_team_performance(
    request: TeamAnalysisRequest, current_user: dict = Depends(get_current_user)
):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã"""
    try:
        logger.info(f"üìä –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã: {request.team_id}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        engine = await get_team_performance_forecasting_engine()

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
        converted_metrics = {}
        for metric_name, metric_list in request.historical_metrics.items():
            if metric_name in ["velocity", "quality", "bugs"]:
                converted_metrics[metric_name] = [
                    PerformanceMetric(
                        metric_type=(
                            TeamMetricType.VELOCITY
                            if metric_name == "velocity"
                            else TeamMetricType.QUALITY_SCORE
                        ),
                        value=m.get("value", 0.0),
                        timestamp=datetime.fromisoformat(
                            m.get("timestamp", datetime.now().isoformat())
                        ),
                        unit=m.get("unit", ""),
                    )
                    for m in metric_list
                ]

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–ª–µ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        team_members = []
        for member_data in request.team_members:
            member = TeamMember(
                name=member_data.get("name", ""),
                role=member_data.get("role", ""),
                experience_level=member_data.get("experience_level", ""),
                performance_score=member_data.get("performance_score", 0.0),
                availability=member_data.get("availability", 1.0),
            )
            team_members.append(member)

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
        report = await engine.analyze_team_performance(
            request.team_id, converted_metrics, team_members
        )

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response_data = {
            "report_id": report.report_id,
            "team_id": report.team_id,
            "analysis_results": {
                "current_performance_score": report.current_performance_score,
                "performance_trend": report.performance_trend.value,
                "strengths": report.strengths,
                "weaknesses": report.weaknesses,
                "improvement_opportunities": report.improvement_opportunities,
            },
            "forecasts": [
                {
                    "forecast_id": f.forecast_id,
                    "forecast_period_days": f.forecast_period_days,
                    "predicted_velocity": f.predicted_velocity,
                    "predicted_quality_score": f.predicted_quality_score,
                    "predicted_bug_rate": f.predicted_bug_rate,
                    "confidence_level": f.confidence_level.value,
                    "risk_level": f.risk_level.value,
                    "trend": f.trend.value,
                    "recommendations": f.recommendations,
                    "risk_factors": f.risk_factors,
                }
                for f in report.forecasts
            ],
            "team_metrics": report.team_metrics,
            "analysis_duration": report.analysis_duration,
            "created_at": report.created_at.isoformat(),
        }

        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω: {len(report.forecasts)} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
        return JSONResponse(content=response_data)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/quick-assessment")
async def quick_team_assessment(
    request: QuickAssessmentRequest, current_user: dict = Depends(get_current_user)
):
    """–ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã"""
    try:
        logger.info(f"‚ö° –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {request.team_id}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        engine = await get_team_performance_forecasting_engine()

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–π –æ—Ü–µ–Ω–∫–∏
        result = await engine.quick_team_assessment(
            request.team_id, request.basic_metrics
        )

        logger.info(f"‚úÖ –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result['performance_score']}/10")
        return JSONResponse(content=result)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –æ—Ü–µ–Ω–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/metrics")
async def get_forecasting_metrics(current_user: dict = Depends(get_current_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–≤–∏–∂–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        engine = await get_team_performance_forecasting_engine()
        metrics = engine.get_forecasting_metrics()
        return JSONResponse(content=metrics)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/status")
async def get_forecasting_status(current_user: dict = Depends(get_current_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–≤–∏–∂–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        engine = await get_team_performance_forecasting_engine()
        metrics = engine.get_forecasting_metrics()

        return JSONResponse(
            content={
                "engine_status": "active",
                "system_health": "healthy",
                "teams_analyzed": metrics["metrics"]["teams_analyzed"],
                "forecasts_generated": metrics["metrics"]["forecasts_generated"],
                "average_forecast_accuracy": metrics["metrics"][
                    "average_forecast_accuracy"
                ],
                "capabilities": [
                    "velocity_forecasting",
                    "performance_trend_analysis",
                    "risk_assessment",
                    "team_composition_analysis",
                    "improvement_recommendations",
                ],
                "last_updated": datetime.now().isoformat(),
            }
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    return JSONResponse(
        content={
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "service": "team_performance_forecasting",
        }
    )
