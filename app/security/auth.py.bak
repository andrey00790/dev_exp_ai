"""
JWT Authentication system for AI Assistant MVP.
"""

import os
import secrets
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from passlib.context import CryptContext
from jose import JWTError, jwt
from fastapi import HTTPException, status, Depends, Request, Response
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, EmailStr, validator
import logging
from starlette.middleware.base import BaseHTTPMiddleware

logger = logging.getLogger(__name__)

SECRET_KEY = os.getenv("SECRET_KEY", secrets.token_urlsafe(32))
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
security = HTTPBearer()

class User(BaseModel):
    user_id: str
    email: EmailStr
    name: str
    is_active: bool = True
    scopes: list[str] = ["basic"]

class TokenData(BaseModel):
    user_id: Optional[str] = None
    email: Optional[str] = None
    scopes: list[str] = []

USERS_DB: Dict[str, Dict[str, Any]] = {
    "admin@example.com": {
        "user_id": "admin_user",
        "email": "admin@example.com",
        "name": "Admin",
        "hashed_password": pwd_context.hash("admin"),
        "is_active": True,
        "scopes": ["admin", "basic"],
    }
}

def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password: str) -> str:
    return pwd_context.hash(password)

def get_user_by_email(email: str) -> Optional[Dict[str, Any]]:
    return USERS_DB.get(email)

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None) -> str:
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

def verify_token(token: str) -> TokenData:
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        user_id = payload.get("sub")
        email = payload.get("email")
        scopes = payload.get("scopes", [])
        if user_id is None or email is None:
            raise JWTError("Invalid token payload")
        return TokenData(user_id=user_id, email=email, scopes=scopes)
    except JWTError as e:
        raise HTTPException(status_code=401, detail=f"Could not validate credentials: {e}")

async def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)) -> User:
    token_data = verify_token(credentials.credentials)
    user_data = get_user_by_email(token_data.email)
    if user_data is None or not user_data["is_active"]:
        raise HTTPException(status_code=401, detail="User not found or inactive")
    return User(**user_data)

class AuthMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        """
        Authentication middleware to protect all API endpoints.
        """
        EXCLUDED_PATHS = ["/health_smoke", "/docs", "/redoc", "/openapi.json"]
        if request.url.path in EXCLUDED_PATHS or request.url.path.startswith("/api/v1/auth/token"):
            return await call_next(request)
        
        try:
            credentials = await security(request)
            request.state.user = await get_current_user(credentials)
        except HTTPException as e:
            if e.status_code == 403: # security() raises 403 if no header
                return Response('{"detail":"Not authenticated"}', status_code=401, media_type="application/json")
            raise e # Reraise other exceptions
        
        return await call_next(request)

# Закомментируйте старую функцию, чтобы избежать путаницы
# async def auth_middleware(request: Request, call_next): ...
class UserCreate(BaseModel):
    email: EmailStr
    password: str
    name: str
    budget_limit: float = 100.0

class UserLogin(BaseModel):
    email: EmailStr
    password: str

class Token(BaseModel):
    access_token: str
    token_type: str = "bearer"
    expires_in: int = 1800
    user: Optional[User] = None

def create_user(user_data: UserCreate) -> User:
    if user_data.email in USERS_DB:
        raise HTTPException(status_code=400, detail="User already exists")
    return User(user_id="test", email=user_data.email, name=user_data.name)

def login_user(credentials: UserLogin) -> Token:
    user_data = get_user_by_email(credentials.email)
    if not user_data:
        raise HTTPException(status_code=401, detail="Invalid credentials")
    token = create_access_token(data={"sub": user_data["user_id"], "email": user_data["email"]})
    return Token(access_token=token)

def update_user_usage(user_id: str, cost: float):
    pass

def require_scope(required_scope: str):
    def decorator(func):
        return func
    return decorator
