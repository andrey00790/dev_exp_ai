"""
Deep Research Engine Demo - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ DeepResearch Engine:
- –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
- Real-time –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
- –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
- WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
"""

import asyncio
import json
import logging
import time
import websockets
from datetime import datetime
from typing import Dict, Any

from domain.core.deep_research_engine import get_deep_research_engine, ResearchStatus

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class DeepResearchDemo:
    """–î–µ–º–æ-–∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è DeepResearch Engine"""
    
    def __init__(self):
        self.engine = None
        self.demo_queries = [
            "–ö–∞–∫–∏–µ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤?",
            "–ö–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å CI/CD pipeline –¥–ª—è Python –ø—Ä–æ–µ–∫—Ç–æ–≤?",
            "–ö–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–æ–≤?",
            "–ö–∞–∫ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ DevOps –∏ –∫–∞–∫ –µ–≥–æ –≤–Ω–µ–¥—Ä–∏—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏?"
        ]

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"""
        try:
            self.engine = await get_deep_research_engine()
            logger.info("üî¨ Deep Research Engine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    async def demo_basic_research(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        print("\n" + "="*80)
        print("üî¨ DEEP RESEARCH ENGINE DEMO - –ë–ê–ó–û–í–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï")
        print("="*80)
        
        query = self.demo_queries[0]
        print(f"üìù –ó–∞–ø—Ä–æ—Å: {query}")
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            session = await self.engine.start_research(
                query=query,
                user_id="demo_user",
                max_steps=5
            )
            
            print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session.session_id}")
            print(f"üéØ –¶–µ–ª—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {session.research_goal}")
            print(f"üìä –ú–∞–∫—Å–∏–º—É–º —à–∞–≥–æ–≤: {session.max_steps}")
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            print("\nüîç –í–´–ü–û–õ–ù–ï–ù–ò–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:")
            print("-" * 60)
            
            step_count = 0
            async for step in self.engine.execute_research(session.session_id):
                step_count += 1
                print(f"\nüìã –®–∞–≥ {step_count}: {step.title}")
                print(f"   –¢–∏–ø: {step.step_type.value}")
                print(f"   –°—Ç–∞—Ç—É—Å: {step.status.value}")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {step.confidence:.2f}")
                print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {step.duration:.2f}—Å")
                print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(step.sources)}")
                
                if step.result:
                    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {step.result[:200]}...")
                
                if step.next_steps:
                    print(f"   –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏: {', '.join(step.next_steps[:2])}")
                
                time.sleep(0.5)  # –ü–∞—É–∑–∞ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            final_status = await self.engine.get_session_status(session.session_id)
            if final_status:
                print("\n‚úÖ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
                print(f"üìä –û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {final_status.get('overall_confidence', 0):.2f}")
                print(f"üìö –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {final_status.get('total_sources', 0)}")
                print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {final_status.get('duration', 0):.2f}—Å")
                
                if final_status.get('final_result'):
                    print(f"\nüìù –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
                    print(f"{final_status['final_result'][:500]}...")
            
            return session.session_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {e}")
            return None

    async def demo_multiple_research(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"""
        print("\n" + "="*80)
        print("üî¨ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø")
        print("="*80)
        
        sessions = []
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
        for i, query in enumerate(self.demo_queries[:3], 1):
            print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è {i}: {query[:50]}...")
            
            try:
                session = await self.engine.start_research(
                    query=query,
                    user_id=f"demo_user_{i}",
                    max_steps=3  # –ú–µ–Ω—å—à–µ —à–∞–≥–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
                )
                sessions.append(session)
                print(f"‚úÖ –°–µ—Å—Å–∏—è {i} —Å–æ–∑–¥–∞–Ω–∞: {session.session_id}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ {i}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
        print(f"\nüìä –°–æ–∑–¥–∞–Ω–æ —Å–µ—Å—Å–∏–π: {len(sessions)}")
        
        for i, session in enumerate(sessions, 1):
            status = await self.engine.get_session_status(session.session_id)
            if status:
                print(f"   –°–µ—Å—Å–∏—è {i}: {status['status']} (—à–∞–≥–æ–≤: {status['total_steps']})")
        
        return sessions

    async def demo_research_cancellation(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        print("\n" + "="*80)
        print("üö´ –û–¢–ú–ï–ù–ê –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø")
        print("="*80)
        
        query = "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
            session = await self.engine.start_research(
                query=query,
                user_id="demo_cancel_user",
                max_steps=7
            )
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã: {session.session_id}")
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –æ—Ç–º–µ–Ω—É
            success = await self.engine.cancel_research(session.session_id)
            
            if success:
                print("‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                status = await self.engine.get_session_status(session.session_id)
                if status:
                    print(f"üìä –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã: {status['status']}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω—ã: {e}")

    async def demo_engine_status(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–≤–∏–∂–∫–∞"""
        print("\n" + "="*80)
        print("üìä –°–¢–ê–¢–£–° –î–í–ò–ñ–ö–ê –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ô")
        print("="*80)
        
        try:
            status = await self.engine.get_engine_status()
            
            print(f"üîß –°—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞: {status['engine_status']}")
            print(f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {status['active_sessions']}")
            
            print(f"\nüìà –ú–ï–¢–†–ò–ö–ò:")
            metrics = status.get('metrics', {})
            for key, value in metrics.items():
                print(f"   {key}: {value}")
            
            print(f"\n‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
            config = status.get('configuration', {})
            for key, value in config.items():
                print(f"   {key}: {value}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

    async def demo_adaptive_planning(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\n" + "="*80)
        print("üß† –ê–î–ê–ü–¢–ò–í–ù–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –®–ê–ì–û–í")
        print("="*80)
        
        # –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        complex_query = """
        –ú–Ω–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FastAPI –∏ React —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º.
        –ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –ø–æ–¥—Ö–æ–¥—ã –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è unit, integration –∏ e2e —Ç–µ—Å—Ç–æ–≤?
        """
        
        try:
            session = await self.engine.start_research(
                query=complex_query,
                user_id="demo_adaptive_user",
                max_steps=6
            )
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {session.session_id}")
            print(f"üéØ –¶–µ–ª—å: {session.research_goal}")
            
            print("\nüîç –ê–î–ê–ü–¢–ò–í–ù–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï:")
            print("-" * 60)
            
            async for step in self.engine.execute_research(session.session_id):
                print(f"\nüìã {step.title}")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {step.confidence:.2f}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                if step.next_steps:
                    print(f"   –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:")
                    for suggestion in step.next_steps[:2]:
                        print(f"     ‚Ä¢ {suggestion}")
                
                if step.confidence < 0.6:
                    print(f"   ‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è")
                
                time.sleep(0.3)
            
            print("\n‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    async def demo_performance_metrics(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\n" + "="*80)
        print("‚ö° –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("="*80)
        
        start_time = time.time()
        session_times = []
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º 3 –±—ã—Å—Ç—Ä—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
        for i in range(3):
            query = f"–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {i+1}: –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –≤–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"
            
            session_start = time.time()
            
            try:
                session = await self.engine.start_research(
                    query=query,
                    user_id=f"perf_user_{i}",
                    max_steps=3
                )
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
                step_count = 0
                async for step in self.engine.execute_research(session.session_id):
                    step_count += 1
                
                session_end = time.time()
                session_time = session_end - session_start
                session_times.append(session_time)
                
                print(f"‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ {i+1}: {step_count} —à–∞–≥–æ–≤ –∑–∞ {session_time:.2f}—Å")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {i+1}: {e}")
        
        total_time = time.time() - start_time
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}—Å")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {sum(session_times)/len(session_times):.2f}—Å")
        print(f"   –ë—ã—Å—Ç—Ä–µ–π—à–µ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {min(session_times):.2f}—Å")
        print(f"   –ú–µ–¥–ª–µ–Ω–Ω–µ–π—à–µ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {max(session_times):.2f}—Å")

    async def run_all_demos(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π"""
        print("üî¨ DEEP RESEARCH ENGINE - –ü–û–õ–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø")
        print("="*80)
        
        if not await self.initialize():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–≤–∏–∂–æ–∫")
            return
        
        try:
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–≤–∏–∂–∫–∞
            await self.demo_engine_status()
            
            # –ë–∞–∑–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
            await self.demo_basic_research()
            
            # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            await self.demo_multiple_research()
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            await self.demo_adaptive_planning()
            
            # –û—Ç–º–µ–Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            await self.demo_research_cancellation()
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            await self.demo_performance_metrics()
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            print("\n" + "="*80)
            print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –î–í–ò–ñ–ö–ê")
            print("="*80)
            await self.demo_engine_status()
            
            print("\nüéâ –í–°–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    demo = DeepResearchDemo()
    await demo.run_all_demos()

if __name__ == "__main__":
    asyncio.run(main()) 