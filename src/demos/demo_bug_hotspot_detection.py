"""
üî• Bug Hotspot Detection Engine Demo - Phase 4B.3

–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω –≤ –∫–æ–¥–µ.
"""

import asyncio
import time
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Bug Hotspot Detection Engine"""
    
    print("\n" + "="*80)
    print("üî• BUG HOTSPOT DETECTION ENGINE DEMO - PHASE 4B.3")
    print("="*80)
    
    try:
        # –ò–º–ø–æ—Ä—Ç –¥–≤–∏–∂–∫–∞
        from domain.monitoring.bug_hotspot_detection_engine import get_hotspot_detection_engine
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–≤–∏–∂–∫–∞
        engine = await get_hotspot_detection_engine()
        print(f"‚úÖ Bug Hotspot Detection Engine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        await demo_basic_analysis(engine)
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∫–æ–¥–∞
        await demo_problematic_code(engine)
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        await demo_quick_checks(engine)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        await show_final_metrics(engine)
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Bug Hotspot Detection Engine —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–º–æ: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}", exc_info=True)

async def demo_basic_analysis(engine):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    print("\n" + "-"*60)
    print("üìä –ë–ê–ó–û–í–´–ô –ê–ù–ê–õ–ò–ó HOTSPOT'–û–í")
    print("-"*60)
    
    sample_code = '''
def calculate_result(param1, param2, param3, param4, param5, param6):
    try:
        if param1 > 100:
            if param2 is not None:
                if param3 == "valid":
                    result = param1 * 12345 + param2 * 67890
                    return result
                else:
                    return None
            else:
                return 0
        else:
            return -1
    except:
        pass
'''
    
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏...")
    
    start_time = time.time()
    report = await engine.analyze_code_hotspots(sample_code, "sample.py")
    analysis_time = time.time() - start_time
    
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {analysis_time:.3f}s")
    print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ hotspot'–æ–≤: {report.total_hotspots}")
    print(f"   ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: {report.critical_hotspots}")
    print(f"   ‚Ä¢ –†–∏—Å–∫-—Å–∫–æ—Ä: {report.overall_risk_score}/10")
    
    if report.hotspots:
        print(f"\nüî• –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        for i, hotspot in enumerate(report.hotspots[:3], 1):
            print(f"   {i}. {hotspot.title}")
            print(f"      ‚îî‚îÄ {hotspot.severity.value.upper()} | –†–∏—Å–∫: {hotspot.risk_score}/10")
            print(f"      ‚îî‚îÄ {hotspot.description}")
            if hotspot.recommendations:
                print(f"      ‚îî‚îÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {hotspot.recommendations[0]}")

async def demo_problematic_code(engine):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∫–æ–¥–∞"""
    print("\n" + "-"*60)
    print("‚ö†Ô∏è  –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–û–ì–û –ö–û–î–ê")
    print("-"*60)
    
    problematic_code = '''
def god_function(data, config, options, settings, params, flags, state):
    global_counter = 0
    
    try:
        for item in data:
            if item is not None:
                if item.type == "special":
                    if item.value > 1000:
                        if config.enable_processing:
                            if options.advanced_mode:
                                processed = item.value * 999999
                                global_counter += 1
                                if processed:
                                    return processed
                                else:
                                    continue
                            else:
                                return None
                elif item.type == "normal":
                    return item.value * 555555
            try:
                backup_processing(item)
            except:
                pass
    except Exception as e:
        pass
    
    return global_counter
''' * 5  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞
    
    print("üö® –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–¥...")
    
    start_time = time.time()
    report = await engine.analyze_code_hotspots(problematic_code, "problematic.py")
    analysis_time = time.time() - start_time
    
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {analysis_time:.3f}s")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ hotspot'–æ–≤: {report.total_hotspots}")
    print(f"   ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: {report.critical_hotspots}")
    print(f"   ‚Ä¢ –†–∏—Å–∫-—Å–∫–æ—Ä: {report.overall_risk_score}/10")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {}
    for hotspot in report.hotspots:
        category = hotspot.category.value
        categories[category] = categories.get(category, 0) + 1
    
    print(f"\nüìÇ –ü—Ä–æ–±–ª–µ–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for category, count in categories.items():
        print(f"   ‚Ä¢ {category.replace('_', ' ').title()}: {count}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    critical_hotspots = [h for h in report.hotspots if h.severity.value == 'critical']
    high_hotspots = [h for h in report.hotspots if h.severity.value == 'high']
    
    if critical_hotspots:
        print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ ({len(critical_hotspots)}):")
        for hotspot in critical_hotspots[:2]:
            print(f"   ‚Ä¢ {hotspot.title} (—Ä–∏—Å–∫: {hotspot.risk_score}/10)")
    
    if high_hotspots:
        print(f"\n‚ö†Ô∏è  –í–´–°–û–ö–û–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ ({len(high_hotspots)}):")
        for hotspot in high_hotspots[:2]:
            print(f"   ‚Ä¢ {hotspot.title} (—Ä–∏—Å–∫: {hotspot.risk_score}/10)")

async def demo_quick_checks(engine):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
    print("\n" + "-"*60)
    print("‚ö° –ë–´–°–¢–†–´–ï –ü–†–û–í–ï–†–ö–ò")
    print("-"*60)
    
    test_cases = [
        ("–ú–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª", "def small(): pass"),
        ("–°—Ä–µ–¥–Ω–∏–π —Ñ–∞–π–ª", "def medium(): pass\n" * 50),
        ("–ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª", "def large(): pass\n" * 300),
        ("–ö–æ–¥ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏", "try:\n    risky()\nexcept:\n    pass"),
    ]
    
    for name, code in test_cases:
        print(f"\nüîç {name}:")
        
        start_time = time.time()
        result = await engine.quick_hotspot_check(code, f"{name.lower().replace(' ', '_')}.py")
        check_time = time.time() - start_time
        
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {check_time:.4f}s")
        print(f"   üìè –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {result['lines_of_code']}")
        print(f"   üö® –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º: {result['potential_issues']}")
        print(f"   üìä –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {result['risk_level'].upper()}")

async def show_final_metrics(engine):
    """–ü–æ–∫–∞–∑ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    print("\n" + "="*60)
    print("üìä –§–ò–ù–ê–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò –î–í–ò–ñ–ö–ê")
    print("="*60)
    
    metrics = engine.get_detection_metrics()
    
    print(f"üîß –°—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞: {metrics['engine_status']}")
    print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:")
    print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {metrics['metrics']['analyses_performed']}")
    print(f"   ‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ hotspot'–æ–≤: {metrics['metrics']['hotspots_detected']}")
    print(f"   ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: {metrics['metrics']['critical_hotspots']}")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫-—Å–∫–æ—Ä: {metrics['metrics']['avg_risk_score']:.2f}/10")
    
    print(f"\nüéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–≤–∏–∂–∫–∞:")
    capabilities = [
        "‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞",
        "‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ code smells",
        "‚úÖ –î–µ—Ç–µ–∫—Ü–∏—è anti-patterns",
        "‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
        "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏",
        "‚úÖ –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"
    ]
    for capability in capabilities:
        print(f"   {capability}")
    
    print(f"\nüöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
    print(f"   ‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: <0.1s")
    print(f"   ‚Ä¢ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑: <2s –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞")
    print(f"   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    print(f"\n" + "="*60)
    print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print("‚ú® Bug Hotspot Detection Engine –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üî• Phase 4B.3 - Bug Hotspot Detection —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω!")
    print("="*60)

if __name__ == "__main__":
    asyncio.run(main())
