"""
VK Teams Bot Adapter

–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ VK Teams –±–æ—Ç–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ API AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:
- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –í—ã–∑–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö API endpoints
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è VK Teams
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
"""

import asyncio
import json
import logging
import time
from datetime import datetime
from typing import Any, Dict, List, Optional, Union

import httpx
from vk_teams_async_bot.bot import Bot
from vk_teams_async_bot.events import Event
from vk_teams_async_bot.helpers import InlineKeyboardMarkup, KeyboardButton
from vk_teams_async_bot.constants import StyleKeyboard, ParseMode

from app.config import get_settings
from domain.vk_teams.bot_models import AIAssistantContext, BotMessage, BotStats

logger = logging.getLogger(__name__)


class VKTeamsBotAdapter:
    """
    –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ VK Teams –±–æ—Ç–∞ —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
    """
    
    def __init__(self):
        self.settings = get_settings()
        self.stats: Optional[BotStats] = None
        self.user_contexts: Dict[str, AIAssistantContext] = {}
        
        # HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö API –≤—ã–∑–æ–≤–æ–≤
        self.api_client = httpx.AsyncClient(
            base_url=f"http://localhost:{self.settings.SERVER_PORT}",
            timeout=30.0
        )
        
        # –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º
        self._user_cache: Dict[str, Dict[str, Any]] = {}
        
        # VK OAuth –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self._vk_auth_enabled = getattr(self.settings, 'VK_OAUTH_ENABLED', False)
        
    async def handle_event(
        self, 
        event_type: str, 
        event_id: str, 
        timestamp: int, 
        payload: Dict[str, Any]
    ) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –æ—Ç VK Teams
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            event_id: ID —Å–æ–±—ã—Ç–∏—è
            timestamp: –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
            payload: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è {event_type} (ID: {event_id})")
            
            if event_type == "newMessage":
                return await self._handle_new_message(payload)
            elif event_type == "callbackQuery":
                return await self._handle_callback_query(payload)
            elif event_type == "editedMessage":
                return await self._handle_edited_message(payload)
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}")
                return {"status": "ignored", "reason": f"Unknown event type: {event_type}"}
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
            if self.stats:
                self.stats.record_error("event_processing", str(e), {"event_type": event_type})
            return {"status": "error", "error": str(e)}
    
    async def handle_message_event(self, event_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            payload = event_data.get("payload", {})
            return await self._handle_new_message(payload)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {"status": "error", "error": str(e)}
    
    async def handle_callback_query(self, event_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            payload = event_data.get("payload", {})
            return await self._handle_callback_query(payload)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            return {"status": "error", "error": str(e)}
    
    async def handle_start_command(self, event: Event, bot: Bot):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ VK Teams
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        try:
            chat_id = event.chat.chatId
            user_id = event.from_.userId
            
            # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context = self._get_or_create_user_context(user_id, chat_id)
            
            welcome_text = """ü§ñ **AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç VK Teams**
            
–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫. –Ø –º–æ–≥—É:

üîç **–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏** - —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
üí¨ **–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã** - —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö  
üìù **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è RFC** - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
üîß **–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞** - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞** - insights –∏ –æ—Ç—á–µ—Ç—ã

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/help` - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
‚Ä¢ `/search <–∑–∞–ø—Ä–æ—Å>` - –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ `/generate` - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ `/analyze` - –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å! üöÄ"""
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
            keyboard = self._create_main_menu_keyboard()
            
            await bot.send_text(
                chat_id=chat_id,
                text=welcome_text,
                parse_mode=ParseMode.MARKDOWNV2,
                inline_keyboard_markup=keyboard
            )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if self.stats:
                message = BotMessage(
                    chat_id=chat_id,
                    user_id=user_id,
                    text="/start",
                    is_command=True,
                    command="start"
                )
                self.stats.record_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
            await bot.send_text(
                chat_id=event.chat.chatId,
                text="üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def handle_help_command(self, event: Event, bot: Bot):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ VK Teams
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        try:
            help_text = """üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º**

**üîç –ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑:**
‚Ä¢ `/search <–∑–∞–ø—Ä–æ—Å>` - —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
‚Ä¢ `/vector_search <–∑–∞–ø—Ä–æ—Å>` - –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
‚Ä¢ `/analyze <—Ç–µ–∫—Å—Ç>` - –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞

**üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**
‚Ä¢ `/generate rfc` - —Å–æ–∑–¥–∞—Ç—å RFC –¥–æ–∫—É–º–µ–Ω—Ç
‚Ä¢ `/generate docs` - —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
‚Ä¢ `/template` - –ø–æ–∫–∞–∑–∞—Ç—å —à–∞–±–ª–æ–Ω—ã

**‚öôÔ∏è AI —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ `/chat <—Å–æ–æ–±—â–µ–Ω–∏–µ>` - –¥–∏–∞–ª–æ–≥ —Å AI
‚Ä¢ `/optimize` - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞
‚Ä¢ `/review` - code review

**üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ `/status` - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ `/settings` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

**üí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
‚Ä¢ `–ù–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏`
‚Ä¢ `–°–æ–∑–¥–∞–π RFC –¥–ª—è –Ω–æ–≤–æ–π –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã`
‚Ä¢ `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å`

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º! ü§ñ"""
            
            await bot.send_text(
                chat_id=event.chat.chatId,
                text=help_text,
                parse_mode=ParseMode.MARKDOWNV2
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help: {e}")
            await bot.send_text(
                chat_id=event.chat.chatId,
                text="üòî –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏."
            )
    
    async def handle_text_message(self, event: Event, bot: Bot):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ VK Teams
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        start_time = time.time()
        
        try:
            chat_id = event.chat.chatId
            user_id = event.from_.userId
            text = event.text
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text[:100]}...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ VK OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if self._vk_auth_enabled:
                if not await self._check_vk_user_access(user_id):
                    await self._send_access_denied_message(bot, chat_id, user_id)
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
            if text.startswith('/'):
                await self._handle_command_message(event, bot)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context = self._get_or_create_user_context(user_id, chat_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º typing indicator
            # await bot.send_typing(chat_id)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI API
            response = await self._process_ai_request(text, context)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await self._send_ai_response(bot, chat_id, response)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if self.stats:
                response_time = (time.time() - start_time) * 1000
                message = BotMessage(
                    chat_id=chat_id,
                    user_id=user_id,
                    text=text,
                    response_time_ms=response_time
                )
                self.stats.record_message(message)
                context.add_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await bot.send_text(
                chat_id=event.chat.chatId,
                text="üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            
            if self.stats:
                self.stats.record_error("message_processing", str(e))
    
    async def test_event_processing(self, test_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
        
        Args:
            test_data: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        return {
            "test_successful": True,
            "processed_data": test_data,
            "timestamp": datetime.utcnow().isoformat()
        }
    
    async def _handle_new_message(self, payload: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            chat = payload.get("chat", {})
            from_user = payload.get("from", {})
            text = payload.get("text", "")
            
            chat_id = chat.get("chatId")
            user_id = from_user.get("userId")
            
            logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –≤ —á–∞—Ç–µ {chat_id}: {text}")
            
            return {"status": "processed", "chat_id": chat_id, "user_id": user_id}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {"status": "error", "error": str(e)}
    
    async def _handle_callback_query(self, payload: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
        """
        try:
            callback_data = payload.get("callbackData", "")
            chat_id = payload.get("message", {}).get("chat", {}).get("chatId")
            user_id = payload.get("from", {}).get("userId")
            
            logger.info(f"Callback –æ—Ç {user_id}: {callback_data}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –¥–∞–Ω–Ω—ã–µ
            await self._process_callback_action(callback_data, chat_id, user_id)
            
            return {"status": "processed", "callback_data": callback_data}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            return {"status": "error", "error": str(e)}
    
    async def _handle_edited_message(self, payload: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        return {"status": "ignored", "reason": "Edited messages not processed"}
    
    async def _handle_command_message(self, event: Event, bot: Bot):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        """
        text = event.text.strip()
        command_parts = text.split(' ', 1)
        command = command_parts[0][1:]  # –£–±–∏—Ä–∞–µ–º /
        args = command_parts[1] if len(command_parts) > 1 else ""
        
        chat_id = event.chat.chatId
        user_id = event.from_.userId
        
        try:
            if command == "search":
                await self._handle_search_command(bot, chat_id, user_id, args)
            elif command == "generate":
                await self._handle_generate_command(bot, chat_id, user_id, args)
            elif command == "status":
                await self._handle_status_command(bot, chat_id, user_id)
            elif command == "settings":
                await self._handle_settings_command(bot, chat_id, user_id)
            else:
                await bot.send_text(
                    chat_id=chat_id,
                    text=f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: `{command}`\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
                    parse_mode=ParseMode.MARKDOWNV2
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
            await bot.send_text(
                chat_id=chat_id,
                text="üòî –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã."
            )
    
    async def _process_ai_request(self, text: str, context: AIAssistantContext) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ AI API
        
        Args:
            text: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç AI
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π API
            if any(keyword in text.lower() for keyword in ["–Ω–∞–π–¥–∏", "–ø–æ–∏—Å–∫", "–∏—â–∏", "search"]):
                return await self._call_search_api(text, context)
            elif any(keyword in text.lower() for keyword in ["—Å–æ–∑–¥–∞–π", "–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "generate"]):
                return await self._call_generation_api(text, context)
            elif any(keyword in text.lower() for keyword in ["–∞–Ω–∞–ª–∏–∑", "–ø—Ä–æ–≤–µ—Ä—å", "analyze"]):
                return await self._call_analysis_api(text, context)
            else:
                # –û–±—â–∏–π —á–∞—Ç —Å AI
                return await self._call_chat_api(text, context)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ AI –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {
                "success": False,
                "error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
                "message": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ."
            }
    
    async def _call_search_api(self, query: str, context: AIAssistantContext) -> Dict[str, Any]:
        """
        –í—ã–∑–æ–≤ API –ø–æ–∏—Å–∫–∞
        """
        try:
            response = await self.api_client.post(
                "/api/v1/search",
                json={
                    "query": query,
                    "limit": 5,
                    "include_snippets": True
                },
                headers={"Authorization": f"Bearer {self._get_internal_token()}"}
            )
            
            if response.status_code == 200:
                data = response.json()
                return {
                    "success": True,
                    "type": "search_results",
                    "data": data,
                    "message": f"–ù–∞–π–¥–µ–Ω–æ {len(data.get('results', []))} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                }
            else:
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}"
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ search API: {e}")
            return {"success": False, "error": str(e)}
    
    async def _call_generation_api(self, prompt: str, context: AIAssistantContext) -> Dict[str, Any]:
        """
        –í—ã–∑–æ–≤ API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        try:
            response = await self.api_client.post(
                "/api/v1/generate",
                json={
                    "prompt": prompt,
                    "type": "general",
                    "context": context.user_preferences
                },
                headers={"Authorization": f"Bearer {self._get_internal_token()}"}
            )
            
            if response.status_code == 200:
                data = response.json()
                return {
                    "success": True,
                    "type": "generated_content",
                    "data": data,
                    "message": "–ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
                }
            else:
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code}"
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ generation API: {e}")
            return {"success": False, "error": str(e)}
    
    async def _call_analysis_api(self, text: str, context: AIAssistantContext) -> Dict[str, Any]:
        """
        –í—ã–∑–æ–≤ API –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            response = await self.api_client.post(
                "/api/v1/ai/ai_code_analysis",
                json={
                    "code": text,
                    "analysis_type": "comprehensive"
                },
                headers={"Authorization": f"Bearer {self._get_internal_token()}"}
            )
            
            if response.status_code == 200:
                data = response.json()
                return {
                    "success": True,
                    "type": "analysis_results",
                    "data": data,
                    "message": "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω"
                }
            else:
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {response.status_code}"
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ analysis API: {e}")
            return {"success": False, "error": str(e)}
    
    async def _call_chat_api(self, message: str, context: AIAssistantContext) -> Dict[str, Any]:
        """
        –í—ã–∑–æ–≤ chat API
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            history = [
                {"role": "user" if not msg.is_from_bot else "assistant", "content": msg.text}
                for msg in context.get_recent_messages(10)
                if msg.text
            ]
            
            response = await self.api_client.post(
                "/api/v1/ai/ai_advanced",
                json={
                    "message": message,
                    "history": history,
                    "stream": False
                },
                headers={"Authorization": f"Bearer {self._get_internal_token()}"}
            )
            
            if response.status_code == 200:
                data = response.json()
                return {
                    "success": True,
                    "type": "chat_response",
                    "data": data,
                    "message": data.get("response", "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
                }
            else:
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ —á–∞—Ç–∞: {response.status_code}"
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ chat API: {e}")
            return {"success": False, "error": str(e)}
    
    async def _send_ai_response(self, bot: Bot, chat_id: str, response: Dict[str, Any]):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        try:
            if not response.get("success"):
                await bot.send_text(
                    chat_id=chat_id,
                    text=f"‚ùå {response.get('error', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')}"
                )
                return
            
            response_type = response.get("type", "unknown")
            data = response.get("data", {})
            
            if response_type == "search_results":
                await self._send_search_results(bot, chat_id, data)
            elif response_type == "generated_content":
                await self._send_generated_content(bot, chat_id, data)
            elif response_type == "analysis_results":
                await self._send_analysis_results(bot, chat_id, data)
            elif response_type == "chat_response":
                await self._send_chat_response(bot, chat_id, data)
            else:
                await bot.send_text(
                    chat_id=chat_id,
                    text=f"‚úÖ {response.get('message', '–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞')}"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            await bot.send_text(
                chat_id=chat_id,
                text="üòî –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞."
            )
    
    def _get_or_create_user_context(self, user_id: str, chat_id: str) -> AIAssistantContext:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id not in self.user_contexts:
            self.user_contexts[user_id] = AIAssistantContext(
                user_id=user_id,
                chat_id=chat_id
            )
        return self.user_contexts[user_id]
    
    def _create_main_menu_keyboard(self) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        keyboard = InlineKeyboardMarkup(buttons_in_row=2)
        
        keyboard.add(
            KeyboardButton(
                text="üîç –ü–æ–∏—Å–∫",
                callback_data="action:search",
                style=StyleKeyboard.PRIMARY
            ),
            KeyboardButton(
                text="üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è",
                callback_data="action:generate", 
                style=StyleKeyboard.BASE
            ),
            KeyboardButton(
                text="üîß –ê–Ω–∞–ª–∏–∑",
                callback_data="action:analyze",
                style=StyleKeyboard.ATTENTION
            ),
            KeyboardButton(
                text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞",
                callback_data="action:help",
                style=StyleKeyboard.BASE
            )
        )
        
        return keyboard
    
    def _get_internal_token(self) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö API –≤—ã–∑–æ–≤–æ–≤
        """
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        # –í–æ–∑–º–æ–∂–Ω–æ, –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è service token
        return "internal-service-token"
    
    async def _handle_search_command(self, bot: Bot, chat_id: str, user_id: str, query: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞"""
        if not query:
            await bot.send_text(chat_id, "‚ùì –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞: `/search –≤–∞—à –∑–∞–ø—Ä–æ—Å`")
            return
            
        context = self._get_or_create_user_context(user_id, chat_id)
        response = await self._call_search_api(query, context)
        await self._send_ai_response(bot, chat_id, response)
    
    async def _handle_generate_command(self, bot: Bot, chat_id: str, user_id: str, prompt: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        if not prompt:
            await bot.send_text(chat_id, "‚ùì –£–∫–∞–∂–∏—Ç–µ —á—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å: `/generate –æ–ø–∏—Å–∞–Ω–∏–µ`")
            return
            
        context = self._get_or_create_user_context(user_id, chat_id)
        response = await self._call_generation_api(prompt, context)
        await self._send_ai_response(bot, chat_id, response)
    
    async def _handle_status_command(self, bot: Bot, chat_id: str, user_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            response = await self.api_client.get(
                "/api/v1/health",
                headers={"Authorization": f"Bearer {self._get_internal_token()}"}
            )
            
            if response.status_code == 200:
                data = response.json()
                status_text = f"üü¢ **–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç**\n\n–°—Ç–∞—Ç—É—Å: {data.get('status', 'unknown')}"
            else:
                status_text = "üî¥ **–°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**"
                
            await bot.send_text(chat_id, status_text, parse_mode=ParseMode.MARKDOWNV2)
            
        except Exception as e:
            await bot.send_text(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
    
    async def _handle_settings_command(self, bot: Bot, chat_id: str, user_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        context = self._get_or_create_user_context(user_id, chat_id)
        
        settings_text = f"""‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**

**ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** `{user_id}`
**ID —á–∞—Ç–∞:** `{chat_id}`
**–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è:** {context.active_session or '–ù–µ—Ç'}
**–°–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏:** {len(context.conversation_history)}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"""

        keyboard = InlineKeyboardMarkup(buttons_in_row=1)
        keyboard.add(
            KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="settings:clear_history"),
            KeyboardButton("üîÑ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è", callback_data="settings:new_session"),
            KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="settings:stats")
        )
        
        await bot.send_text(
            chat_id, 
            settings_text, 
            parse_mode=ParseMode.MARKDOWNV2,
            inline_keyboard_markup=keyboard
        )
    
    async def _process_callback_action(self, callback_data: str, chat_id: str, user_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–µ–π—Å—Ç–≤–∏–π"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
        logger.info(f"Processing callback: {callback_data} for user {user_id}")
    
    async def _send_search_results(self, bot: Bot, chat_id: str, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        results = data.get("results", [])
        if not results:
            await bot.send_text(chat_id, "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        text = "üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:**\n\n"
        for i, result in enumerate(results[:5], 1):
            title = result.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            score = result.get("score", 0)
            text += f"{i}. **{title}** (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.2f})\n"
            
        await bot.send_text(chat_id, text, parse_mode=ParseMode.MARKDOWNV2)
    
    async def _send_generated_content(self, bot: Bot, chat_id: str, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        content = data.get("content", "–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        await bot.send_text(chat_id, f"üìù **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:**\n\n{content}")
    
    async def _send_analysis_results(self, bot: Bot, chat_id: str, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        analysis = data.get("analysis", "–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        await bot.send_text(chat_id, f"üîß **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:**\n\n{analysis}")
    
    async def _send_chat_response(self, bot: Bot, chat_id: str, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–∞—Ç–∞"""
        response = data.get("response", "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")
        await bot.send_text(chat_id, response)
    
    async def _check_vk_user_access(self, user_id: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ VK –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ VK OAuth API
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK Teams
            
        Returns:
            True –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å–Ω–∞—á–∞–ª–∞
            cache_key = f"vk_access_{user_id}"
            if cache_key in self._user_cache:
                cache_data = self._user_cache[cache_key]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫—ç—à –Ω–µ —É—Å—Ç–∞—Ä–µ–ª (5 –º–∏–Ω—É—Ç)
                if time.time() - cache_data.get("timestamp", 0) < 300:
                    return cache_data.get("has_access", False)
            
            # –í—ã–∑—ã–≤–∞–µ–º VK OAuth API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
            response = await self.api_client.get(
                f"/api/v1/auth/vk/check-access/{user_id}",
                headers={"Authorization": f"Bearer {self._get_internal_token()}"}
            )
            
            if response.status_code == 200:
                data = response.json()
                has_access = data.get("has_access", False)
                
                # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self._user_cache[cache_key] = {
                    "has_access": has_access,
                    "timestamp": time.time()
                }
                
                logger.info(f"VK user {user_id} access check: {has_access}")
                return has_access
            else:
                logger.warning(f"VK access check failed for user {user_id}: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"Error checking VK user access for {user_id}: {e}")
            return False
    
    async def _send_access_denied_message(self, bot: Bot, chat_id: str, user_id: str):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            chat_id: ID —á–∞—Ç–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            access_denied_text = """üö´ **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç VK –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.

**–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**
1. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ VK OAuth
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤–∞—à VK ID –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

**–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:**
‚Ä¢ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à VK ID: `{user_id}`

–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! üôè"""
            
            await bot.send_text(
                chat_id=chat_id,
                text=access_denied_text.format(user_id=user_id),
                parse_mode=ParseMode.MARKDOWNV2
            )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∫–∞–∑–æ–≤
            if self.stats:
                self.stats.record_error("access_denied", f"VK user {user_id} denied access", {
                    "user_id": user_id,
                    "chat_id": chat_id
                })
            
        except Exception as e:
            logger.error(f"Error sending access denied message: {e}")
            # Fallback –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_text(
                chat_id=chat_id,
                text="üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞
_bot_adapter: Optional[VKTeamsBotAdapter] = None


async def get_vk_teams_bot_adapter() -> VKTeamsBotAdapter:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ VK Teams Bot Adapter
    
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä VKTeamsBotAdapter
    """
    global _bot_adapter
    
    if _bot_adapter is None:
        _bot_adapter = VKTeamsBotAdapter()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        from domain.vk_teams.bot_service import get_vk_teams_bot_service
        bot_service = await get_vk_teams_bot_service()
        _bot_adapter.stats = bot_service.stats
    
    return _bot_adapter 