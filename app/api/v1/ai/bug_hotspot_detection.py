"""
üî• Bug Hotspot Detection API - Phase 4B.3

FastAPI endpoints –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω –≤ –∫–æ–¥–µ.
"""

import logging
from datetime import datetime
from typing import Any, Dict, List, Optional

from fastapi import APIRouter, Depends, HTTPException
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field

from app.security.auth import get_current_user
from domain.monitoring.bug_hotspot_detection_engine import (
    BugHotspot, HotspotAnalysisReport, HotspotSeverity,
    get_hotspot_detection_engine)

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/api/v1/hotspots", tags=["Bug Hotspot Detection"])


class HotspotAnalysisRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ hotspot'–æ–≤"""

    code_content: str = Field(..., description="–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    file_path: str = Field(default="", description="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É")
    analysis_type: str = Field(default="comprehensive", description="–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞")


class QuickHotspotCheckRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –±—ã—Å—Ç—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É hotspot'–æ–≤"""

    code_content: str = Field(..., description="–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    file_path: str = Field(default="", description="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É")


@router.post("/analyze")
async def analyze_code_hotspots(
    request: HotspotAnalysisRequest, current_user: dict = Depends(get_current_user)
):
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω –≤ –∫–æ–¥–µ"""
    try:
        logger.info(f"üî• –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ hotspot'–æ–≤ –¥–ª—è: {request.file_path}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        engine = await get_hotspot_detection_engine()

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
        report = await engine.analyze_code_hotspots(
            request.code_content, request.file_path
        )

        # –ü–æ–¥—Å—á–µ—Ç hotspot'–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        severity_breakdown = {"critical": 0, "high": 0, "medium": 0, "low": 0}
        category_breakdown = {}

        for hotspot in report.hotspots:
            # –ü–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
            severity = hotspot.severity.value
            if severity in severity_breakdown:
                severity_breakdown[severity] += 1

            # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            category = hotspot.category.value
            category_breakdown[category] = category_breakdown.get(category, 0) + 1

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response_data = {
            "report_id": report.report_id,
            "target": report.target,
            "analysis_results": {
                "total_hotspots": report.total_hotspots,
                "critical_hotspots": report.critical_hotspots,
                "overall_risk_score": report.overall_risk_score,
                "severity_breakdown": severity_breakdown,
                "category_breakdown": category_breakdown,
            },
            "hotspots": [
                {
                    "hotspot_id": h.hotspot_id,
                    "category": h.category.value,
                    "severity": h.severity.value,
                    "title": h.title,
                    "description": h.description,
                    "location": h.location,
                    "risk_score": h.risk_score,
                    "confidence": h.confidence,
                    "recommendations": h.recommendations,
                }
                for h in report.hotspots
            ],
            "recommendations": report.recommendations,
            "analysis_duration": report.analysis_duration,
            "created_at": report.created_at.isoformat(),
        }

        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {report.total_hotspots} hotspot'–æ–≤")
        return JSONResponse(content=response_data)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ hotspot'–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/quick-check")
async def quick_hotspot_check(
    request: QuickHotspotCheckRequest, current_user: dict = Depends(get_current_user)
):
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω"""
    try:
        logger.info(f"‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ hotspot'–æ–≤: {request.file_path}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        engine = await get_hotspot_detection_engine()

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        result = await engine.quick_hotspot_check(
            request.code_content, request.file_path
        )

        logger.info(
            f"‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result['potential_issues']} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"
        )
        return JSONResponse(content=result)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/metrics")
async def get_hotspot_detection_metrics(current_user: dict = Depends(get_current_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ hotspot'–æ–≤"""
    try:
        engine = await get_hotspot_detection_engine()
        metrics = engine.get_detection_metrics()
        return JSONResponse(content=metrics)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/status")
async def get_hotspot_detection_status(current_user: dict = Depends(get_current_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ hotspot'–æ–≤"""
    try:
        engine = await get_hotspot_detection_engine()
        metrics = engine.get_detection_metrics()

        return JSONResponse(
            content={
                "engine_status": "active",
                "system_health": "healthy",
                "analyses_performed": metrics["metrics"]["analyses_performed"],
                "hotspots_detected": metrics["metrics"]["hotspots_detected"],
                "avg_risk_score": metrics["metrics"]["avg_risk_score"],
                "capabilities": [
                    "complexity_analysis",
                    "code_smell_detection",
                    "anti_pattern_detection",
                    "performance_issue_detection",
                    "maintainability_analysis",
                ],
                "last_updated": datetime.now().isoformat(),
            }
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    return JSONResponse(
        content={
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "service": "bug_hotspot_detection",
        }
    )
