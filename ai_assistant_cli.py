#!/usr/bin/env python3
"""
ü§ñ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è AI Assistant
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 ai_assistant_cli.py [–∫–æ–º–∞–Ω–¥–∞] [–æ–ø—Ü–∏–∏]
"""

import sys
import json
import requests
import argparse
from typing import Dict, Any, List
import os

class AIClient:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
    
    def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            response = self.session.get(f"{self.base_url}/health")
            return response.json()
        except Exception as e:
            return {"error": str(e)}
    
    def chat(self, message: str, context: str = "") -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
        try:
            data = {
                "message": message,
                "context": context
            }
            response = self.session.post(f"{self.base_url}/api/v1/chat", json=data)
            return response.json()
        except Exception as e:
            return {"error": str(e)}
    
    def code_review(self, code: str, language: str = "python") -> Dict[str, Any]:
        """–ö–æ–¥ —Ä–µ–≤—å—é"""
        try:
            data = {
                "code": code,
                "language": language
            }
            response = self.session.post(f"{self.base_url}/api/v1/code-review", json=data)
            return response.json()
        except Exception as e:
            return {"error": str(e)}
    
    def search(self, query: str, limit: int = 10) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        try:
            data = {
                "query": query,
                "limit": limit
            }
            response = self.session.post(f"{self.base_url}/api/v1/search", json=data)
            return response.json()
        except Exception as e:
            return {"error": str(e)}
    
    def generate_rfc(self, title: str, description: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è RFC"""
        try:
            data = {
                "title": title,
                "description": description
            }
            response = self.session.post(f"{self.base_url}/api/v1/generate-rfc", json=data)
            return response.json()
        except Exception as e:
            return {"error": str(e)}

def print_json(data: Dict[str, Any]):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ JSON"""
    print(json.dumps(data, indent=2, ensure_ascii=False))

def interactive_chat(client: AIClient):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç"""
    print("ü§ñ AI Assistant - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç")
    print("–í–≤–µ–¥–∏—Ç–µ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    print("-" * 50)
    
    while True:
        try:
            message = input("–í—ã: ").strip()
            if message.lower() in ['quit', 'exit', 'q']:
                break
            
            if not message:
                continue
            
            print("ü§ñ AI: ", end="", flush=True)
            response = client.chat(message)
            
            if "error" in response:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response['error']}")
            else:
                print(response.get("response", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"))
            
            print()
            
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    parser = argparse.ArgumentParser(description="AI Assistant CLI")
    parser.add_argument("--url", default="http://localhost:8000", help="URL —Å–µ—Ä–≤–µ—Ä–∞")
    parser.add_argument("--format", choices=["json", "text"], default="text", help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞")
    
    subparsers = parser.add_subparsers(dest="command", help="–ö–æ–º–∞–Ω–¥—ã")
    
    # Health check
    health_parser = subparsers.add_parser("health", help="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã")
    
    # Chat
    chat_parser = subparsers.add_parser("chat", help="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
    chat_parser.add_argument("message", help="–°–æ–æ–±—â–µ–Ω–∏–µ")
    chat_parser.add_argument("--context", default="", help="–ö–æ–Ω—Ç–µ–∫—Å—Ç")
    
    # Interactive chat
    subparsers.add_parser("interactive", help="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç")
    
    # Code review
    review_parser = subparsers.add_parser("review", help="–ö–æ–¥ —Ä–µ–≤—å—é")
    review_parser.add_argument("file", help="–§–∞–π–ª —Å –∫–æ–¥–æ–º")
    review_parser.add_argument("--language", default="python", help="–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # Search
    search_parser = subparsers.add_parser("search", help="–ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    search_parser.add_argument("query", help="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    search_parser.add_argument("--limit", type=int, default=10, help="–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # RFC generation
    rfc_parser = subparsers.add_parser("rfc", help="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è RFC")
    rfc_parser.add_argument("title", help="–ó–∞–≥–æ–ª–æ–≤–æ–∫ RFC")
    rfc_parser.add_argument("--description", default="", help="–û–ø–∏—Å–∞–Ω–∏–µ")
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    client = AIClient(args.url)
    
    try:
        if args.command == "health":
            result = client.health_check()
            if args.format == "json":
                print_json(result)
            else:
                if "error" in result:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                else:
                    print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result.get('status', 'OK')}")
        
        elif args.command == "chat":
            result = client.chat(args.message, args.context)
            if args.format == "json":
                print_json(result)
            else:
                if "error" in result:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                else:
                    print(f"ü§ñ –û—Ç–≤–µ—Ç: {result.get('response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}")
        
        elif args.command == "interactive":
            interactive_chat(client)
        
        elif args.command == "review":
            if not os.path.exists(args.file):
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.file}")
                return
            
            with open(args.file, 'r', encoding='utf-8') as f:
                code = f.read()
            
            result = client.code_review(code, args.language)
            if args.format == "json":
                print_json(result)
            else:
                if "error" in result:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                else:
                    print("üîç –†–ï–ó–£–õ–¨–¢–ê–¢ –ö–û–î –†–ï–í–¨–Æ:")
                    print(f"–ö–∞—á–µ—Å—Ç–≤–æ: {result.get('quality_score', 'N/A')}")
                    print(f"–ü—Ä–æ–±–ª–µ–º—ã: {result.get('issues', [])}")
                    print(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {result.get('recommendations', [])}")
        
        elif args.command == "search":
            result = client.search(args.query, args.limit)
            if args.format == "json":
                print_json(result)
            else:
                if "error" in result:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                else:
                    print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è '{args.query}':")
                    for i, doc in enumerate(result.get('documents', []), 1):
                        print(f"{i}. {doc.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
                        print(f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {doc.get('score', 'N/A')}")
                        print(f"   –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {doc.get('content', '')[:100]}...")
                        print()
        
        elif args.command == "rfc":
            result = client.generate_rfc(args.title, args.description)
            if args.format == "json":
                print_json(result)
            else:
                if "error" in result:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                else:
                    print("üìÑ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô RFC:")
                    print(result.get('rfc_content', '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ'))
        
    except KeyboardInterrupt:
        print("\nüëã –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 