"""
üî• Bug Hotspot Detection Engine - Phase 4B.3

–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω –≤ –∫–æ–¥–µ.
"""

import ast
import asyncio
import logging
import re
from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional
from uuid import uuid4

logger = logging.getLogger(__name__)


class HotspotSeverity(Enum):
    """–£—Ä–æ–≤–Ω–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ hotspot'–æ–≤"""

    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"


class HotspotCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω"""

    COMPLEXITY = "complexity"
    CODE_SMELL = "code_smell"
    ANTI_PATTERN = "anti_pattern"
    PERFORMANCE = "performance"
    MAINTAINABILITY = "maintainability"


class CodeMetricType(Enum):
    """–¢–∏–ø—ã –º–µ—Ç—Ä–∏–∫ –∫–æ–¥–∞"""

    CYCLOMATIC_COMPLEXITY = "cyclomatic_complexity"
    LINES_OF_CODE = "lines_of_code"
    FUNCTION_LENGTH = "function_length"
    PARAMETER_COUNT = "parameter_count"


@dataclass
class CodeMetric:
    """–ú–µ—Ç—Ä–∏–∫–∞ –∫–æ–¥–∞"""

    metric_type: CodeMetricType
    value: float
    threshold: float
    severity: HotspotSeverity
    location: str
    description: str


@dataclass
class BugHotspot:
    """–ü—Ä–æ–±–ª–µ–º–Ω–∞—è –∑–æ–Ω–∞ –≤ –∫–æ–¥–µ"""

    hotspot_id: str = field(default_factory=lambda: str(uuid4()))
    category: HotspotCategory = HotspotCategory.COMPLEXITY
    severity: HotspotSeverity = HotspotSeverity.MEDIUM
    title: str = ""
    description: str = ""
    location: str = ""
    file_path: str = ""
    risk_score: float = 0.0
    confidence: float = 0.8
    recommendations: List[str] = field(default_factory=list)
    detected_at: datetime = field(default_factory=datetime.now)


@dataclass
class HotspotAnalysisReport:
    """–û—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É hotspot'–æ–≤"""

    report_id: str = field(default_factory=lambda: str(uuid4()))
    target: str = ""
    total_hotspots: int = 0
    critical_hotspots: int = 0
    overall_risk_score: float = 0.0
    hotspots: List[BugHotspot] = field(default_factory=list)
    recommendations: List[str] = field(default_factory=list)
    analysis_duration: float = 0.0
    created_at: datetime = field(default_factory=datetime.now)


class BugHotspotDetectionEngine:
    """–î–≤–∏–∂–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω –≤ –∫–æ–¥–µ"""

    def __init__(self):
        # –ú–µ—Ç—Ä–∏–∫–∏ –¥–≤–∏–∂–∫–∞
        self.metrics = {
            "analyses_performed": 0,
            "hotspots_detected": 0,
            "critical_hotspots": 0,
            "avg_risk_score": 0.0,
        }

    async def analyze_code_hotspots(
        self, code: str, file_path: str = ""
    ) -> HotspotAnalysisReport:
        """–ê–Ω–∞–ª–∏–∑ hotspot'–æ–≤ –≤ –∫–æ–¥–µ"""
        analysis_start = datetime.now()

        logger.info(f"üî• –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ hotspot'–æ–≤ –¥–ª—è: {file_path}")

        report = HotspotAnalysisReport(target=file_path or "code_analysis")
        all_hotspots = []

        # –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
        complexity_hotspots = await self._analyze_complexity(code, file_path)
        all_hotspots.extend(complexity_hotspots)

        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ code smells
        smell_hotspots = await self._detect_code_smells(code, file_path)
        all_hotspots.extend(smell_hotspots)

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report.hotspots = all_hotspots
        report.total_hotspots = len(all_hotspots)
        report.critical_hotspots = len(
            [h for h in all_hotspots if h.severity == HotspotSeverity.CRITICAL]
        )
        report.overall_risk_score = self._calculate_overall_risk_score(all_hotspots)
        report.recommendations = self._generate_recommendations(all_hotspots)

        analysis_duration = (datetime.now() - analysis_start).total_seconds()
        report.analysis_duration = analysis_duration

        self._update_metrics(report)

        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(all_hotspots)} hotspot'–æ–≤")
        return report

    async def _analyze_complexity(self, code: str, file_path: str) -> List[BugHotspot]:
        """–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞"""
        hotspots = []
        lines = code.split("\n")
        loc = len([line for line in lines if line.strip()])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if loc > 300:
            hotspots.append(
                BugHotspot(
                    category=HotspotCategory.COMPLEXITY,
                    severity=HotspotSeverity.HIGH,
                    title="–ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª",
                    description=f"–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {loc} —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞",
                    location=file_path,
                    file_path=file_path,
                    risk_score=8.0,
                    recommendations=[
                        "–†–∞–∑–±–µ–π—Ç–µ –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ–Ω—å—à–∏—Ö",
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø –µ–¥–∏–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏",
                    ],
                )
            )

        # –ü–æ–∏—Å–∫ —Å–ª–æ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —á–µ—Ä–µ–∑ regex
        function_pattern = r"def\s+(\w+)\s*\([^)]*\):"
        functions = re.finditer(function_pattern, code)

        for func_match in functions:
            func_name = func_match.group(1)
            if len(func_name) > 30:  # –î–ª–∏–Ω–Ω–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
                line_number = code[: func_match.start()].count("\n") + 1
                hotspots.append(
                    BugHotspot(
                        category=HotspotCategory.MAINTAINABILITY,
                        severity=HotspotSeverity.LOW,
                        title="–î–ª–∏–Ω–Ω–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏",
                        description=f"–§—É–Ω–∫—Ü–∏—è {func_name} –∏–º–µ–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è",
                        location=f"{file_path}:line {line_number}",
                        file_path=file_path,
                        risk_score=3.0,
                        recommendations=[
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –∫—Ä–∞—Ç–∫–∏–µ, –Ω–æ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞"
                        ],
                    )
                )

        return hotspots

    async def _detect_code_smells(self, code: str, file_path: str) -> List[BugHotspot]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ code smells"""
        hotspots = []

        # –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        except_pattern = r"except.*?:\s*\n\s*pass"
        except_matches = re.finditer(except_pattern, code, re.MULTILINE)

        for match in except_matches:
            line_number = code[: match.start()].count("\n") + 1
            hotspots.append(
                BugHotspot(
                    category=HotspotCategory.ANTI_PATTERN,
                    severity=HotspotSeverity.HIGH,
                    title="–ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π",
                    description="–ò—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–∞–≤–ª—è—é—Ç—Å—è –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                    location=f"{file_path}:line {line_number}",
                    file_path=file_path,
                    risk_score=7.0,
                    recommendations=[
                        "–î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π",
                        "–û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º",
                    ],
                )
            )

        # –ú–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞
        magic_pattern = r"\b(?<![\w\.])\d{2,}\b(?![\w\.])"
        magic_matches = re.finditer(magic_pattern, code)
        magic_count = len(list(magic_matches))

        if magic_count > 5:
            hotspots.append(
                BugHotspot(
                    category=HotspotCategory.CODE_SMELL,
                    severity=HotspotSeverity.MEDIUM,
                    title="–ú–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞",
                    description=f"–ù–∞–π–¥–µ–Ω–æ {magic_count} –º–∞–≥–∏—á–µ—Å–∫–∏—Ö —á–∏—Å–µ–ª –≤ –∫–æ–¥–µ",
                    location=file_path,
                    file_path=file_path,
                    risk_score=5.0,
                    recommendations=[
                        "–í—ã–¥–µ–ª–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã",
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ enum –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π",
                    ],
                )
            )

        return hotspots

    def _calculate_overall_risk_score(self, hotspots: List[BugHotspot]) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ä–∏—Å–∫-—Å–∫–æ—Ä–∞"""
        if not hotspots:
            return 0.0

        total_score = sum(h.risk_score for h in hotspots)
        return round(total_score / len(hotspots), 2)

    def _generate_recommendations(self, hotspots: List[BugHotspot]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []

        critical_count = len(
            [h for h in hotspots if h.severity == HotspotSeverity.CRITICAL]
        )
        high_count = len([h for h in hotspots if h.severity == HotspotSeverity.HIGH])

        if critical_count > 0:
            recommendations.append(
                f"üö® –ö–†–ò–¢–ò–ß–ù–û: –ù–∞–π–¥–µ–Ω–æ {critical_count} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º"
            )

        if high_count > 0:
            recommendations.append(
                f"‚ö†Ô∏è –í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢: {high_count} –ø—Ä–æ–±–ª–µ–º —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
            )

        recommendations.extend(
            [
                "üîç –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞",
                "üìö –û–±—É—á–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
            ]
        )

        return recommendations[:5]

    def _update_metrics(self, report: HotspotAnalysisReport):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–≤–∏–∂–∫–∞"""
        self.metrics["analyses_performed"] += 1
        self.metrics["hotspots_detected"] += report.total_hotspots
        self.metrics["critical_hotspots"] += report.critical_hotspots

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∏—Å–∫-—Å–∫–æ—Ä–∞
        total_analyses = self.metrics["analyses_performed"]
        current_avg = self.metrics["avg_risk_score"]
        new_avg = (
            (current_avg * (total_analyses - 1)) + report.overall_risk_score
        ) / total_analyses
        self.metrics["avg_risk_score"] = round(new_avg, 2)

    async def quick_hotspot_check(
        self, code: str, file_path: str = ""
    ) -> Dict[str, Any]:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ hotspot'–æ–≤"""
        start_time = datetime.now()

        lines = code.split("\n")
        loc = len([line for line in lines if line.strip()])

        potential_issues = 0
        if loc > 200:
            potential_issues += 1
        if len(re.findall(r"except.*?:\s*\n\s*pass", code)) > 0:
            potential_issues += 2

        risk_level = (
            "high"
            if potential_issues >= 3
            else "medium" if potential_issues >= 2 else "low"
        )
        duration = (datetime.now() - start_time).total_seconds()

        return {
            "file_path": file_path,
            "lines_of_code": loc,
            "potential_issues": potential_issues,
            "risk_level": risk_level,
            "scan_duration": duration,
            "timestamp": datetime.now().isoformat(),
        }

    def get_detection_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        return {
            "engine_status": "active",
            "metrics": self.metrics,
            "last_updated": datetime.now().isoformat(),
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_hotspot_detection_engine: Optional[BugHotspotDetectionEngine] = None


async def get_hotspot_detection_engine() -> BugHotspotDetectionEngine:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ hotspot'–æ–≤"""
    global _hotspot_detection_engine
    if _hotspot_detection_engine is None:
        _hotspot_detection_engine = BugHotspotDetectionEngine()
    return _hotspot_detection_engine
