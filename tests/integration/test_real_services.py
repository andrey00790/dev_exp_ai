"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –∏–∑ Docker containers
"""
import pytest
import asyncio
from unittest.mock import patch
import os
from sqlalchemy import text


class TestRealServicesIntegration:
    """–¢–µ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
    
    def test_services_availability(self, services_status):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        if not services_status:
            pytest.skip("Services status not available")
        
        print(f"üìä Services status: {services_status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω
        available_count = sum(1 for status in services_status.values() if status)
        assert available_count > 0, "No services are available"
    
    def test_database_connection(self, test_database, test_config):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if not test_database or not test_config:
            pytest.skip("Test database not available")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î
        assert test_database is not None
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —Å text() –¥–ª—è SQLAlchemy 2.0
        with test_database.connect() as conn:
            result = conn.execute(text("SELECT 1 as test_value"))
            row = result.fetchone()
            assert row[0] == 1
    
    def test_redis_connection(self, test_redis, test_config):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
        if not test_redis or not test_config:
            pytest.skip("Test Redis not available")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis
        assert test_redis is not None
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        test_redis.set("test_key", "test_value")
        value = test_redis.get("test_key")
        assert value.decode() == "test_value"
        
        # –û—á–∏—â–∞–µ–º
        test_redis.delete("test_key")
    
    def test_qdrant_connection(self, test_qdrant, test_config):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant"""
        if not test_qdrant or not test_config:
            pytest.skip("Test Qdrant not available")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Qdrant
        assert test_qdrant is not None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            collections = test_qdrant.get_collections()
            assert collections is not None
        except Exception as e:
            pytest.skip(f"Qdrant not fully available: {e}")


class TestAnalyticsWithRealServices:
    """–¢–µ—Å—Ç—ã analytics –º–æ–¥—É–ª–µ–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
    
    @pytest.mark.skipif(not os.getenv("TEST_WITH_REAL_SERVICES"), 
                       reason="Real services tests disabled")
    def test_analytics_aggregator_with_db(self, test_database):
        """–¢–µ—Å—Ç analytics aggregator —Å —Ä–µ–∞–ª—å–Ω–æ–π –ë–î"""
        if not test_database:
            pytest.skip("Test database not available")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π aggregator
        try:
            from app.analytics.aggregator import DataAggregator
            from app.analytics.models import MetricType, AggregationPeriod
            from datetime import datetime
            
            # –°–æ–∑–¥–∞–µ–º mock —Å–µ—Å—Å–∏–∏ –ë–î
            from sqlalchemy.orm import sessionmaker
            Session = sessionmaker(bind=test_database)
            session = Session()
            
            aggregator = DataAggregator(session)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
            assert aggregator is not None
            assert aggregator.db == session
            
            session.close()
            
        except ImportError as e:
            pytest.skip(f"Analytics modules not available: {e}")
    
    @pytest.mark.skipif(not os.getenv("TEST_WITH_REAL_SERVICES"), 
                       reason="Real services tests disabled")  
    def test_analytics_insights_with_db(self, test_database):
        """–¢–µ—Å—Ç analytics insights —Å —Ä–µ–∞–ª—å–Ω–æ–π –ë–î"""
        if not test_database:
            pytest.skip("Test database not available")
        
        try:
            from app.analytics.insights import AnalyticsInsights
            
            # –°–æ–∑–¥–∞–µ–º mock –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            insights = AnalyticsInsights()
            assert insights is not None
            
        except ImportError as e:
            pytest.skip(f"Analytics insights not available: {e}")


class TestServicesWithRealDependencies:
    """–¢–µ—Å—Ç—ã services –º–æ–¥—É–ª–µ–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"""
    
    @pytest.mark.skipif(not os.getenv("TEST_WITH_REAL_SERVICES"), 
                       reason="Real services tests disabled")
    def test_vector_search_service_with_qdrant(self, test_qdrant):
        """–¢–µ—Å—Ç vector search service —Å —Ä–µ–∞–ª—å–Ω—ã–º Qdrant"""
        if not test_qdrant:
            pytest.skip("Test Qdrant not available")
        
        try:
            from app.services.vector_search_service import VectorSearchService
            
            service = VectorSearchService()
            assert service is not None
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
            # (—Ä–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
            
        except ImportError as e:
            pytest.skip(f"Vector search service not available: {e}")
    
    @pytest.mark.skipif(not os.getenv("TEST_WITH_REAL_SERVICES"), 
                       reason="Real services tests disabled")
    def test_llm_service_with_mock_openai(self, test_config):
        """–¢–µ—Å—Ç LLM service —Å mock OpenAI API"""
        if not test_config:
            pytest.skip("Test config not available")
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è mock API
            os.environ["OPENAI_API_BASE"] = test_config.OPENAI_API_BASE
            os.environ["OPENAI_API_KEY"] = test_config.OPENAI_API_KEY
            
            from app.services.llm_service import LLMService
            
            service = LLMService()
            assert service is not None
            
        except ImportError as e:
            pytest.skip(f"LLM service not available: {e}")
    
    @pytest.mark.skipif(not os.getenv("TEST_WITH_REAL_SERVICES"), 
                       reason="Real services tests disabled")
    def test_realtime_monitoring_with_redis(self, test_redis):
        """–¢–µ—Å—Ç realtime monitoring service —Å —Ä–µ–∞–ª—å–Ω—ã–º Redis"""
        if not test_redis:
            pytest.skip("Test Redis not available")
        
        try:
            from app.services.realtime_monitoring_service import RealtimeMonitoringService
            
            service = RealtimeMonitoringService()
            assert service is not None
            
        except ImportError as e:
            pytest.skip(f"Realtime monitoring service not available: {e}")


class TestMonitoringWithRealServices:
    """–¢–µ—Å—Ç—ã monitoring –º–æ–¥—É–ª–µ–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
    
    @pytest.mark.skipif(not os.getenv("TEST_WITH_REAL_SERVICES"), 
                       reason="Real services tests disabled")
    def test_metrics_collector_with_real_system(self):
        """–¢–µ—Å—Ç metrics collector —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        try:
            from app.monitoring.metrics import MetricsCollector
            
            collector = MetricsCollector()
            assert collector is not None
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±–æ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            metrics = collector.collect_system_metrics()
            assert metrics is not None
            assert "cpu_percent" in metrics
            assert "memory_percent" in metrics
            
        except ImportError as e:
            pytest.skip(f"Metrics collector not available: {e}")
    
    @pytest.mark.skipif(not os.getenv("TEST_WITH_REAL_SERVICES"), 
                       reason="Real services tests disabled")
    def test_apm_tracker_with_real_data(self):
        """–¢–µ—Å—Ç APM tracker —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            from app.monitoring.apm import APMTracker
            
            tracker = APMTracker()
            assert tracker is not None
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            txn_id = tracker.start_transaction("test_transaction", "test_user")
            assert txn_id is not None
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            result = tracker.end_transaction(txn_id, "success")
            assert result is not None
            
        except ImportError as e:
            pytest.skip(f"APM tracker not available: {e}")


class TestFullStackIntegration:
    """–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    
    @pytest.mark.skipif(not os.getenv("TEST_WITH_REAL_SERVICES"), 
                       reason="Real services tests disabled")
    def test_full_search_workflow(self, test_database, test_qdrant, test_redis):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow –ø–æ–∏—Å–∫–∞"""
        if not all([test_database, test_qdrant, test_redis]):
            pytest.skip("Not all services available for full workflow test")
        
        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∫–æ–≥–¥–∞ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã
        pytest.skip("Full workflow test - to be implemented")
    
    @pytest.mark.skipif(not os.getenv("TEST_WITH_REAL_SERVICES"), 
                       reason="Real services tests disabled")
    def test_full_generation_workflow(self, test_database, test_config):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        if not all([test_database, test_config]):
            pytest.skip("Not all services available for generation workflow test")
        
        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∫–æ–≥–¥–∞ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã
        pytest.skip("Generation workflow test - to be implemented")


class TestPerformanceWithRealServices:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
    
    @pytest.mark.skipif(not os.getenv("TEST_WITH_REAL_SERVICES"), 
                       reason="Real services tests disabled")
    def test_database_performance(self, test_database):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î"""
        if not test_database:
            pytest.skip("Test database not available")
        
        import time
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –∏–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        start_time = time.time()
        
        with test_database.connect() as conn:
            for i in range(100):
                result = conn.execute(text("SELECT 1"))
                result.fetchone()
        
        end_time = time.time()
        duration = end_time - start_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±—ã—Å—Ç—Ä–æ
        assert duration < 5.0, f"Database queries too slow: {duration}s"
    
    @pytest.mark.skipif(not os.getenv("TEST_WITH_REAL_SERVICES"), 
                       reason="Real services tests disabled")
    def test_redis_performance(self, test_redis):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Redis"""
        if not test_redis:
            pytest.skip("Test Redis not available")
        
        import time
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å Redis
        start_time = time.time()
        
        for i in range(1000):
            test_redis.set(f"perf_test_{i}", f"value_{i}")
            test_redis.get(f"perf_test_{i}")
        
        end_time = time.time()
        duration = end_time - start_time
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        for i in range(1000):
            test_redis.delete(f"perf_test_{i}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ 1000 –æ–ø–µ—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±—ã—Å—Ç—Ä–æ
        assert duration < 10.0, f"Redis operations too slow: {duration}s"


if __name__ == "__main__":
    # –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏:
    # TEST_WITH_REAL_SERVICES=1 pytest tests/integration/test_real_services.py -v
    pytest.main([__file__, "-v"]) 