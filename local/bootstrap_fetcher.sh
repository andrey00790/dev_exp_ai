#!/usr/bin/env bash
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# bootstrap_fetcher.sh
#
# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ resource_config.yml
#
# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
#   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (Python, pip, yaml)
#   ‚Ä¢ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
#   ‚Ä¢ –ó–∞–ø—É—Å–∫–∞–µ—Ç bootstrap_fetcher.py
#   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º workflow
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É
SCRIPT_DIR="$(cd "$(dirname "$0")" >/dev/null 2>&1 && pwd)"
BOOTSTRAP_FETCHER="${SCRIPT_DIR}/bootstrap_fetcher.py"
CONFIG_FILE="${SCRIPT_DIR}/resource_config.yml"
OUTPUT_DIR="${SCRIPT_DIR}/bootstrap"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    if ! command -v python3 &> /dev/null; then
        log_error "Python 3 –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.8+"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º pip
    if ! command -v pip3 &> /dev/null && ! command -v pip &> /dev/null; then
        log_error "pip –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pip"
        exit 1
    fi
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É pip
    if command -v pip3 &> /dev/null; then
        PIP_CMD="pip3"
    else
        PIP_CMD="pip"
    fi
    
    log_success "Python –∏ pip –Ω–∞–π–¥–µ–Ω—ã"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_python_deps() {
    log_info "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    
    # –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    REQUIRED_PACKAGES=(
        "PyYAML>=6.0"
        "requests>=2.25.0"
        "pathlib"
    )
    
    for package in "${REQUIRED_PACKAGES[@]}"; do
        log_info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º $package..."
        $PIP_CMD install --quiet "$package" || {
            log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å $package"
            exit 1
        }
    done
    
    log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
check_files() {
    log_info "üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã..."
    
    if [[ ! -f "$CONFIG_FILE" ]]; then
        log_error "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $CONFIG_FILE"
        exit 1
    fi
    
    if [[ ! -f "$BOOTSTRAP_FETCHER" ]]; then
        log_error "–°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $BOOTSTRAP_FETCHER"
        exit 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    mkdir -p "$OUTPUT_DIR"
    
    log_success "–í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ"
}

# –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    cat << EOF
üöÄ Bootstrap Fetcher - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    $0 [–û–ü–¶–ò–ò]

–û–ü–¶–ò–ò:
    -h, --help          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
    -t, --test          –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ 5 —Ä–µ—Å—É—Ä—Å–æ–≤)
    -c, --category CAT  –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ—Å—É—Ä—Å—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ CAT
    -o, --output DIR    –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: bootstrap)
    -n, --max-resources N   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–æ–≤
    --no-install        –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    --dry-run          –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ

–ü–†–ò–ú–ï–†–´:
    $0                          # –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã
    $0 --test                   # –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (5 —Ä–µ—Å—É—Ä—Å–æ–≤)
    $0 --category system_design # –¢–æ–ª—å–∫–æ System Design –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    $0 --max-resources 10       # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Ä–µ—Å—É—Ä—Å–æ–≤

–§–ê–ô–õ–´:
    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: $CONFIG_FILE
    –ó–∞–≥—Ä—É–∑—á–∏–∫:    $BOOTSTRAP_FETCHER
    –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: $OUTPUT_DIR

EOF
}

# –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
parse_args() {
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    TEST_MODE=false
    CATEGORY=""
    MAX_RESOURCES=""
    SKIP_INSTALL=false
    DRY_RUN=false
    CUSTOM_OUTPUT=""
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -t|--test)
                TEST_MODE=true
                shift
                ;;
            -c|--category)
                CATEGORY="$2"
                shift 2
                ;;
            -o|--output)
                CUSTOM_OUTPUT="$2"
                shift 2
                ;;
            -n|--max-resources)
                MAX_RESOURCES="$2"
                shift 2
                ;;
            --no-install)
                SKIP_INSTALL=true
                shift
                ;;
            --dry-run)
                DRY_RUN=true
                shift
                ;;
            *)
                log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞
    if [[ -n "$CUSTOM_OUTPUT" ]]; then
        OUTPUT_DIR="$CUSTOM_OUTPUT"
    fi
    
    # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–æ–≤
    if [[ "$TEST_MODE" = true ]] && [[ -z "$MAX_RESOURCES" ]]; then
        MAX_RESOURCES=5
    fi
}

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞
build_command() {
    PYTHON_CMD="python3 $BOOTSTRAP_FETCHER"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if [[ -n "$CUSTOM_OUTPUT" ]]; then
        PYTHON_CMD="$PYTHON_CMD --output $CUSTOM_OUTPUT"
    fi
    
    if [[ -n "$CATEGORY" ]]; then
        PYTHON_CMD="$PYTHON_CMD --category $CATEGORY"
    fi
    
    if [[ -n "$MAX_RESOURCES" ]]; then
        PYTHON_CMD="$PYTHON_CMD --max-resources $MAX_RESOURCES"
    fi
    
    echo "$PYTHON_CMD"
}

# Dry run - –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ
dry_run() {
    log_info "üîç Dry Run Mode - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
    
    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ YAML —Ñ–∞–π–ª–∞
    if command -v grep &> /dev/null && command -v wc &> /dev/null; then
        TOTAL_RESOURCES=$(grep -c "^  - name:" "$CONFIG_FILE" || echo "unknown")
        CATEGORIES=$(grep -A 1 "category:" "$CONFIG_FILE" | grep -v "category:" | sort | uniq | wc -l)
        
        log_info "üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: $TOTAL_RESOURCES"
        log_info "üìÅ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $CATEGORIES"
        
        if [[ -n "$CATEGORY" ]]; then
            FILTERED=$(grep -A 2 -B 1 "category: $CATEGORY" "$CONFIG_FILE" | grep -c "name:" || echo "0")
            log_info "üéØ –†–µ—Å—É—Ä—Å–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '$CATEGORY': $FILTERED"
        fi
        
        if [[ -n "$MAX_RESOURCES" ]]; then
            log_info "üî¢ –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ: –º–∞–∫—Å–∏–º—É–º $MAX_RESOURCES —Ä–µ—Å—É—Ä—Å–æ–≤"
        fi
    fi
    
    log_info "üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: $OUTPUT_DIR"
    log_info "‚öôÔ∏è –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞: $(build_command)"
    
    log_success "Dry run –∑–∞–≤–µ—Ä—à–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ --dry-run –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏."
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
run_fetcher() {
    log_info "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤..."
    
    # –°—Ç—Ä–æ–∏–º –∫–æ–º–∞–Ω–¥—É
    CMD=$(build_command)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
    if [[ "$TEST_MODE" = true ]]; then
        log_warning "üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ $MAX_RESOURCES —Ä–µ—Å—É—Ä—Å–æ–≤"
    fi
    
    if [[ -n "$CATEGORY" ]]; then
        log_info "üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: $CATEGORY"
    fi
    
    log_info "üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: $OUTPUT_DIR"
    log_info "‚öôÔ∏è –ö–æ–º–∞–Ω–¥–∞: $CMD"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º
    echo ""
    eval "$CMD"
    EXIT_CODE=$?
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if [[ $EXIT_CODE -eq 0 ]]; then
        log_success "‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    elif [[ $EXIT_CODE -eq 1 ]]; then
        log_warning "‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏"
    elif [[ $EXIT_CODE -eq 130 ]]; then
        log_warning "‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
    else
        log_error "‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏ (–∫–æ–¥: $EXIT_CODE)"
    fi
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
    if [[ -d "$OUTPUT_DIR" ]]; then
        log_info "üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ $OUTPUT_DIR:"
        find "$OUTPUT_DIR" -type f -name "*.txt" -o -name "*.pdf" -o -name "*.zip" | head -10 | while read -r file; do
            size=$(du -h "$file" 2>/dev/null | cut -f1 || echo "?")
            echo "  üìÑ $(basename "$file") ($size)"
        done
        
        if [[ -f "$OUTPUT_DIR/download_stats.json" ]]; then
            log_info "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ $OUTPUT_DIR/download_stats.json"
        fi
    fi
    
    return $EXIT_CODE
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üéì Bootstrap Fetcher - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parse_args "$@"
    
    # Dry run —Ä–µ–∂–∏–º
    if [[ "$DRY_RUN" = true ]]; then
        check_files
        dry_run
        exit 0
    fi
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
    check_files
    
    if [[ "$SKIP_INSTALL" = false ]]; then
        check_dependencies
        install_python_deps
    else
        log_info "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    fi
    
    run_fetcher
    exit $?
}

# –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi 