#!/usr/bin/env python3
"""
VK Teams Bot CLI Utility

–ü—Ä–æ—Å—Ç–∞—è CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VK Teams –±–æ—Ç–æ–º.
"""

import argparse
import asyncio
import json
import sys
from typing import Dict, Any

try:
    import httpx
except ImportError:
    print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è httpx: pip install httpx")
    sys.exit(1)


class VKTeamsBotCLI:
    """CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VK Teams –±–æ—Ç–æ–º"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.client = httpx.AsyncClient(base_url=base_url, timeout=30.0)
    
    async def configure_bot(self, token: str, api_url: str, auto_start: bool = True) -> Dict[str, Any]:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
        try:
            payload = {
                "bot_token": token,
                "api_url": api_url,
                "auto_start": auto_start
            }
            
            response = await self.client.post(
                "/api/v1/vk-teams/bot/configure",
                json=payload,
                headers={"Authorization": "Bearer demo-token"}
            )
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
                print(f"Bot ID: {data.get('config', {}).get('bot_id', 'N/A')}")
                return data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {response.status_code}")
                return {"success": False}
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return {"success": False, "error": str(e)}
    
    async def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        try:
            response = await self.client.get(
                "/api/v1/vk-teams/bot/status",
                headers={"Authorization": "Bearer demo-token"}
            )
            
            if response.status_code == 200:
                data = response.json()
                status = "–ê–∫—Ç–∏–≤–µ–Ω" if data.get("is_active") else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                print(f"üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status}")
                print(f"Bot ID: {data.get('bot_id', 'N/A')}")
                print(f"–°–æ–æ–±—â–µ–Ω–∏–π: {data.get('stats', {}).get('total_messages', 0)}")
                return data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
                return {"success": False}
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return {"success": False, "error": str(e)}
    
    async def test_webhook(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook"""
        try:
            test_data = {
                "test_event": "message",
                "test_data": {"text": "Test from CLI"}
            }
            
            response = await self.client.post(
                "/api/v1/vk-teams/webhook/test",
                json=test_data
            )
            
            if response.status_code == 200:
                print("‚úÖ Webhook —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
                return response.json()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {response.status_code}")
                return {"success": False}
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return {"success": False, "error": str(e)}


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(description="VK Teams Bot CLI")
    subparsers = parser.add_subparsers(dest="command", help="–ö–æ–º–∞–Ω–¥—ã")
    
    # Configure command
    configure_parser = subparsers.add_parser("configure", help="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞")
    configure_parser.add_argument("--token", required=True, help="–¢–æ–∫–µ–Ω –±–æ—Ç–∞")
    configure_parser.add_argument("--api-url", required=True, help="URL API")
    
    # Status command
    subparsers.add_parser("status", help="–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞")
    
    # Test command
    subparsers.add_parser("test", help="–¢–µ—Å—Ç webhook")
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    cli = VKTeamsBotCLI()
    
    try:
        if args.command == "configure":
            await cli.configure_bot(args.token, args.api_url)
        elif args.command == "status":
            await cli.get_status()
        elif args.command == "test":
            await cli.test_webhook()
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await cli.client.aclose()


if __name__ == "__main__":
    asyncio.run(main()) 