# AI Assistant - Complete Development & Deployment Makefile
# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

.PHONY: help install dev test deploy clean

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PYTHON = python3
PIP = pip3
VENV = venv
DOCKER_COMPOSE = docker-compose
KUBECTL = kubectl
HELM = helm
PYTEST = pytest
PYTEST_ARGS = -v --tb=short

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[1;33m
BLUE = \033[0;34m
PURPLE = \033[0;35m
CYAN = \033[0;36m
NC = \033[0m # No Color

##@ üìã –°–ø—Ä–∞–≤–∫–∞
help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
	@echo "$(GREEN)ü§ñ AI Assistant - –ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è$(NC)"
	@echo ""
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target>\033[0m\n"} /^[a-zA-Z_0-9-]+:.*?##/ { printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(CYAN)üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:$(NC)"
	@echo "  ‚Ä¢ make full-system   - –ü–æ–¥–Ω—è—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É (backend + frontend + LLM + –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)"
	@echo "  ‚Ä¢ make full-dev      - –ü–æ–ª–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ + –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
	@echo "  ‚Ä¢ make backend       - –¢–æ–ª—å–∫–æ backend"
	@echo "  ‚Ä¢ make frontend      - –¢–æ–ª—å–∫–æ frontend"
	@echo "  ‚Ä¢ make llm           - –¢–æ–ª—å–∫–æ LLM —Å–µ—Ä–≤–∏—Å—ã"
	@echo "  ‚Ä¢ make monitoring    - –¢–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
	@echo "  ‚Ä¢ make status-system - –°—Ç–∞—Ç—É—Å –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"
	@echo "  ‚Ä¢ make stop-system   - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É"
	@echo ""
	@echo "$(CYAN)üåê –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã:$(NC)"
	@echo "  ‚Ä¢ Backend API:   http://localhost:8000"
	@echo "  ‚Ä¢ Frontend:      http://localhost:3000"
	@echo "  ‚Ä¢ API Docs:      http://localhost:8000/docs"
	@echo "  ‚Ä¢ Health:        http://localhost:8000/health"
	@echo "  ‚Ä¢ Adminer:       http://localhost:8080"
	@echo "  ‚Ä¢ Redis UI:      http://localhost:8081"
	@echo "  ‚Ä¢ Ollama LLM:    http://localhost:11434"
	@echo "  ‚Ä¢ Qdrant UI:     http://localhost:6333/dashboard"
	@echo "  ‚Ä¢ Grafana:       http://localhost:3001 (admin/admin123)"
	@echo "  ‚Ä¢ Prometheus:    http://localhost:9090"

##@ üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
quick-start: ## –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ + –ª–æ–∫–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
	@echo "$(GREEN)üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç AI Assistant...$(NC)"
	$(MAKE) install
	$(MAKE) dev-infra-up
	@echo "$(CYAN)üí° –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: make dev$(NC)"

setup-dev: install dev-infra-up migrate load-test-data ## –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(GREEN)‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≥–æ—Ç–æ–≤–æ!$(NC)"
	@echo "$(CYAN)–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: make dev$(NC)"

##@ üåê –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
full-system: ## üöÄ –ü–æ–¥–Ω—è—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É (backend + frontend + LLM + –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ + –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã AI Assistant...$(NC)"
	@echo "$(CYAN)üì¶ –®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	$(MAKE) install-system
	@echo "$(CYAN)üèóÔ∏è –®–∞–≥ 2: –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã...$(NC)"
	$(MAKE) dev-infra-up-full
	@echo "$(CYAN)üìä –®–∞–≥ 3: –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...$(NC)"
	$(MAKE) dev-infra-up-monitoring
	@echo "$(CYAN)‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã (45 —Å–µ–∫—É–Ω–¥)...$(NC)"
	@sleep 45
	@echo "$(CYAN)üéØ –®–∞–≥ 4: –ó–∞–ø—É—Å–∫ backend...$(NC)"
	$(MAKE) backend > logs/backend.log 2>&1 &
	@echo "$(CYAN)üé® –®–∞–≥ 5: –ó–∞–ø—É—Å–∫ frontend...$(NC)"
	$(MAKE) frontend > logs/frontend.log 2>&1 &
	@echo "$(GREEN)‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!$(NC)"
	@echo "$(CYAN)üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:$(NC)"
	@echo "  ‚Ä¢ Backend API:  http://localhost:8000"
	@echo "  ‚Ä¢ Frontend:     http://localhost:3000"
	@echo "  ‚Ä¢ API Docs:     http://localhost:8000/docs"
	@echo "  ‚Ä¢ Health:       http://localhost:8000/health"
	@echo "  ‚Ä¢ Adminer:      http://localhost:8080"
	@echo "  ‚Ä¢ Redis UI:     http://localhost:8081"
	@echo "  ‚Ä¢ Ollama LLM:   http://localhost:11434"
	@echo "  ‚Ä¢ Grafana:      http://localhost:3001 (admin/admin123)"
	@echo "  ‚Ä¢ Prometheus:   http://localhost:9090"
	@echo "$(YELLOW)üìã –õ–æ–≥–∏: make logs-system$(NC)"

full-dev: ## üîß –ü–æ–ª–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (backend + frontend + LLM + –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)
	@echo "$(GREEN)üîß –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	@echo "$(CYAN)üì¶ –®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	$(MAKE) install-dev
	@echo "$(CYAN)üèóÔ∏è –®–∞–≥ 2: –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã + –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...$(NC)"
	$(MAKE) dev-infra-up-full
	$(MAKE) dev-infra-up-monitoring
	@echo "$(CYAN)‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã (45 —Å–µ–∫—É–Ω–¥)...$(NC)"
	@sleep 45
	@echo "$(CYAN)üéØ –®–∞–≥ 3: –ó–∞–ø—É—Å–∫ backend –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	$(MAKE) backend-dev > logs/backend-dev.log 2>&1 &
	@echo "$(CYAN)üé® –®–∞–≥ 4: –ó–∞–ø—É—Å–∫ frontend –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	$(MAKE) frontend-dev > logs/frontend-dev.log 2>&1 &
	@echo "$(GREEN)‚úÖ –ü–æ–ª–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!$(NC)"
	@echo "$(CYAN)üåê –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã:$(NC)"
	@echo "  ‚Ä¢ Backend API:  http://localhost:8000"
	@echo "  ‚Ä¢ Frontend:     http://localhost:3000"
	@echo "  ‚Ä¢ API Docs:     http://localhost:8000/docs"
	@echo "  ‚Ä¢ Adminer:      http://localhost:8080"
	@echo "  ‚Ä¢ Redis UI:     http://localhost:8081"
	@echo "  ‚Ä¢ Ollama LLM:   http://localhost:11434"
	@echo "  ‚Ä¢ Grafana:      http://localhost:3001 (admin/admin123)"
	@echo "  ‚Ä¢ Prometheus:   http://localhost:9090"
	@echo "$(YELLOW)üìã –õ–æ–≥–∏: make logs-system$(NC)"

system: full-system ## –ê–ª–∏–∞—Å –¥–ª—è full-system

##@ üéØ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
backend: ## üéØ –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ backend
	@echo "$(BLUE)üéØ –ó–∞–ø—É—Å–∫ backend...$(NC)"
	@echo "$(YELLOW)üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞: make dev-infra-up$(NC)"
	@export PYTHONPATH=$$PWD && \
	 export ENVIRONMENT=production && \
	 export DATABASE_URL=postgresql://ai_user:ai_password_dev@localhost:5432/ai_assistant && \
	 export REDIS_URL=redis://localhost:6379/0 && \
	 export QDRANT_URL=http://localhost:6333 && \
	 export DEBUG=false && \
	 export LOG_LEVEL=INFO && \
	 export SECRET_KEY=prod-secret-key && \
	 ./$(VENV)/bin/python main.py --port 8000 --host localhost

backend-dev: ## üéØ –ó–∞–ø—É—Å–∫ backend –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(BLUE)üéØ –ó–∞–ø—É—Å–∫ backend –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	@echo "$(YELLOW)üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞: make dev-infra-up$(NC)"
	@export PYTHONPATH=$$PWD && \
	 export ENVIRONMENT=development && \
	 export DATABASE_URL=postgresql://ai_user:ai_password_dev@localhost:5432/ai_assistant && \
	 export REDIS_URL=redis://localhost:6379/0 && \
	 export QDRANT_URL=http://localhost:6333 && \
	 export DEBUG=true && \
	 export LOG_LEVEL=DEBUG && \
	 export SECRET_KEY=dev-secret-key-not-for-production && \
	 ./$(VENV)/bin/python main.py --port 8000 --host localhost

frontend: ## üé® –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ frontend (production)
	@echo "$(CYAN)üé® –ó–∞–ø—É—Å–∫ frontend...$(NC)"
	@if [ ! -d "frontend/node_modules" ]; then \
		echo "$(YELLOW)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π frontend...$(NC)"; \
		cd frontend && npm install; \
	fi
	@echo "$(CYAN)üèóÔ∏è –°–±–æ—Ä–∫–∞ frontend...$(NC)"
	@cd frontend && npm run build
	@echo "$(CYAN)üöÄ –ó–∞–ø—É—Å–∫ frontend —Å–µ—Ä–≤–µ—Ä–∞...$(NC)"
	@cd frontend && npm run preview -- --port 3000

frontend-dev: ## üé® –ó–∞–ø—É—Å–∫ frontend –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(CYAN)üé® –ó–∞–ø—É—Å–∫ frontend –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	@if [ ! -d "frontend/node_modules" ]; then \
		echo "$(YELLOW)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π frontend...$(NC)"; \
		cd frontend && npm install; \
	fi
	@echo "$(CYAN)üöÄ –ó–∞–ø—É—Å–∫ dev —Å–µ—Ä–≤–µ—Ä–∞ frontend...$(NC)"
	@cd frontend && npm run dev -- --port 3000

llm: ## ü§ñ –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ LLM —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(PURPLE)ü§ñ –ó–∞–ø—É—Å–∫ LLM —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	@$(DOCKER_COMPOSE) -f deployment/docker/docker-compose.dev.yml --profile llm up -d
	@echo "$(GREEN)‚úÖ LLM —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!$(NC)"
	@echo "$(CYAN)ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ LLM —Å–µ—Ä–≤–∏—Å—ã:$(NC)"
	@echo "  ‚Ä¢ Ollama:     http://localhost:11434"
	@echo "  ‚Ä¢ Ollama API: http://localhost:11434/api/generate"

monitoring: ## üìä –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	@echo "$(YELLOW)üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...$(NC)"
	@$(DOCKER_COMPOSE) -f deployment/docker/docker-compose.dev.yml --profile monitoring up -d
	@echo "$(GREEN)‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!$(NC)"
	@echo "$(CYAN)üìà –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:$(NC)"
	@echo "  ‚Ä¢ Grafana:    http://localhost:3001 (admin/admin123)"
	@echo "  ‚Ä¢ Prometheus: http://localhost:9090"

##@ üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
stop-system: ## üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É
	@echo "$(YELLOW)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã...$(NC)"
	@pkill -f "python.*main.py" || true
	@pkill -f "npm.*run.*dev" || true
	@pkill -f "npm.*run.*preview" || true
	@$(DOCKER_COMPOSE) -f deployment/docker/docker-compose.dev.yml down
	@echo "$(GREEN)‚úÖ –í—Å—è —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞$(NC)"

stop-backend: ## üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å backend
	@echo "$(YELLOW)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ backend...$(NC)"
	@pkill -f "python.*main.py" || true
	@echo "$(GREEN)‚úÖ Backend –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω$(NC)"

stop-frontend: ## üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å frontend
	@echo "$(YELLOW)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ frontend...$(NC)"
	@pkill -f "npm.*run.*dev" || true
	@pkill -f "npm.*run.*preview" || true
	@echo "$(GREEN)‚úÖ Frontend –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω$(NC)"

stop-llm: ## üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å LLM —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(YELLOW)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ LLM —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	@$(DOCKER_COMPOSE) -f deployment/docker/docker-compose.dev.yml --profile llm stop
	@echo "$(GREEN)‚úÖ LLM —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

stop-monitoring: ## üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
	@echo "$(YELLOW)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...$(NC)"
	@$(DOCKER_COMPOSE) -f deployment/docker/docker-compose.dev.yml --profile monitoring stop
	@echo "$(GREEN)‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω$(NC)"

##@ üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã
logs-system: ## üìã –õ–æ–≥–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
	@echo "$(GREEN)üìã –õ–æ–≥–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã:$(NC)"
	@echo "$(CYAN)üéØ Backend –ª–æ–≥–∏:$(NC)"
	@tail -20 logs/backend.log 2>/dev/null || echo "Backend –Ω–µ –∑–∞–ø—É—â–µ–Ω"
	@echo ""
	@echo "$(CYAN)üé® Frontend –ª–æ–≥–∏:$(NC)"
	@tail -20 logs/frontend.log 2>/dev/null || echo "Frontend –Ω–µ –∑–∞–ø—É—â–µ–Ω"
	@echo ""
	@echo "$(CYAN)üê≥ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–æ–≥–∏:$(NC)"
	@$(DOCKER_COMPOSE) -f deployment/docker/docker-compose.dev.yml logs --tail=10

logs-backend: ## üìã –õ–æ–≥–∏ backend
	@echo "$(GREEN)üìã –õ–æ–≥–∏ backend:$(NC)"
	@tail -f logs/backend.log 2>/dev/null || echo "Backend –ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

logs-frontend: ## üìã –õ–æ–≥–∏ frontend
	@echo "$(GREEN)üìã –õ–æ–≥–∏ frontend:$(NC)"
	@tail -f logs/frontend.log 2>/dev/null || echo "Frontend –ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

logs-llm: ## üìã –õ–æ–≥–∏ LLM —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(GREEN)üìã –õ–æ–≥–∏ LLM —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	@$(DOCKER_COMPOSE) -f deployment/docker/docker-compose.dev.yml --profile llm logs -f

logs-monitoring: ## üìã –õ–æ–≥–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	@echo "$(GREEN)üìã –õ–æ–≥–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:$(NC)"
	@$(DOCKER_COMPOSE) -f deployment/docker/docker-compose.dev.yml --profile monitoring logs -f

##@ üîç –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
status-system: ## üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã:$(NC)"
	@echo "$(CYAN)üéØ Backend:$(NC)"
	@if pgrep -f "python.*main.py" > /dev/null; then \
		echo "  ‚úÖ Backend –∑–∞–ø—É—â–µ–Ω (PID: $$(pgrep -f 'python.*main.py'))"; \
	else \
		echo "  ‚ùå Backend –Ω–µ –∑–∞–ø—É—â–µ–Ω"; \
	fi
	@echo "$(CYAN)üé® Frontend:$(NC)"
	@if pgrep -f "npm.*run" > /dev/null; then \
		echo "  ‚úÖ Frontend –∑–∞–ø—É—â–µ–Ω (PID: $$(pgrep -f 'npm.*run'))"; \
	else \
		echo "  ‚ùå Frontend –Ω–µ –∑–∞–ø—É—â–µ–Ω"; \
	fi
	@echo "$(CYAN)üê≥ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞:$(NC)"
	@$(DOCKER_COMPOSE) -f deployment/docker/docker-compose.dev.yml ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}" | grep -v "^NAME" | head -10

health-system: ## ü©∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
	@echo "$(BLUE)ü©∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã:$(NC)"
	@echo "$(CYAN)üéØ Backend Health:$(NC)"
	@curl -s http://localhost:8000/health > /dev/null 2>&1 && echo "  ‚úÖ Backend: Healthy" || echo "  ‚ùå Backend: Unhealthy"
	@echo "$(CYAN)üé® Frontend Health:$(NC)"
	@curl -s http://localhost:3000 > /dev/null 2>&1 && echo "  ‚úÖ Frontend: Healthy" || echo "  ‚ùå Frontend: Unhealthy"
	@echo "$(CYAN)ü§ñ LLM Health:$(NC)"
	@curl -s http://localhost:11434/api/version > /dev/null 2>&1 && echo "  ‚úÖ Ollama: Healthy" || echo "  ‚ùå Ollama: Unhealthy"
	@echo "$(CYAN)üìà Monitoring Health:$(NC)"
	@curl -s http://localhost:3001/api/health > /dev/null 2>&1 && echo "  ‚úÖ Grafana: Healthy" || echo "  ‚ùå Grafana: Unhealthy"
	@curl -s http://localhost:9090/-/healthy > /dev/null 2>&1 && echo "  ‚úÖ Prometheus: Healthy" || echo "  ‚ùå Prometheus: Unhealthy"
	@echo "$(CYAN)üóÑÔ∏è PostgreSQL:$(NC)"
	@docker compose exec -T postgres pg_isready -U ai_user -d ai_assistant > /dev/null 2>&1 && echo "  ‚úÖ PostgreSQL: Ready" || echo "  ‚ùå PostgreSQL: Not Ready"
	@echo "$(CYAN)üî¥ Redis:$(NC)"
	@docker compose exec -T redis redis-cli ping > /dev/null 2>&1 && echo "  ‚úÖ Redis: Ready" || echo "  ‚ùå Redis: Not Ready"
	@echo "$(CYAN)üéØ Qdrant:$(NC)"
	@docker compose exec -T qdrant curl -s http://localhost:6333/health > /dev/null 2>&1 && echo "  ‚úÖ Qdrant: Ready" || echo "  ‚ùå Qdrant: Not Ready"

##@ üõ† –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
install: ## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python
	@echo "$(BLUE)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	@if [ ! -d "$(VENV)" ]; then python3 -m venv $(VENV); fi
	./$(VENV)/bin/pip install --upgrade pip
	./$(VENV)/bin/pip install -r requirements.txt
	@echo "$(GREEN)‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

install-system: ## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–º–∏–Ω–∏–º—É–º –¥–ª—è –∑–∞–ø—É—Å–∫–∞)
	@echo "$(BLUE)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	@if [ ! -d "$(VENV)" ]; then python3 -m venv $(VENV); fi
	./$(VENV)/bin/pip install --upgrade pip
	./$(VENV)/bin/pip install -r requirements-system.txt
	@echo "$(GREEN)‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

install-dev: install ## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
	@echo "$(BLUE)üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	./$(VENV)/bin/pip install -r config/environments/requirements-dev.txt || true
	./$(VENV)/bin/pip install black pylint mypy pytest-cov flake8 || true
	@echo "$(GREEN)‚úÖ Dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

##@ üê≥ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
dev-infra-up: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É (–ë–î, Redis, Qdrant)
	@echo "$(GREEN)üîß –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	@$(DOCKER_COMPOSE) -f deployment/docker/docker-compose.dev.yml up -d postgres redis qdrant
	@echo "$(GREEN)‚úÖ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞!$(NC)"
	@echo "$(CYAN)üìä –°—Ç–∞—Ç—É—Å: make dev-infra-status$(NC)"
	@echo "$(CYAN)üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è:$(NC)"
	@echo "  ‚Ä¢ PostgreSQL: localhost:5432 (ai_user/ai_password_dev)"
	@echo "  ‚Ä¢ Redis:      localhost:6379"
	@echo "  ‚Ä¢ Qdrant:     localhost:6333"

dev-infra-up-full: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É + –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ + LLM
	@echo "$(GREEN)üîß –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã...$(NC)"
	@$(DOCKER_COMPOSE) -f deployment/docker/docker-compose.dev.yml --profile admin --profile llm up -d
	@echo "$(GREEN)‚úÖ –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞!$(NC)"
	@echo "$(CYAN)üåê –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:$(NC)"
	@echo "  ‚Ä¢ Adminer:    http://localhost:8080"
	@echo "  ‚Ä¢ Redis UI:   http://localhost:8081"
	@echo "  ‚Ä¢ Ollama:     http://localhost:11434"

dev-infra-up-monitoring: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É + –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
	@echo "$(GREEN)üìä –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º...$(NC)"
	@$(DOCKER_COMPOSE) -f deployment/docker/docker-compose.dev.yml --profile monitoring up -d
	@echo "$(GREEN)‚úÖ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∑–∞–ø—É—â–µ–Ω–∞!$(NC)"
	@echo "$(CYAN)üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:$(NC)"
	@echo "  ‚Ä¢ Grafana:    http://localhost:3001 (admin/admin123)"
	@echo "  ‚Ä¢ Prometheus: http://localhost:9090"

dev-infra-down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
	@echo "$(YELLOW)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã...$(NC)"
	@$(DOCKER_COMPOSE) -f deployment/docker/docker-compose.dev.yml down
	@echo "$(GREEN)‚úÖ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞$(NC)"

dev-infra-status: ## –°—Ç–∞—Ç—É—Å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã:$(NC)"
	@$(DOCKER_COMPOSE) -f deployment/docker/docker-compose.dev.yml ps

dev-infra-logs: ## –õ–æ–≥–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
	@echo "$(GREEN)üìã –õ–æ–≥–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã:$(NC)"
	@$(DOCKER_COMPOSE) -f deployment/docker/docker-compose.dev.yml logs -f

dev-infra-clean: ## –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
	@echo "$(RED)üßπ –í–ù–ò–ú–ê–ù–ò–ï: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã!$(NC)"
	@read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? [y/N] " -n 1 -r; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		echo ""; \
		$(DOCKER_COMPOSE) -f deployment/docker/docker-compose.dev.yml down -v; \
		docker volume prune -f; \
		echo "$(GREEN)‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã$(NC)"; \
	else \
		echo ""; \
		echo "$(YELLOW)–û—Ç–º–µ–Ω–µ–Ω–æ$(NC)"; \
	fi

##@ üèÉ –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
dev: ## –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(GREEN)üèÉ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	@echo "$(YELLOW)üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞: make dev-infra-up$(NC)"
	@export PYTHONPATH=$$PWD && \
	 export ENVIRONMENT=development && \
	 export DATABASE_URL=postgresql://ai_user:ai_password_dev@localhost:5432/ai_assistant && \
	 export REDIS_URL=redis://localhost:6379/0 && \
	 export QDRANT_URL=http://localhost:6333 && \
	 export DEBUG=true && \
	 export LOG_LEVEL=DEBUG && \
	 export SECRET_KEY=dev-secret-key-not-for-production && \
	 ./$(VENV)/bin/uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

dev-debug: ## –ó–∞–ø—É—Å–∫ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
	@echo "$(YELLOW)üêõ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏...$(NC)"
	@export PYTHONPATH=$$PWD && \
	 export ENVIRONMENT=development && \
	 export DATABASE_URL=postgresql://ai_user:ai_password_dev@localhost:5432/ai_assistant && \
	 export REDIS_URL=redis://localhost:6379/0 && \
	 export QDRANT_URL=http://localhost:6333 && \
	 export DEBUG=true && \
	 export LOG_LEVEL=DEBUG && \
	 export SECRET_KEY=dev-secret-key-not-for-production && \
	 ./$(VENV)/bin/uvicorn app.main:app --reload --host 0.0.0.0 --port 8000 --log-level debug

##@ üê≥ Docker –û–∫—Ä—É–∂–µ–Ω–∏—è (Unified)
# Unified Docker Compose with Profiles

# Core services (default)
up: ## üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã (app, postgres, redis, qdrant)
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	docker compose up -d
	@echo "$(GREEN)‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!$(NC)"
	@echo "$(CYAN)üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:$(NC)"
	@echo "  ‚Ä¢ App:        http://localhost:8000"
	@echo "  ‚Ä¢ Docs:       http://localhost:8000/docs"
	@echo "  ‚Ä¢ Health:     http://localhost:8000/health"

# Development with admin tools
up-dev: ## üîß –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—è–º–∏
	@echo "$(GREEN)üîß –ó–∞–ø—É—Å–∫ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	COMPOSE_PROFILES=admin docker compose up -d
	@echo "$(GREEN)‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—â–µ–Ω–æ!$(NC)"
	@echo "$(CYAN)üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏:$(NC)"
	@echo "  ‚Ä¢ Adminer:    http://localhost:8080"
	@echo "  ‚Ä¢ Redis UI:   http://localhost:8081"

# Full development with all tools
up-dev-full: ## üöÄ –ü–æ–ª–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (frontend, admin, monitoring)
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	COMPOSE_PROFILES=frontend,admin,monitoring docker compose up -d
	@echo "$(GREEN)‚úÖ –ü–æ–ª–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!$(NC)"
	@echo "$(CYAN)üåê –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã:$(NC)"
	@echo "  ‚Ä¢ App:        http://localhost:8000"
	@echo "  ‚Ä¢ Frontend:   http://localhost:3000"
	@echo "  ‚Ä¢ Adminer:    http://localhost:8080"
	@echo "  ‚Ä¢ Redis UI:   http://localhost:8081"
	@echo "  ‚Ä¢ Grafana:    http://localhost:3001 (admin/admin123)"
	@echo "  ‚Ä¢ Prometheus: http://localhost:9090"

# Development with LLM
up-dev-llm: ## ü§ñ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Å LLM —Å–µ—Ä–≤–∏—Å–∞–º–∏
	@echo "$(GREEN)ü§ñ –ó–∞–ø—É—Å–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å LLM...$(NC)"
	COMPOSE_PROFILES=admin,llm docker compose up -d
	@echo "$(GREEN)‚úÖ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å LLM –∑–∞–ø—É—â–µ–Ω–∞!$(NC)"
	@echo "$(CYAN)ü§ñ LLM —Å–µ—Ä–≤–∏—Å—ã:$(NC)"
	@echo "  ‚Ä¢ Ollama:     http://localhost:11434"

# E2E Testing Environment
up-e2e: ## üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å E2E —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
	@echo "$(GREEN)üéØ –ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(NC)"
	@echo "$(YELLOW)‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 5-10 –º–∏–Ω—É—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	COMPOSE_PROFILES=e2e docker compose up -d
	@echo "$(GREEN)‚úÖ E2E –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!$(NC)"
	@echo "$(CYAN)üß™ E2E —Å–µ—Ä–≤–∏—Å—ã:$(NC)"
	@echo "  ‚Ä¢ E2E App:    http://localhost:8001"
	@echo "  ‚Ä¢ E2E DB:     localhost:5433"
	@echo "  ‚Ä¢ Jira:       http://localhost:8082"
	@echo "  ‚Ä¢ Confluence: http://localhost:8083"
	@echo "  ‚Ä¢ GitLab:     http://localhost:8084"

# Load Testing Environment
up-load: ## ‚ö° –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
	@echo "$(GREEN)‚ö° –ó–∞–ø—É—Å–∫ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...$(NC)"
	COMPOSE_PROFILES=load docker compose up -d
	@echo "$(GREEN)‚úÖ Load test –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!$(NC)"
	@echo "$(CYAN)‚ö° Load test —Å–µ—Ä–≤–∏—Å—ã:$(NC)"
	@echo "  ‚Ä¢ Load App:   http://localhost:8002"
	@echo "  ‚Ä¢ Load DB:    localhost:5434"
	@echo "  ‚Ä¢ Nginx LB:   http://localhost:8085"
	@echo "  ‚Ä¢ Locust UI:  http://localhost:8089"

# Bootstrap ETL Process
bootstrap: ## üéì –ó–∞–ø—É—Å—Ç–∏—Ç—å Bootstrap ETL –ø—Ä–æ—Ü–µ—Å—Å
	@echo "$(GREEN)üéì –ó–∞–ø—É—Å–∫ Bootstrap ETL –ø—Ä–æ—Ü–µ—Å—Å–∞...$(NC)"
	@echo "$(YELLOW)üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã: make up$(NC)"
	@docker compose ps postgres | grep -q "Up" || (echo "$(RED)‚ùå PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: make up$(NC)" && exit 1)
	@docker compose ps qdrant | grep -q "Up" || (echo "$(RED)‚ùå Qdrant –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: make up$(NC)" && exit 1)
	COMPOSE_PROFILES=bootstrap docker compose up bootstrap
	@echo "$(GREEN)‚úÖ Bootstrap –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω!$(NC)"

##@ üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤

down: ## üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(YELLOW)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	docker compose down
	@echo "$(GREEN)‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

down-volumes: ## üóëÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã –∏ —É–¥–∞–ª–∏—Ç—å volumes (–û–°–¢–û–†–û–ñ–ù–û!)
	@echo "$(RED)üóëÔ∏è –í–ù–ò–ú–ê–ù–ò–ï: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö!$(NC)"
	@read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã! [y/N] " -n 1 -r; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		echo ""; \
		docker compose down -v; \
		echo "$(GREEN)‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã$(NC)"; \
	else \
		echo ""; \
		echo "$(YELLOW)–û—Ç–º–µ–Ω–µ–Ω–æ$(NC)"; \
	fi

restart: down up ## üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã

restart-dev: ## üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É
	@echo "$(BLUE)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	docker compose down
	COMPOSE_PROFILES=admin docker compose up -d
	@echo "$(GREEN)‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ$(NC)"

##@ üìä –°—Ç–∞—Ç—É—Å –∏ –ª–æ–≥–∏

status: ## üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	@docker compose ps

status-detailed: ## üìä –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å health checks
	@echo "$(BLUE)üìä –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	@docker compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
	@echo ""
	@echo "$(CYAN)üîç Health checks:$(NC)"
	@docker compose exec -T app curl -s http://localhost:8000/health | head -1 && echo "  ‚úÖ App: Healthy" || echo "  ‚ùå App: Unhealthy"
	@docker compose exec -T postgres pg_isready -U ai_user -d ai_assistant > /dev/null 2>&1 && echo "  ‚úÖ PostgreSQL: Ready" || echo "  ‚ùå PostgreSQL: Not Ready"
	@docker compose exec -T redis redis-cli ping > /dev/null 2>&1 && echo "  ‚úÖ Redis: Ready" || echo "  ‚ùå Redis: Not Ready"
	@docker compose exec -T qdrant curl -s http://localhost:6333/health > /dev/null 2>&1 && echo "  ‚úÖ Qdrant: Ready" || echo "  ‚ùå Qdrant: Not Ready"

logs: ## üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(GREEN)üìã –õ–æ–≥–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	docker compose logs -f --tail=50

logs-app: ## üìã –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	docker compose logs -f app

logs-db: ## üìã –õ–æ–≥–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	docker compose logs -f postgres

logs-e2e: ## üìã –õ–æ–≥–∏ E2E —Ç–µ—Å—Ç–æ–≤
	COMPOSE_PROFILES=e2e docker compose logs -f

logs-load: ## üìã –õ–æ–≥–∏ –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
	COMPOSE_PROFILES=load docker compose logs -f

##@ üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (Test Pyramid)
test: ## üéØ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ –ø–∏—Ä–∞–º–∏–¥–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	@echo "$(GREEN)üéØ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ –ø–∏—Ä–∞–º–∏–¥–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...$(NC)"
	@echo "$(CYAN)üìä –ü–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:$(NC)"
	@echo "  1. Unit —Ç–µ—Å—Ç—ã (—Å–∞–º—ã–µ –±—ã—Å—Ç—Ä—ã–µ)"
	@echo "  2. Integration —Ç–µ—Å—Ç—ã"
	@echo "  3. Contract —Ç–µ—Å—Ç—ã"
	@echo "  4. Security —Ç–µ—Å—Ç—ã"
	@echo "  5. Smoke —Ç–µ—Å—Ç—ã"
	@echo "  6. E2E —Ç–µ—Å—Ç—ã (—Å–∞–º—ã–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ)"
	@echo ""
	$(MAKE) unit
	$(MAKE) integration
	$(MAKE) contract
	$(MAKE) security
	$(MAKE) smoke
	$(MAKE) e2e
	@echo "$(GREEN)‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!$(NC)"

unit: ## ‚ö° –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤
	@echo "$(BLUE)‚ö° –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)...$(NC)"
	@export PYTHONPATH=$$PWD && \
	 export TESTING=true && \
	 export ENVIRONMENT=test && \
	 export LOG_LEVEL=WARNING && \
	 ./$(VENV)/bin/pytest tests/unit/ $(PYTEST_ARGS) -n auto --cov=app --cov=domain --cov=adapters --cov=backend --cov-report=term-missing --cov-report=html:htmlcov/unit
	@echo "$(GREEN)‚úÖ Unit —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(NC)"

smoke: ## üö¨ –ó–∞–ø—É—Å–∫ smoke —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)üö¨ –ó–∞–ø—É—Å–∫ smoke —Ç–µ—Å—Ç–æ–≤...$(NC)"
	@export PYTHONPATH=$$PWD && \
	 export TESTING=true && \
	 export ENVIRONMENT=test && \
	 export LOG_LEVEL=WARNING && \
	 ./$(VENV)/bin/pytest tests/smoke/ $(PYTEST_ARGS) --tb=short
	@echo "$(GREEN)‚úÖ Smoke —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(NC)"

integration: ## üîó –ó–∞–ø—É—Å–∫ integration —Ç–µ—Å—Ç–æ–≤
	@echo "$(PURPLE)üîó –ó–∞–ø—É—Å–∫ integration —Ç–µ—Å—Ç–æ–≤...$(NC)"
	@echo "$(YELLOW)üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞: make dev-infra-up$(NC)"
	@export PYTHONPATH=$$PWD && \
	 export TESTING=true && \
	 export ENVIRONMENT=test && \
	 export DATABASE_URL=postgresql://ai_user:ai_password_dev@localhost:5432/ai_assistant_test && \
	 export REDIS_URL=redis://localhost:6379/1 && \
	 export QDRANT_URL=http://localhost:6333 && \
	 export LOG_LEVEL=WARNING && \
	 ./$(VENV)/bin/pytest tests/integration/ $(PYTEST_ARGS) --cov=app --cov-report=html:htmlcov/integration
	@echo "$(GREEN)‚úÖ Integration —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(NC)"

contract: ## üìã –ó–∞–ø—É—Å–∫ contract —Ç–µ—Å—Ç–æ–≤
	@echo "$(CYAN)üìã –ó–∞–ø—É—Å–∫ contract —Ç–µ—Å—Ç–æ–≤...$(NC)"
	@export PYTHONPATH=$$PWD && \
	 export TESTING=true && \
	 export ENVIRONMENT=test && \
	 export LOG_LEVEL=WARNING && \
	 ./$(VENV)/bin/pytest tests/contract/ $(PYTEST_ARGS)
	@echo "$(GREEN)‚úÖ Contract —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(NC)"

security: ## üîí –ó–∞–ø—É—Å–∫ security —Ç–µ—Å—Ç–æ–≤
	@echo "$(RED)üîí –ó–∞–ø—É—Å–∫ security —Ç–µ—Å—Ç–æ–≤...$(NC)"
	@export PYTHONPATH=$$PWD && \
	 export TESTING=true && \
	 export ENVIRONMENT=test && \
	 export LOG_LEVEL=WARNING && \
	 ./$(VENV)/bin/pytest tests/security/ $(PYTEST_ARGS)
	@echo "$(GREEN)‚úÖ Security —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(NC)"

auth: ## üîê –ó–∞–ø—É—Å–∫ auth —Ç–µ—Å—Ç–æ–≤
	@echo "$(PURPLE)üîê –ó–∞–ø—É—Å–∫ auth —Ç–µ—Å—Ç–æ–≤...$(NC)"
	@export PYTHONPATH=$$PWD && \
	 export TESTING=true && \
	 export ENVIRONMENT=test && \
	 export DATABASE_URL=postgresql://ai_user:ai_password_dev@localhost:5432/ai_assistant_test && \
	 export REDIS_URL=redis://localhost:6379/1 && \
	 export LOG_LEVEL=WARNING && \
	 ./$(VENV)/bin/pytest tests/auth/ $(PYTEST_ARGS)
	@echo "$(GREEN)‚úÖ Auth —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(NC)"

vector: ## üéØ –ó–∞–ø—É—Å–∫ vector —Ç–µ—Å—Ç–æ–≤
	@echo "$(CYAN)üéØ –ó–∞–ø—É—Å–∫ vector —Ç–µ—Å—Ç–æ–≤...$(NC)"
	@export PYTHONPATH=$$PWD && \
	 export TESTING=true && \
	 export ENVIRONMENT=test && \
	 export QDRANT_URL=http://localhost:6333 && \
	 export LOG_LEVEL=WARNING && \
	 ./$(VENV)/bin/pytest tests/vector/ $(PYTEST_ARGS)
	@echo "$(GREEN)‚úÖ Vector —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(NC)"

performance: ## ‚ö° –ó–∞–ø—É—Å–∫ performance —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)‚ö° –ó–∞–ø—É—Å–∫ performance —Ç–µ—Å—Ç–æ–≤...$(NC)"
	@export PYTHONPATH=$$PWD && \
	 export TESTING=true && \
	 export ENVIRONMENT=test && \
	 export LOG_LEVEL=WARNING && \
	 ./$(VENV)/bin/pytest tests/performance/ $(PYTEST_ARGS) --tb=short
	@echo "$(GREEN)‚úÖ Performance —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(NC)"

bootstrap-test: ## üéì –ó–∞–ø—É—Å–∫ bootstrap —Ç–µ—Å—Ç–æ–≤
	@echo "$(BLUE)üéì –ó–∞–ø—É—Å–∫ bootstrap —Ç–µ—Å—Ç–æ–≤...$(NC)"
	@export PYTHONPATH=$$PWD && \
	 export TESTING=true && \
	 export ENVIRONMENT=test && \
	 export LOG_LEVEL=WARNING && \
	 ./$(VENV)/bin/pytest tests/bootstrap/ $(PYTEST_ARGS)
	@echo "$(GREEN)‚úÖ Bootstrap —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(NC)"

e2e: ## üé≠ –ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤ (–ª–æ–∫–∞–ª—å–Ω–æ)
	@echo "$(GREEN)üé≠ –ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ...$(NC)"
	@echo "$(YELLOW)üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ: make dev$(NC)"
	@export PYTHONPATH=$$PWD && \
	 export TESTING=true && \
	 export ENVIRONMENT=test && \
	 export BASE_URL=http://localhost:8000 && \
	 export LOG_LEVEL=WARNING && \
	 ./$(VENV)/bin/pytest tests/e2e/ $(PYTEST_ARGS) --tb=short
	@echo "$(GREEN)‚úÖ E2E —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(NC)"

##@ üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –£—Ç–∏–ª–∏—Ç—ã

test-quick: unit smoke ## ‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (unit + smoke)
	@echo "$(GREEN)‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ$(NC)"

test-coverage: ## üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Ç–µ—Å—Ç–∞–º–∏
	@echo "$(BLUE)üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏...$(NC)"
	@export PYTHONPATH=$$PWD && \
	 export TESTING=true && \
	 export ENVIRONMENT=test && \
	 export LOG_LEVEL=WARNING && \
	 ./$(VENV)/bin/pytest tests/unit/ tests/integration/ --cov=app --cov=domain --cov=adapters --cov=backend --cov-report=term-missing --cov-report=html:htmlcov/combined --cov-report=xml:coverage.xml
	@echo "$(GREEN)‚úÖ –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Å–æ–∑–¥–∞–Ω –≤ htmlcov/combined/index.html$(NC)"

test-clean: ## üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∫–µ—à–∞
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	@rm -rf htmlcov/ coverage.xml .coverage .pytest_cache/
	@find . -name "*.pyc" -delete
	@find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
	@echo "$(GREEN)‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã$(NC)"

test-debug: ## üêõ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –æ—Ç–ª–∞–¥–∫–æ–π
	@echo "$(YELLOW)üêõ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –æ—Ç–ª–∞–¥–∫–æ–π...$(NC)"
	@export PYTHONPATH=$$PWD && \
	 export TESTING=true && \
	 export ENVIRONMENT=test && \
	 export LOG_LEVEL=DEBUG && \
	 ./$(VENV)/bin/pytest tests/unit/ -v -s --tb=long --capture=no
	@echo "$(GREEN)‚úÖ –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(NC)"

test-parallel: ## üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
	@echo "$(BLUE)üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	@export PYTHONPATH=$$PWD && \
	 export TESTING=true && \
	 export ENVIRONMENT=test && \
	 export LOG_LEVEL=WARNING && \
	 ./$(VENV)/bin/pytest tests/unit/ tests/smoke/ tests/contract/ tests/security/ -n auto
	@echo "$(GREEN)‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(NC)"

test-watch: ## üëÅÔ∏è –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
	@echo "$(CYAN)üëÅÔ∏è –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è...$(NC)"
	@echo "$(YELLOW)üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏$(NC)"
	@export PYTHONPATH=$$PWD && \
	 export TESTING=true && \
	 export ENVIRONMENT=test && \
	 export LOG_LEVEL=WARNING && \
	 ./$(VENV)/bin/pytest-watch tests/unit/ -- $(PYTEST_ARGS)

test-specific: ## üéØ –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ (TEST=path/to/test)
	@echo "$(BLUE)üéØ –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: $(TEST)$(NC)"
	@if [ -z "$(TEST)" ]; then \
		echo "$(RED)‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ—Å—Ç: make test-specific TEST=tests/unit/test_example.py$(NC)"; \
		exit 1; \
	fi
	@export PYTHONPATH=$$PWD && \
	 export TESTING=true && \
	 export ENVIRONMENT=test && \
	 export LOG_LEVEL=WARNING && \
	 ./$(VENV)/bin/pytest $(TEST) $(PYTEST_ARGS) -v
	@echo "$(GREEN)‚úÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω$(NC)"

##@ üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å Docker

test-e2e-full: up-e2e ## üé≠ –ü–æ–ª–Ω—ã–µ E2E —Ç–µ—Å—Ç—ã
	@echo "$(BLUE)üé≠ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω—ã—Ö E2E —Ç–µ—Å—Ç–æ–≤...$(NC)"
	@echo "$(YELLOW)‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (3 –º–∏–Ω—É—Ç—ã)...$(NC)"
	@sleep 180
	@echo "$(GREEN)üé¨ –ó–∞–ø—É—Å–∫ Playwright —Ç–µ—Å—Ç–æ–≤...$(NC)"
	COMPOSE_PROFILES=e2e docker compose run --rm e2e-playwright
	@echo "$(GREEN)‚úÖ E2E —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(NC)"

test-load-locust: up-load ## ‚ö° –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å Locust
	@echo "$(BLUE)‚ö° –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å Locust...$(NC)"
	@echo "$(YELLOW)‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (30 —Å–µ–∫—É–Ω–¥)...$(NC)"
	@sleep 30
	@echo "$(GREEN)üöÄ Locust UI –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:8089$(NC)"
	@echo "$(CYAN)üí° –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–µ—Å—Ç:$(NC)"
	@echo "  ‚Ä¢ Host: http://load-app:8000"
	@echo "  ‚Ä¢ Users: 50"
	@echo "  ‚Ä¢ Spawn rate: 2"
	@echo "$(YELLOW)üìä –ù–∞–∂–º–∏—Ç–µ Ctrl+C —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å$(NC)"
	COMPOSE_PROFILES=load docker compose logs -f locust

test-bootstrap: bootstrap ## üéì –¢–µ—Å—Ç Bootstrap –ø—Ä–æ—Ü–µ—Å—Å–∞
	@echo "$(BLUE)üéì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Bootstrap –ø—Ä–æ—Ü–µ—Å—Å–∞...$(NC)"
	@echo "$(GREEN)‚úÖ Bootstrap —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω$(NC)"

##@ üî® –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤

build: ## üî® –°–æ–±—Ä–∞—Ç—å –≤—Å–µ –æ–±—Ä–∞–∑—ã
	@echo "$(BLUE)üî® –°–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤...$(NC)"
	docker compose build
	@echo "$(GREEN)‚úÖ –í—Å–µ –æ–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã$(NC)"

build-app: ## üî® –°–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	@echo "$(BLUE)üî® –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...$(NC)"
	docker compose build app
	@echo "$(GREEN)‚úÖ –û–±—Ä–∞–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω$(NC)"

build-e2e: ## üî® –°–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑—ã –¥–ª—è E2E
	@echo "$(BLUE)üî® –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è E2E...$(NC)"
	COMPOSE_PROFILES=e2e docker compose build
	@echo "$(GREEN)‚úÖ E2E –æ–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã$(NC)"

build-bootstrap: ## üî® –°–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑ –¥–ª—è Bootstrap
	@echo "$(BLUE)üî® –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ –¥–ª—è Bootstrap...$(NC)"
	COMPOSE_PROFILES=bootstrap docker compose build
	@echo "$(GREEN)‚úÖ Bootstrap –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω$(NC)"

##@ üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏

backup-data: ## üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö
	@echo "$(GREEN)üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	@mkdir -p ./backups/$(shell date +%Y%m%d_%H%M%S)
	@docker compose exec postgres pg_dump -U ai_user ai_assistant > ./backups/$(shell date +%Y%m%d_%H%M%S)/postgres_backup.sql
	@cp -r ./data ./backups/$(shell date +%Y%m%d_%H%M%S)/
	@echo "$(GREEN)‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ ./backups/$(shell date +%Y%m%d_%H%M%S)/$(NC)"

clean-data: ## üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
	@echo "$(RED)üßπ –í–ù–ò–ú–ê–ù–ò–ï: –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!$(NC)"
	@read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã! [y/N] " -n 1 -r; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		echo ""; \
		$(MAKE) down; \
		sudo rm -rf ./data/postgres/* ./data/qdrant/* ./data/redis/* ./data/e2e/* ./data/load/* 2>/dev/null || true; \
		echo "$(GREEN)‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã$(NC)"; \
	else \
		echo ""; \
		echo "$(YELLOW)–û—Ç–º–µ–Ω–µ–Ω–æ$(NC)"; \
	fi

setup-data-dirs: ## üìÅ –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
	@echo "$(BLUE)üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	@mkdir -p data/{postgres,qdrant,redis,prometheus,grafana,ollama}
	@mkdir -p data/e2e/{postgres,qdrant,redis,jira,confluence,gitlab/{config,logs,data}}
	@mkdir -p data/load/{postgres,redis}
	@echo "$(GREEN)‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã$(NC)"

##@ üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ —Å–ø—Ä–∞–≤–∫–∞

docs-docker: ## üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ Docker –æ–∫—Ä—É–∂–µ–Ω–∏—è–º
	@echo "$(GREEN)üìö AI Assistant - Unified Docker Environment$(NC)"
	@echo ""
	@echo "$(CYAN)üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@echo "  make up              - –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
	@echo "  make up-dev          - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—è–º–∏"
	@echo "  make up-dev-full     - –ü–æ–ª–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"
	@echo "  make up-dev-llm      - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å LLM"
	@echo ""
	@echo "$(CYAN)üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:$(NC)"
	@echo "  make up-e2e          - E2E —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
	@echo "  make test-e2e-full   - –ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤"
	@echo "  make up-load         - –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
	@echo "  make test-load-locust - Locust –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã"
	@echo ""
	@echo "$(CYAN)üéì Bootstrap:$(NC)"
	@echo "  make bootstrap       - ETL –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
	@echo "  make test-bootstrap  - –¢–µ—Å—Ç Bootstrap –ø—Ä–æ—Ü–µ—Å—Å–∞"
	@echo ""
	@echo "$(CYAN)üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:$(NC)"
	@echo "  make status          - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "  make logs            - –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "  make down            - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ"
	@echo "  make restart         - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"
	@echo ""
	@echo "$(CYAN)üíæ –î–∞–Ω–Ω—ã–µ:$(NC)"
	@echo "  ‚Ä¢ Postgres:  ./data/postgres"
	@echo "  ‚Ä¢ Qdrant:    ./data/qdrant"
	@echo "  ‚Ä¢ Redis:     ./data/redis"
	@echo "  ‚Ä¢ E2E:       ./data/e2e/"
	@echo "  ‚Ä¢ Load:      ./data/load/"

help-docker: docs-docker ## –ê–ª–∏–∞—Å –¥–ª—è docs-docker

# Ensure data directories exist
$(shell mkdir -p data/{postgres,qdrant,redis,prometheus,grafana,ollama})
$(shell mkdir -p data/e2e/{postgres,qdrant,redis,jira,confluence,gitlab/{config,logs,data}})
$(shell mkdir -p data/load/{postgres,redis}) 