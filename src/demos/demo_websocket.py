#!/usr/bin/env python3
"""
Demo script for WebSocket functionality
Demonstrates connection management, messaging, and notifications
"""

import asyncio
import json
import logging
from datetime import datetime
from typing import Dict, Any
import websockets
import requests
import time

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class WebSocketDemo:
    """Demo class for WebSocket functionality"""
    
    def __init__(self, base_url: str = "http://localhost:8000", ws_url: str = "ws://localhost:8000"):
        self.base_url = base_url
        self.ws_url = ws_url
        self.connections: Dict[str, Any] = {}
        
    async def demonstrate_basic_connection(self):
        """Demonstrate basic WebSocket connection"""
        logger.info("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ===")
        
        uri = f"{self.ws_url}/api/v1/ws/demo_user"
        
        try:
            async with websockets.connect(uri) as websocket:
                logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {uri}")
                
                # –û–∂–∏–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                welcome_msg = await websocket.recv()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {welcome_msg}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping
                ping_msg = {"type": "ping"}
                await websocket.send(json.dumps(ping_msg))
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω ping: {ping_msg}")
                
                # –ü–æ–ª—É—á–∞–µ–º pong
                pong_response = await websocket.recv()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω pong: {pong_response}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats_msg = {"type": "get_stats"}
                await websocket.send(json.dumps(stats_msg))
                logger.info(f"–ó–∞–ø—Ä–æ—Å–∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {stats_msg}")
                
                stats_response = await websocket.recv()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats_response}")
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
                disconnect_msg = {"type": "disconnect"}
                await websocket.send(json.dumps(disconnect_msg))
                logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    async def demonstrate_multiple_connections(self):
        """Demonstrate multiple concurrent connections"""
        logger.info("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π ===")
        
        users = ["user1", "user2", "user3"]
        tasks = []
        
        async def create_user_connection(user_id: str):
            uri = f"{self.ws_url}/api/v1/ws/{user_id}"
            try:
                async with websockets.connect(uri) as websocket:
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–∫–ª—é—á–µ–Ω")
                    
                    # –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
                    end_time = time.time() + 10
                    while time.time() < end_time:
                        try:
                            message = await asyncio.wait_for(websocket.recv(), timeout=1.0)
                            logger.info(f"{user_id} –ø–æ–ª—É—á–∏–ª: {message}")
                        except asyncio.TimeoutError:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π ping
                            await websocket.send(json.dumps({"type": "ping"}))
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è {user_id}: {e}")
                            break
                    
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è {user_id}: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_id in users:
            tasks.append(create_user_connection(user_id))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        await asyncio.gather(*tasks)
    
    def demonstrate_rest_api(self):
        """Demonstrate REST API for WebSocket management"""
        logger.info("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è REST API ===")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            response = requests.get(f"{self.base_url}/api/v1/ws/stats")
            logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {response.json()}")
            
            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω—É–∂–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            # –ó–¥–µ—Å—å –ø–æ–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
            notification_example = {
                "notification_type": "demo",
                "message": {
                    "title": "Demo Notification",
                    "content": "This is a demo notification"
                }
            }
            logger.info(f"–ü—Ä–∏–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_example}")
            
            broadcast_example = {
                "notification_type": "system",
                "message": {
                    "title": "System Demo",
                    "content": "This is a system broadcast demo"
                }
            }
            logger.info(f"–ü—Ä–∏–º–µ—Ä broadcast: {broadcast_example}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ REST API: {e}")
    
    async def demonstrate_message_types(self):
        """Demonstrate different message types"""
        logger.info("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π ===")
        
        uri = f"{self.ws_url}/api/v1/ws/message_demo_user"
        
        try:
            async with websockets.connect(uri) as websocket:
                logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                # –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                messages = [
                    {"type": "ping"},
                    {"type": "get_stats"},
                    {"type": "custom_message", "content": "Hello WebSocket!"},
                    {"type": "test", "data": {"key": "value"}},
                    {"invalid": "json_without_type"}
                ]
                
                for msg in messages:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {msg}")
                    await websocket.send(json.dumps(msg))
                    
                    try:
                        response = await asyncio.wait_for(websocket.recv(), timeout=2.0)
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response}")
                    except asyncio.TimeoutError:
                        logger.warning("Timeout –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")
                
                # –ñ–¥–µ–º heartbeat —Å–æ–æ–±—â–µ–Ω–∏—è
                logger.info("–û–∂–∏–¥–∞–µ–º heartbeat —Å–æ–æ–±—â–µ–Ω–∏—è...")
                try:
                    heartbeat = await asyncio.wait_for(websocket.recv(), timeout=3.0)
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω heartbeat: {heartbeat}")
                except asyncio.TimeoutError:
                    logger.info("Heartbeat –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞")
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
                await websocket.send(json.dumps({"type": "disconnect"}))
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    async def demonstrate_error_handling(self):
        """Demonstrate error handling scenarios"""
        logger.info("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ ===")
        
        uri = f"{self.ws_url}/api/v1/ws/error_demo_user"
        
        try:
            async with websockets.connect(uri) as websocket:
                logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON
                logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON...")
                await websocket.send("invalid json string")
                
                try:
                    error_response = await asyncio.wait_for(websocket.recv(), timeout=2.0)
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –æ—à–∏–±–∫—É: {error_response}")
                except asyncio.TimeoutError:
                    logger.warning("–ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º —Ç–∏–ø–æ–º
                unknown_msg = {"type": "unknown_command", "data": "test"}
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É: {unknown_msg}")
                await websocket.send(json.dumps(unknown_msg))
                
                echo_response = await asyncio.wait_for(websocket.recv(), timeout=2.0)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω echo –æ—Ç–≤–µ—Ç: {echo_response}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫: {e}")
    
    async def run_all_demos(self):
        """Run all demonstration scenarios"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ WebSocket —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        logger.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
            response = requests.get(f"{self.base_url}/health")
            logger.info(f"–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {response.json()}")
        except Exception as e:
            logger.error(f"–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        demos = [
            ("–ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", self.demonstrate_basic_connection()),
            ("–¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π", self.demonstrate_message_types()),
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", self.demonstrate_error_handling()),
            ("REST API", None),  # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            ("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", self.demonstrate_multiple_connections()),
        ]
        
        for name, demo_task in demos:
            logger.info(f"\n{'='*50}")
            logger.info(f"–ó–∞–ø—É—Å–∫: {name}")
            logger.info(f"{'='*50}")
            
            if demo_task is None:
                # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
                self.demonstrate_rest_api()
            else:
                try:
                    await demo_task
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ '{name}': {e}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è–º–∏
            await asyncio.sleep(2)
        
        logger.info("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


async def main():
    """Main function to run WebSocket demos"""
    demo = WebSocketDemo()
    await demo.run_all_demos()


if __name__ == "__main__":
    print("""
    WebSocket Demo Script
    =====================
    
    –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ WebSocket —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:
    
    1. –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ ping-pong
    2. –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    4. REST API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    5. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    
    –î–ª—è –∑–∞–ø—É—Å–∫–∞ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:
    1. –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: uvicorn app.main:app --reload
    2. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install websockets requests
    
    –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.
    """)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}") 