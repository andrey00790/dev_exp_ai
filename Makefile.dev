# üöÄ AI Assistant - Makefile –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
# 
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   make help          - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
#   make quick-start   - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ + –∑–∞–ø—É—Å–∫)
#   make dev           - –ó–∞–ø—É—Å–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
#   make check         - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è

.PHONY: help quick-start dev check install services backend frontend test clean

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED = \033[0;31m
GREEN = \033[0;32m  
YELLOW = \033[0;33m
BLUE = \033[0;34m
MAGENTA = \033[0;35m
CYAN = \033[0;36m
WHITE = \033[0;37m
BOLD = \033[1m
RESET = \033[0m

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PYTHON = python3
PIP = pip
VENV_DIR = venv
BACKEND_PORT = 8000
FRONTEND_PORT = 3000

# –ü–æ–º–æ—â—å
help:
	@echo "$(BOLD)$(MAGENTA)üöÄ AI Assistant - –ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏$(RESET)"
	@echo ""
	@echo "$(BOLD)$(CYAN)üèÅ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:$(RESET)"
	@echo "  $(GREEN)make quick-start$(RESET)    - –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
	@echo "  $(GREEN)make dev$(RESET)            - –ó–∞–ø—É—Å–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
	@echo ""
	@echo "$(BOLD)$(CYAN)üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞:$(RESET)"
	@echo "  $(GREEN)make install$(RESET)        - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
	@echo "  $(GREEN)make install-backend$(RESET) - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
	@echo "  $(GREEN)make install-frontend$(RESET) - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
	@echo ""
	@echo "$(BOLD)$(CYAN)üê≥ –°–µ—Ä–≤–∏—Å—ã:$(RESET)"
	@echo "  $(GREEN)make services-up$(RESET)    - –ó–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "  $(GREEN)make services-down$(RESET)  - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "  $(GREEN)make services-logs$(RESET)  - –õ–æ–≥–∏ Docker —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo ""
	@echo "$(BOLD)$(CYAN)üèÉ –ó–∞–ø—É—Å–∫:$(RESET)"
	@echo "  $(GREEN)make backend$(RESET)        - –ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞ (FastAPI)"
	@echo "  $(GREEN)make frontend$(RESET)       - –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (React)"
	@echo "  $(GREEN)make dev-both$(RESET)       - –ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞ –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"
	@echo ""
	@echo "$(BOLD)$(CYAN)üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:$(RESET)"
	@echo "  $(GREEN)make test$(RESET)           - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"
	@echo "  $(GREEN)make test-backend$(RESET)   - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±—ç–∫–µ–Ω–¥–∞"  
	@echo "  $(GREEN)make test-frontend$(RESET)  - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"
	@echo ""
	@echo "$(BOLD)$(CYAN)üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:$(RESET)"
	@echo "  $(GREEN)make check$(RESET)          - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
	@echo "  $(GREEN)make check-verbose$(RESET)  - –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
	@echo "  $(GREEN)make health$(RESET)         - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo ""
	@echo "$(BOLD)$(CYAN)üßπ –û—á–∏—Å—Ç–∫–∞:$(RESET)"
	@echo "  $(GREEN)make clean$(RESET)          - –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
	@echo "  $(GREEN)make clean-all$(RESET)      - –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞"
	@echo ""
	@echo "$(BOLD)$(YELLOW)üí° –ü—Ä–∏–º–µ—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:$(RESET)"
	@echo "  $(CYAN)make quick-start$(RESET)  # –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞"
	@echo "  $(CYAN)make check$(RESET)        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ –û–ö"
	@echo "  $(CYAN)make dev$(RESET)          # –ó–∞–ø—É—Å–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
	@echo ""

# –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
quick-start:
	@echo "$(BOLD)$(MAGENTA)üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç AI Assistant...$(RESET)"
	@echo "$(GREEN)1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(RESET)"
	make install
	@echo "$(GREEN)2Ô∏è‚É£ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...$(RESET)"
	make services-up
	@echo "$(GREEN)3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(RESET)"
	make check
	@echo "$(BOLD)$(GREEN)‚úÖ –ì–æ—Ç–æ–≤–æ! –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'make dev' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏$(RESET)"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install: install-backend install-frontend
	@echo "$(BOLD)$(GREEN)‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(RESET)"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π  
install-backend:
	@echo "$(BOLD)$(CYAN)üêç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(RESET)"
	@if [ ! -d "$(VENV_DIR)" ]; then \
		echo "$(YELLOW)–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(RESET)"; \
		$(PYTHON) -m venv $(VENV_DIR); \
	fi
	@echo "$(YELLOW)–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤...$(RESET)"
	@. $(VENV_DIR)/bin/activate && $(PIP) install --upgrade pip
	@. $(VENV_DIR)/bin/activate && $(PIP) install -r requirements.txt
	@echo "$(GREEN)‚úÖ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(RESET)"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install-frontend:
	@echo "$(BOLD)$(CYAN)‚öõÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(RESET)"
	@if [ -d "frontend" ]; then \
		cd frontend && npm install; \
		echo "$(GREEN)‚úÖ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(RESET)"; \
	else \
		echo "$(RED)‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞$(RESET)"; \
	fi

# –ó–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–æ–≤
services-up:
	@echo "$(BOLD)$(CYAN)üê≥ –ó–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–æ–≤...$(RESET)"
	docker-compose up -d postgres redis qdrant
	@echo "$(GREEN)‚úÖ Docker —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã$(RESET)"
	@echo "$(YELLOW)üí° –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: make services-status$(RESET)"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤
services-down:
	@echo "$(BOLD)$(CYAN)üê≥ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤...$(RESET)"
	docker-compose down
	@echo "$(GREEN)‚úÖ Docker —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(RESET)"

# –õ–æ–≥–∏ Docker —Å–µ—Ä–≤–∏—Å–æ–≤
services-logs:
	@echo "$(BOLD)$(CYAN)üê≥ –õ–æ–≥–∏ Docker —Å–µ—Ä–≤–∏—Å–æ–≤...$(RESET)"
	docker-compose logs -f

# –°—Ç–∞—Ç—É—Å Docker —Å–µ—Ä–≤–∏—Å–æ–≤
services-status:
	@echo "$(BOLD)$(CYAN)üê≥ –°—Ç–∞—Ç—É—Å Docker —Å–µ—Ä–≤–∏—Å–æ–≤:$(RESET)"
	docker-compose ps

# –ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞
backend:
	@echo "$(BOLD)$(CYAN)üöÄ –ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞ (FastAPI)...$(RESET)"
	@if [ ! -f ".env.local" ]; then \
		echo "$(YELLOW)‚ö†Ô∏è –§–∞–π–ª .env.local –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–æ–ø–∏—Ä—É—é –∏–∑ –ø—Ä–∏–º–µ—Ä–∞...$(RESET)"; \
		cp env.example .env.local; \
		echo "$(RED)‚ùó –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env.local –∏ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏!$(RESET)"; \
	fi
	@echo "$(CYAN)üåê –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:$(BACKEND_PORT)$(RESET)"
	@echo "$(CYAN)üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:$(BACKEND_PORT)/docs$(RESET)"
	@. $(VENV_DIR)/bin/activate && \
	export $$(cat .env.local | xargs) && \
	uvicorn app.main:app --host 0.0.0.0 --port $(BACKEND_PORT) --reload

# –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
frontend:
	@echo "$(BOLD)$(CYAN)‚öõÔ∏è –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (React)...$(RESET)"
	@if [ ! -d "frontend/node_modules" ]; then \
		echo "$(YELLOW)‚ö†Ô∏è Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...$(RESET)"; \
		make install-frontend; \
	fi
	@echo "$(CYAN)üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:$(FRONTEND_PORT)$(RESET)"
	@cd frontend && npm run dev

# –ó–∞–ø—É—Å–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–±—ç–∫–µ–Ω–¥ –≤ —Ñ–æ–Ω–µ)
dev:
	@echo "$(BOLD)$(MAGENTA)üöÄ –ó–∞–ø—É—Å–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(RESET)"
	@echo "$(CYAN)1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤...$(RESET)"
	@make services-up
	@echo "$(CYAN)2Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞...$(RESET)"
	@echo "$(YELLOW)üí° –û—Ç–∫—Ä–æ–π—Ç–µ –≤—Ç–æ—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ 'make frontend' –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞$(RESET)"
	@echo "$(YELLOW)üí° –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ 'make dev-both' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±–µ–∏—Ö —á–∞—Å—Ç–µ–π$(RESET)"
	@make backend

# –ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞ –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
dev-both:
	@echo "$(BOLD)$(MAGENTA)üöÄ –ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞ –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ...$(RESET)"
	@make services-up
	@echo "$(CYAN)–ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...$(RESET)"
	@(make backend > /tmp/backend.log 2>&1 &) && \
	(make frontend > /tmp/frontend.log 2>&1 &) && \
	echo "$(GREEN)‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–µ$(RESET)" && \
	echo "$(CYAN)üîó Backend: http://localhost:$(BACKEND_PORT)$(RESET)" && \
	echo "$(CYAN)üîó Frontend: http://localhost:$(FRONTEND_PORT)$(RESET)" && \
	echo "$(YELLOW)üí° –õ–æ–≥–∏: tail -f /tmp/backend.log /tmp/frontend.log$(RESET)" && \
	echo "$(YELLOW)üí° –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: pkill -f uvicorn && pkill -f 'npm run dev'$(RESET)"

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
test: test-backend test-frontend
	@echo "$(BOLD)$(GREEN)‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(RESET)"

# –¢–µ—Å—Ç—ã –±—ç–∫–µ–Ω–¥–∞
test-backend:
	@echo "$(BOLD)$(CYAN)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±—ç–∫–µ–Ω–¥–∞...$(RESET)"
	@. $(VENV_DIR)/bin/activate && pytest tests/ -v

# –¢–µ—Å—Ç—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
test-frontend:
	@echo "$(BOLD)$(CYAN)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...$(RESET)"
	@if [ -d "frontend" ]; then \
		cd frontend && npm test; \
	else \
		echo "$(RED)‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞$(RESET)"; \
	fi

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
check:
	@echo "$(BOLD)$(CYAN)üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(RESET)"
	@$(PYTHON) scripts/check_dev_environment.py

# –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
check-verbose:
	@echo "$(BOLD)$(CYAN)üîç –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(RESET)"
	@$(PYTHON) scripts/check_dev_environment.py --verbose

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
health:
	@echo "$(BOLD)$(CYAN)üíö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤...$(RESET)"
	@echo "$(CYAN)üîç PostgreSQL:$(RESET)"
	@docker-compose exec postgres pg_isready -U postgres || echo "$(RED)‚ùå PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(RESET)"
	@echo "$(CYAN)üîç Redis:$(RESET)"  
	@docker-compose exec redis redis-cli ping || echo "$(RED)‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(RESET)"
	@echo "$(CYAN)üîç Qdrant:$(RESET)"
	@curl -s http://localhost:6333/health > /dev/null && echo "$(GREEN)‚úÖ Qdrant –¥–æ—Å—Ç—É–ø–µ–Ω$(RESET)" || echo "$(RED)‚ùå Qdrant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(RESET)"
	@echo "$(CYAN)üîç FastAPI:$(RESET)"
	@curl -s http://localhost:$(BACKEND_PORT)/health > /dev/null && echo "$(GREEN)‚úÖ FastAPI –¥–æ—Å—Ç—É–ø–µ–Ω$(RESET)" || echo "$(RED)‚ùå FastAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(RESET)"

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
clean:
	@echo "$(BOLD)$(CYAN)üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...$(RESET)"
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.log" -delete 2>/dev/null || true
	@echo "$(GREEN)‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã$(RESET)"

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
clean-all: clean services-down
	@echo "$(BOLD)$(CYAN)üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...$(RESET)"
	@echo "$(YELLOW)‚ö†Ô∏è –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ node_modules$(RESET)"
	@read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N) " answer && [ "$$answer" = "y" ] || exit 1
	rm -rf $(VENV_DIR)
	rm -rf frontend/node_modules
	docker-compose down -v
	docker system prune -f
	@echo "$(GREEN)‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(RESET)"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ .env —Ñ–∞–π–ª–∞
setup-env:
	@echo "$(BOLD)$(CYAN)üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(RESET)"
	@if [ ! -f ".env.local" ]; then \
		cp env.example .env.local; \
		echo "$(GREEN)‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env.local$(RESET)"; \
	fi
	@echo "$(YELLOW)‚ö†Ô∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env.local –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏:$(RESET)"
	@echo "$(CYAN)- OPENAI_API_KEY$(RESET)"
	@echo "$(CYAN)- ANTHROPIC_API_KEY$(RESET)"
	@echo "$(YELLOW)üí° nano .env.local$(RESET)"

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
info:
	@echo "$(BOLD)$(MAGENTA)ü§ñ AI Assistant MVP - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ$(RESET)"
	@echo ""
	@echo "$(BOLD)üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:$(RESET)"
	@echo "  Backend:  FastAPI (Python 3.11+)"
	@echo "  Frontend: React 18 + TypeScript"
	@echo "  Database: PostgreSQL + Redis + Qdrant"
	@echo ""
	@echo "$(BOLD)üåê –ü–æ—Ä—Ç—ã:$(RESET)"
	@echo "  FastAPI:    http://localhost:$(BACKEND_PORT)"
	@echo "  React:      http://localhost:$(FRONTEND_PORT)"
	@echo "  PostgreSQL: localhost:5432"
	@echo "  Redis:      localhost:6379"
	@echo "  Qdrant:     localhost:6333"
	@echo ""
	@echo "$(BOLD)üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:$(RESET)"
	@echo "  API Docs:   http://localhost:$(BACKEND_PORT)/docs"
	@echo "  ReDoc:      http://localhost:$(BACKEND_PORT)/redoc"
	@echo "  –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: docs/LOCAL_DEVELOPMENT_GUIDE.md"
	@echo "  –®–ø–∞—Ä–≥–∞–ª–∫–∞:   docs/QUICK_START_CHEATSHEET.md"
	@echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã
check-requirements:
	@echo "$(BOLD)$(CYAN)üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã...$(RESET)"
	@command -v python3 >/dev/null 2>&1 && echo "$(GREEN)‚úÖ Python 3$(RESET)" || echo "$(RED)‚ùå Python 3 –Ω–µ –Ω–∞–π–¥–µ–Ω$(RESET)"
	@command -v node >/dev/null 2>&1 && echo "$(GREEN)‚úÖ Node.js$(RESET)" || echo "$(RED)‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω$(RESET)"
	@command -v docker >/dev/null 2>&1 && echo "$(GREEN)‚úÖ Docker$(RESET)" || echo "$(RED)‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω$(RESET)"
	@command -v docker-compose >/dev/null 2>&1 && echo "$(GREEN)‚úÖ Docker Compose$(RESET)" || echo "$(RED)‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω$(RESET)"
	@command -v git >/dev/null 2>&1 && echo "$(GREEN)‚úÖ Git$(RESET)" || echo "$(RED)‚ùå Git –Ω–µ –Ω–∞–π–¥–µ–Ω$(RESET)"

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º help
.DEFAULT_GOAL := help 