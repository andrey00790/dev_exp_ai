"""
API endpoints for Learning Pipeline.

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–±–æ—Ä —Ñ–∏–¥–±–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏.
"""

from typing import Any, Dict, Optional

from fastapi import APIRouter, HTTPException, status
from pydantic import BaseModel

from domain.core.learning_pipeline_service import get_learning_service
from models.feedback import FeedbackType

router = APIRouter(prefix="/learning", tags=["Learning Pipeline"])


class RFCFeedbackRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–∏–¥–±–µ–∫ –ø–æ RFC."""

    rfc_id: str
    feedback_type: FeedbackType  # like, dislike
    rating: Optional[int] = None  # 1-5 –∑–≤–µ–∑–¥
    comment: Optional[str] = None
    improvement_suggestions: Optional[str] = None


class LearningStatsResponse(BaseModel):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è."""

    total_examples: int
    average_quality: float
    quality_distribution: Dict[str, int]
    ready_for_retraining: bool
    last_retraining: Optional[str] = None
    message: str


@router.post(
    "/feedback",
    status_code=status.HTTP_200_OK,
    summary="Submit RFC Feedback",
    description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–¥–±–µ–∫ –ø–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É RFC –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞",
)
async def submit_rfc_feedback(request: RFCFeedbackRequest) -> Dict[str, Any]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–¥–±–µ–∫ –ø–æ RFC –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏.

    **–ü—Ä–æ—Ü–µ—Å—Å:**
    1. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–¥–±–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    2. –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—É—á–∞—é—â–∏–π –¥–∞—Ç–∞—Å–µ—Ç
    3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
    4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–æ–±—Ä–∞–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤

    **–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏:**
    - –ù–∞–∫–æ–ø–ª–µ–Ω–∏–∏ 10+ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
    - –î–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–∏–¥–±–µ–∫–∞
    """

    try:
        learning_service = get_learning_service()

        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–¥–±–µ–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        result = await learning_service.collect_user_feedback(
            rfc_id=request.rfc_id,
            feedback_type=request.feedback_type,
            rating=request.rating,
            comment=request.comment,
        )

        return {"success": True, "data": result, "message": result["message"]}

    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to process feedback: {str(e)}",
        )


@router.get(
    "/stats",
    response_model=LearningStatsResponse,
    summary="Get Learning Statistics",
    description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏",
)
async def get_learning_statistics() -> LearningStatsResponse:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è.

    **–í–∫–ª—é—á–∞–µ—Ç:**
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
    - –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–∏–¥–±–µ–∫–∞
    - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∫–∞—á–µ—Å—Ç–≤–∞
    - –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—é
    - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–∏
    """

    try:
        learning_service = get_learning_service()
        stats = await learning_service.get_learning_stats()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if stats["ready_for_retraining"]:
            message = (
                f"üéØ –ì–æ—Ç–æ–≤–æ –∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—é! –°–æ–±—Ä–∞–Ω–æ {stats['total_examples']} –ø—Ä–∏–º–µ—Ä–æ–≤."
            )
        else:
            remaining = 10 - stats["total_examples"]  # min_examples_for_retraining = 10
            message = f"üìä –°–æ–±—Ä–∞–Ω–æ {stats['total_examples']} –ø—Ä–∏–º–µ—Ä–æ–≤. –ù—É–∂–Ω–æ –µ—â–µ {remaining} –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è."

        return LearningStatsResponse(
            total_examples=stats["total_examples"],
            average_quality=stats["average_quality"],
            quality_distribution=stats["quality_distribution"],
            ready_for_retraining=stats["ready_for_retraining"],
            last_retraining=stats["last_retraining"],
            message=message,
        )

    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to get learning stats: {str(e)}",
        )


@router.post(
    "/manual-retrain",
    status_code=status.HTTP_200_OK,
    summary="Manual Model Retraining",
    description="–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä—É—á–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)",
)
async def manual_retrain() -> Dict[str, Any]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä—É—á–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ—Ä–æ–≥–∞.

    **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** –î–ª—è –∞–¥–º–∏–Ω–æ–≤/—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
    –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å.
    """

    try:
        learning_service = get_learning_service()

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
        result = await learning_service._trigger_retraining()

        return {
            "success": True,
            "data": result,
            "message": "–†—É—á–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ",
        }

    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to trigger manual retraining: {str(e)}",
        )


@router.get(
    "/health",
    summary="Learning Pipeline Health",
    description="–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Learning Pipeline",
)
async def learning_health() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ Learning Pipeline."""

    try:
        learning_service = get_learning_service()
        stats = await learning_service.get_learning_stats()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if stats["total_examples"] == 0:
            health_status = "initializing"
        elif stats["ready_for_retraining"]:
            health_status = "ready_for_retraining"
        else:
            health_status = "collecting_feedback"

        return {
            "status": "healthy",
            "learning_status": health_status,
            "examples_collected": stats["total_examples"],
            "average_quality": stats["average_quality"],
            "last_retraining": stats["last_retraining"],
            "timestamp": "2025-06-11",
            "message": "Learning Pipeline —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
        }

    except Exception as e:
        return {
            "status": "unhealthy",
            "error": str(e),
            "message": "–ü—Ä–æ–±–ª–µ–º—ã —Å Learning Pipeline",
        }
