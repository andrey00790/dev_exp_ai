version: '3.8'

services:
  # Основное приложение AI Assistant для разработки
  app:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile
    container_name: ai-assistant-dev
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://ai_user:ai_password_dev@postgres:5432/ai_assistant
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_URL=http://qdrant:6333
      - SECRET_KEY=dev-secret-key-not-for-production
      - LOG_LEVEL=DEBUG
      - DEBUG=true
      - ENVIRONMENT=development
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    volumes:
      - ../../logs:/app/logs
      - ../../data:/app/data
      - ../../test-data:/app/test-data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    networks:
      - ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # База данных PostgreSQL для разработки
  postgres:
    image: postgres:15-alpine
    container_name: ai-assistant-postgres-dev
    environment:
      POSTGRES_DB: ai_assistant
      POSTGRES_USER: ai_user
      POSTGRES_PASSWORD: ai_password_dev
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ../../tools/scripts/init_enhanced_etl_schema.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_user -d ai_assistant"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis для кэширования
  redis:
    image: redis:7-alpine
    container_name: ai-assistant-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Vector база данных (Qdrant)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: ai-assistant-qdrant-dev
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_dev_data:/qdrant/storage
    networks:
      - ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Adminer для управления БД (профиль admin)
  adminer:
    image: adminer:latest
    container_name: ai-assistant-adminer-dev
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - ai-network
    restart: unless-stopped
    profiles:
      - admin

  # Redis Commander для управления Redis (профиль admin)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ai-assistant-redis-commander-dev
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - ai-network
    restart: unless-stopped
    profiles:
      - admin

  # Ollama для локальных LLM (профиль llm)
  ollama:
    image: ollama/ollama:latest
    container_name: ai-assistant-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - ai-network
    restart: unless-stopped
    profiles:
      - llm

  # Frontend для разработки (профиль frontend)
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    container_name: ai-assistant-frontend-dev
    ports:
      - "3000:3000"
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
      - NODE_ENV=development
    volumes:
      - ../../frontend/src:/app/src
      - ../../frontend/public:/app/public
    depends_on:
      - app
    networks:
      - ai-network
    restart: unless-stopped
    profiles:
      - frontend

  # Prometheus для мониторинга (профиль monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-assistant-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - ai-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana для визуализации (профиль monitoring)
  grafana:
    image: grafana/grafana:latest
    container_name: ai-assistant-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ../../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ../../monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - ai-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_dev_data:
  redis_dev_data:
  qdrant_dev_data:
  ollama_data:
  prometheus_data:
  grafana_data:

networks:
  ai-network:
    driver: bridge 