#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å Docker Compose
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å Docker Compose${NC}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker –∏ Docker Compose
if ! command -v docker &> /dev/null; then
    log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
cd "$PROJECT_ROOT"

log_info "–ü—Ä–æ–µ–∫—Ç: $PROJECT_ROOT"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ docker-compose.test.yml
if [ ! -f "docker-compose.test.yml" ]; then
    log_error "–§–∞–π–ª docker-compose.test.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

# –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
cleanup() {
    log_info "–û—á–∏—Å—Ç–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose -f docker-compose.test.yml down --volumes --remove-orphans || true
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
wait_for_service() {
    local service=$1
    local host=$2
    local port=$3
    local timeout=${4:-60}
    
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ $service ($host:$port)..."
    
    local count=0
    while ! nc -z "$host" "$port" 2>/dev/null; do
        if [ $count -ge $timeout ]; then
            log_error "–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è $service"
            return 1
        fi
        sleep 1
        count=$((count + 1))
    done
    
    log_success "$service –≥–æ—Ç–æ–≤"
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è Qdrant
check_qdrant_health() {
    local host=${1:-localhost}
    local port=${2:-6334}
    local timeout=${3:-30}
    
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Qdrant..."
    
    local count=0
    while [ $count -lt $timeout ]; do
        if curl -s "http://$host:$port/" > /dev/null 2>&1; then
            log_success "Qdrant –∑–¥–æ—Ä–æ–≤"
            return 0
        fi
        sleep 2
        count=$((count + 2))
    done
    
    log_error "Qdrant –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    return 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è Redis
check_redis_health() {
    local host=${1:-localhost}
    local port=${2:-6380}
    local timeout=${3:-30}
    
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Redis..."
    
    local count=0
    while [ $count -lt $timeout ]; do
        if redis-cli -h "$host" -p "$port" ping 2>/dev/null | grep -q PONG; then
            log_success "Redis –∑–¥–æ—Ä–æ–≤"
            return 0
        fi
        sleep 1
        count=$((count + 1))
    done
    
    log_error "Redis –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    return 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è PostgreSQL
check_postgres_health() {
    local host=${1:-localhost}
    local port=${2:-5433}
    local timeout=${3:-30}
    
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è PostgreSQL..."
    
    local count=0
    while [ $count -lt $timeout ]; do
        if pg_isready -h "$host" -p "$port" 2>/dev/null; then
            log_success "PostgreSQL –∑–¥–æ—Ä–æ–≤"
            return 0
        fi
        sleep 1
        count=$((count + 1))
    done
    
    log_error "PostgreSQL –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    return 1
}

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
trap cleanup EXIT

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
cleanup

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
log_info "–ó–∞–ø—É—Å–∫ Docker Compose —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose -f docker-compose.test.yml up -d

# –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."

# PostgreSQL
if ! wait_for_service "PostgreSQL" "localhost" "5433" 60; then
    log_error "PostgreSQL –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
    exit 1
fi

# Redis
if ! wait_for_service "Redis" "localhost" "6380" 60; then
    log_error "Redis –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
    exit 1
fi

# Qdrant
if ! wait_for_service "Qdrant" "localhost" "6334" 60; then
    log_error "Qdrant –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
    exit 1
fi

# Elasticsearch
if ! wait_for_service "Elasticsearch" "localhost" "9201" 60; then
    log_error "Elasticsearch –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
    exit 1
fi

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
if ! check_redis_health "localhost" "6380"; then
    log_warning "Redis –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Qdrant
if ! check_qdrant_health "localhost" "6334"; then
    log_warning "Qdrant –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL
if ! check_postgres_health "localhost" "5433"; then
    log_warning "PostgreSQL –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
export POSTGRES_HOST=localhost
export POSTGRES_PORT=5433
export POSTGRES_DB=test_db
export POSTGRES_USER=test_user
export POSTGRES_PASSWORD=test_password

export REDIS_HOST=localhost
export REDIS_PORT=6380

export QDRANT_HOST=localhost
export QDRANT_PORT=6334

export ELASTICSEARCH_HOST=localhost
export ELASTICSEARCH_PORT=9201

export OPENAI_API_KEY=test_key
export OPENAI_API_BASE=http://localhost:8000

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
log_info "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 10

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
log_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã! –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
pytest tests/integration/ \
    --timeout=300 \
    --tb=short \
    --maxfail=5 \
    -v \
    --color=yes \
    --durations=10 \
    --cov=app \
    --cov-report=term-missing \
    --cov-report=html:htmlcov/integration \
    --junit-xml=test-results/integration-results.xml \
    "$@"

TEST_EXIT_CODE=$?

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫
if [ $TEST_EXIT_CODE -ne 0 ]; then
    log_error "–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏"
    
    log_info "–õ–æ–≥–∏ PostgreSQL:"
    docker-compose -f docker-compose.test.yml logs postgres-test | tail -50
    
    log_info "–õ–æ–≥–∏ Redis:"
    docker-compose -f docker-compose.test.yml logs redis-test | tail -50
    
    log_info "–õ–æ–≥–∏ Qdrant:"
    docker-compose -f docker-compose.test.yml logs qdrant-test | tail -50
    
    log_info "–õ–æ–≥–∏ Elasticsearch:"
    docker-compose -f docker-compose.test.yml logs elasticsearch-test | tail -50
else
    log_success "–í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
fi

exit $TEST_EXIT_CODE 