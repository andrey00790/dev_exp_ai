"""
Demo Enhanced Feedback System - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –û—Ç–ø—Ä–∞–≤–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ feedback (–ª–∞–π–∫–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Ä–µ–π—Ç–∏–Ω–≥–∏)
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤  
- Real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
- –ê–Ω–∞–ª–∏—Ç–∏–∫—É –∏ –º–µ—Ç—Ä–∏–∫–∏
- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å PubSub

Usage:
    python src/demos/demo_enhanced_feedback.py
"""

import asyncio
import json
import logging
import random
import time
from datetime import datetime, timedelta
from typing import List, Dict, Any

from domain.monitoring.enhanced_feedback_service import (
    EnhancedFeedbackService, get_enhanced_feedback_service,
    FeedbackType, ContentType, FeedbackStatus, SentimentScore
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class EnhancedFeedbackDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Enhanced Feedback System"""
    
    def __init__(self):
        self.service: EnhancedFeedbackService = None
        self.demo_users = [f"user_{i}" for i in range(1, 11)]
        self.demo_content_ids = [f"content_{i}" for i in range(1, 6)]
        self.demo_comments = {
            'positive': [
                "This is excellent and very helpful!",
                "Great work, perfect solution!",
                "Awesome response, love it!",
                "Best answer I've seen!",
                "Outstanding quality content!"
            ],
            'negative': [
                "This is terrible and awful!",
                "Horrible response, hate it!",
                "Worst answer ever!",
                "Bad quality, very poor!",
                "Completely useless content!"
            ],
            'neutral': [
                "This is okay, nothing special.",
                "Average response, could be better.",
                "Regular content, meets expectations.",
                "Standard quality answer.",
                "Normal response, typical result."
            ],
            'spam': [
                "Free money! Click here for advertisement!",
                "Spam content! Buy our products now!",
                "Promotion! Free gifts! Visit our site!",
                "Advertisement! Best deals! Click here!"
            ],
            'toxic': [
                "I hate this toxic content!",
                "This is harassment and abuse!",
                "Toxic behavior, very bad!",
                "Harassment! This is awful!"
            ]
        }
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            print("üîß Initializing Enhanced Feedback Service...")
            self.service = await get_enhanced_feedback_service()
            print("‚úÖ Enhanced Feedback Service initialized successfully")
            return True
        except Exception as e:
            print(f"‚ùå Failed to initialize service: {e}")
            return False
    
    async def demo_basic_feedback_submission(self):
        """–î–µ–º–æ 1: –ë–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        print("\n" + "="*60)
        print("üìù –î–ï–ú–û 1: –ë–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
        print("="*60)
        
        content_id = "demo_content_1"
        
        # –õ–∞–π–∫–∏ –∏ –¥–∏–∑–ª–∞–π–∫–∏
        print("üëç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∞–π–∫–∏ –∏ –¥–∏–∑–ª–∞–π–∫–∏...")
        for i, user_id in enumerate(self.demo_users[:5]):
            feedback_type = FeedbackType.LIKE if i < 3 else FeedbackType.DISLIKE
            value = True
            
            feedback = await self.service.submit_feedback(
                user_id=user_id,
                content_id=content_id,
                content_type=ContentType.AI_RESPONSE,
                feedback_type=feedback_type,
                value=value
            )
            
            print(f"  ‚úì {user_id}: {feedback_type.value} - {feedback.feedback_id}")
        
        # –†–µ–π—Ç–∏–Ω–≥–∏
        print("\n‚≠ê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏...")
        for i, user_id in enumerate(self.demo_users[5:8]):
            rating = random.randint(3, 5)
            
            feedback = await self.service.submit_feedback(
                user_id=user_id,
                content_id=content_id,
                content_type=ContentType.AI_RESPONSE,
                feedback_type=FeedbackType.RATING,
                rating=rating
            )
            
            print(f"  ‚úì {user_id}: {rating} stars - {feedback.feedback_id}")
        
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        print("\nüí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏...")
        for i, user_id in enumerate(self.demo_users[8:]):
            comment_type = ['positive', 'negative', 'neutral'][i % 3]
            comment = random.choice(self.demo_comments[comment_type])
            
            feedback = await self.service.submit_feedback(
                user_id=user_id,
                content_id=content_id,
                content_type=ContentType.AI_RESPONSE,
                feedback_type=FeedbackType.COMMENT,
                comment=comment
            )
            
            sentiment = feedback.sentiment_score.value if feedback.sentiment_score else "unknown"
            print(f"  ‚úì {user_id}: '{comment[:30]}...' - Sentiment: {sentiment}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏
        print("\nüìä –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É...")
        summary = await self.service.get_content_feedback(content_id, include_comments=True)
        
        print(f"  üìà –õ–∞–π–∫–∏: {summary.total_likes}")
        print(f"  üìâ –î–∏–∑–ª–∞–π–∫–∏: {summary.total_dislikes}")
        print(f"  üíØ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤: {summary.like_ratio:.2%}")
        print(f"  üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {summary.total_comments}")
        print(f"  ‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {summary.avg_rating:.1f}")
        print(f"  üé≠ –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {summary.sentiment_distribution}")
    
    async def demo_moderation_system(self):
        """–î–µ–º–æ 2: –°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        print("\n" + "="*60)
        print("üõ°Ô∏è –î–ï–ú–û 2: –°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
        print("="*60)
        
        content_id = "demo_content_moderation"
        moderated_feedback_ids = []
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∞–º-–∫–æ–Ω—Ç–µ–Ω—Ç
        print("üö´ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∞–º-–∫–æ–Ω—Ç–µ–Ω—Ç (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è)...")
        for i, spam_comment in enumerate(self.demo_comments['spam'][:2]):
            feedback = await self.service.submit_feedback(
                user_id=f"spammer_{i}",
                content_id=content_id,
                content_type=ContentType.AI_RESPONSE,
                feedback_type=FeedbackType.COMMENT,
                comment=spam_comment
            )
            
            status = "–ú–û–î–ï–†–ò–†–û–í–ê–ù" if feedback.status == FeedbackStatus.MODERATED else "–ê–ö–¢–ò–í–ï–ù"
            print(f"  üö® –°–ø–∞–º: '{spam_comment[:40]}...' - –°—Ç–∞—Ç—É—Å: {status}")
            
            if feedback.status == FeedbackStatus.MODERATED:
                print(f"    –ü—Ä–∏—á–∏–Ω–∞: {feedback.moderation_reason}")
                moderated_feedback_ids.append(feedback.feedback_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫—Å–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        print("\n‚ò£Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫—Å–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç...")
        for i, toxic_comment in enumerate(self.demo_comments['toxic'][:2]):
            feedback = await self.service.submit_feedback(
                user_id=f"toxic_user_{i}",
                content_id=content_id,
                content_type=ContentType.AI_RESPONSE,
                feedback_type=FeedbackType.COMMENT,
                comment=toxic_comment
            )
            
            status = "–ú–û–î–ï–†–ò–†–û–í–ê–ù" if feedback.status == FeedbackStatus.MODERATED else "–ê–ö–¢–ò–í–ï–ù"
            print(f"  ‚ò£Ô∏è –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: '{toxic_comment[:40]}...' - –°—Ç–∞—Ç—É—Å: {status}")
            
            if feedback.status == FeedbackStatus.MODERATED:
                print(f"    –ü—Ä–∏—á–∏–Ω–∞: {feedback.moderation_reason}")
                moderated_feedback_ids.append(feedback.feedback_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        print("\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç...")
        normal_feedback = await self.service.submit_feedback(
            user_id="normal_user",
            content_id=content_id,
            content_type=ContentType.AI_RESPONSE,
            feedback_type=FeedbackType.COMMENT,
            comment="This is a regular, helpful comment."
        )
        
        print(f"  ‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π: 'This is a regular, helpful comment.' - –°—Ç–∞—Ç—É—Å: {normal_feedback.status.value}")
        
        # –†—É—á–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
        print("\nüë®‚Äçüíº –†—É—á–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        if moderated_feedback_ids:
            # –û–¥–æ–±—Ä—è–µ–º –æ–¥–∏–Ω –∏–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            feedback_id = moderated_feedback_ids[0]
            success = await self.service.moderate_feedback(
                feedback_id=feedback_id,
                moderator_id="moderator_admin",
                action="approve",
                reason="Content reviewed and approved"
            )
            
            if success:
                print(f"  ‚úÖ Feedback {feedback_id} –æ–¥–æ–±—Ä–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º")
            
            # –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –¥—Ä—É–≥–æ–π
            if len(moderated_feedback_ids) > 1:
                feedback_id = moderated_feedback_ids[1]
                success = await self.service.moderate_feedback(
                    feedback_id=feedback_id,
                    moderator_id="moderator_admin",
                    action="remove",
                    reason="Spam content permanently removed"
                )
                
                if success:
                    print(f"  üóëÔ∏è Feedback {feedback_id} —É–¥–∞–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º")
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        print("\nüìä –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:")
        metrics = self.service.metrics
        print(f"  üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ø–∞–º–∞: {metrics['spam_detected']}")
        print(f"  üõ°Ô∏è –ú–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {metrics['moderated_items']}")
    
    async def demo_sentiment_analysis(self):
        """–î–µ–º–æ 3: –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        print("\n" + "="*60)
        print("üé≠ –î–ï–ú–û 3: –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        print("="*60)
        
        content_id = "demo_content_sentiment"
        sentiment_results = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        all_comments = (
            [(comment, 'positive') for comment in self.demo_comments['positive']] +
            [(comment, 'negative') for comment in self.demo_comments['negative']] +
            [(comment, 'neutral') for comment in self.demo_comments['neutral']]
        )
        
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
        for i, (comment, expected_sentiment) in enumerate(all_comments):
            feedback = await self.service.submit_feedback(
                user_id=f"sentiment_user_{i}",
                content_id=content_id,
                content_type=ContentType.AI_RESPONSE,
                feedback_type=FeedbackType.COMMENT,
                comment=comment
            )
            
            detected_sentiment = feedback.sentiment_score.value if feedback.sentiment_score else "unknown"
            sentiment_results.append((expected_sentiment, detected_sentiment))
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            correct = "‚úÖ" if expected_sentiment == detected_sentiment else "‚ùå"
            
            print(f"  {correct} '{comment[:50]}...'")
            print(f"     –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_sentiment} | –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {detected_sentiment}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
        correct_predictions = sum(1 for expected, detected in sentiment_results if expected == detected)
        total_predictions = len(sentiment_results)
        accuracy = correct_predictions / total_predictions if total_predictions > 0 else 0
        
        print(f"\nüìà –¢–æ—á–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {accuracy:.1%} ({correct_predictions}/{total_predictions})")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        summary = await self.service.get_content_feedback(content_id)
        print(f"\nüé≠ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ:")
        for sentiment, count in summary.sentiment_distribution.items():
            print(f"  {sentiment}: {count} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
    
    async def demo_analytics_and_metrics(self):
        """–î–µ–º–æ 4: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏"""
        print("\n" + "="*60)
        print("üìä –î–ï–ú–û 4: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏")
        print("="*60)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        print("üìù –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
        
        content_types = [ContentType.AI_RESPONSE, ContentType.RFC_GENERATION, ContentType.CODE_DOCUMENTATION]
        feedback_types = [FeedbackType.LIKE, FeedbackType.DISLIKE, FeedbackType.RATING, FeedbackType.COMMENT]
        
        for content_type in content_types:
            for i in range(5):  # 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                content_id = f"analytics_{content_type.value}_{i}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã feedback
                for j, user_id in enumerate(self.demo_users[:7]):
                    if j < 3:  # –õ–∞–π–∫–∏
                        await self.service.submit_feedback(
                            user_id=user_id,
                            content_id=content_id,
                            content_type=content_type,
                            feedback_type=FeedbackType.LIKE,
                            value=True
                        )
                    elif j < 4:  # –î–∏–∑–ª–∞–π–∫
                        await self.service.submit_feedback(
                            user_id=user_id,
                            content_id=content_id,
                            content_type=content_type,
                            feedback_type=FeedbackType.DISLIKE,
                            value=True
                        )
                    elif j < 6:  # –†–µ–π—Ç–∏–Ω–≥–∏
                        await self.service.submit_feedback(
                            user_id=user_id,
                            content_id=content_id,
                            content_type=content_type,
                            feedback_type=FeedbackType.RATING,
                            rating=random.randint(3, 5)
                        )
                    else:  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                        comment = random.choice(self.demo_comments['positive'] + self.demo_comments['neutral'])
                        await self.service.submit_feedback(
                            user_id=user_id,
                            content_id=content_id,
                            content_type=content_type,
                            feedback_type=FeedbackType.COMMENT,
                            comment=comment
                        )
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        print("\nüìà –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:")
        analytics = await self.service.get_feedback_analytics(time_period=timedelta(days=7))
        
        print(f"  üìä –í—Å–µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {analytics['total_feedback']}")
        print(f"  üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {analytics['time_period_days']} –¥–Ω–µ–π")
        
        print(f"\nüìù –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º feedback:")
        for feedback_type, count in analytics['feedback_by_type'].items():
            print(f"  {feedback_type}: {count}")
        
        print(f"\nüéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞:")
        for content_type, count in analytics['feedback_by_content_type'].items():
            print(f"  {content_type}: {count}")
        
        print(f"\nüé≠ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:")
        for sentiment, count in analytics['sentiment_distribution'].items():
            print(f"  {sentiment}: {count}")
        
        print(f"\n‚≠ê –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:")
        for rating, count in analytics['rating_distribution'].items():
            print(f"  {rating} –∑–≤–µ–∑–¥: {count}")
        
        print(f"\nüí™ –ú–µ—Ç—Ä–∏–∫–∏ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è:")
        engagement = analytics['engagement_metrics']
        print(f"  üìà Feedback –≤ –¥–µ–Ω—å: {engagement['feedback_per_day']:.1f}")
        print(f"  üëç –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤: {engagement['like_ratio']:.1%}")
        print(f"  üí¨ –î–æ–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {engagement['comment_rate']:.1%}")
        print(f"  ‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {engagement['avg_rating']:.1f}")
        
        print(f"\nüèÜ –¢–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É feedback:")
        for i, (content_id, feedback_count) in enumerate(analytics['top_content'][:5]):
            print(f"  {i+1}. {content_id}: {feedback_count} feedback")
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        print(f"\nüéØ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è AI Response:")
        ai_analytics = await self.service.get_feedback_analytics(
            time_period=timedelta(days=7),
            content_type=ContentType.AI_RESPONSE
        )
        print(f"  üìä AI Response feedback: {ai_analytics['total_feedback']}")
        print(f"  üí™ AI Response engagement: {ai_analytics['engagement_metrics']}")
    
    async def demo_user_feedback_history(self):
        """–î–µ–º–æ 5: –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("\n" + "="*60)
        print("üë§ –î–ï–ú–û 5: –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("="*60)
        
        target_user = "demo_history_user"
        
        # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é feedback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"üìù –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é feedback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user}...")
        
        history_data = [
            (ContentType.AI_RESPONSE, FeedbackType.LIKE, True, None, None),
            (ContentType.RFC_GENERATION, FeedbackType.RATING, None, None, 5),
            (ContentType.CODE_DOCUMENTATION, FeedbackType.COMMENT, None, "Great documentation!", None),
            (ContentType.AI_RESPONSE, FeedbackType.DISLIKE, True, None, None),
            (ContentType.DEEP_RESEARCH, FeedbackType.RATING, None, None, 4),
            (ContentType.AI_RESPONSE, FeedbackType.COMMENT, None, "Very helpful response!", None),
        ]
        
        created_feedback = []
        for i, (content_type, feedback_type, value, comment, rating) in enumerate(history_data):
            feedback = await self.service.submit_feedback(
                user_id=target_user,
                content_id=f"history_content_{i}",
                content_type=content_type,
                feedback_type=feedback_type,
                value=value,
                comment=comment or "",
                rating=rating
            )
            created_feedback.append(feedback)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
            await asyncio.sleep(0.1)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
        print(f"\nüìö –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è feedback –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user}:")
        full_history = await self.service.get_user_feedback_history(target_user, limit=20)
        
        for i, feedback in enumerate(full_history):
            print(f"  {i+1}. {feedback.content_type.value} - {feedback.feedback_type.value}")
            print(f"     –°–æ–∑–¥–∞–Ω–æ: {feedback.created_at.strftime('%H:%M:%S')}")
            if feedback.comment:
                print(f"     –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{feedback.comment}'")
            if feedback.rating:
                print(f"     –†–µ–π—Ç–∏–Ω–≥: {feedback.rating} –∑–≤–µ–∑–¥")
            print()
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        print(f"\nüéØ –ò—Å—Ç–æ—Ä–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è AI Response:")
        ai_history = await self.service.get_user_feedback_history(
            target_user, 
            limit=10, 
            content_type=ContentType.AI_RESPONSE
        )
        
        for feedback in ai_history:
            print(f"  ‚Ä¢ {feedback.feedback_type.value} –Ω–∞ {feedback.content_id}")
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        print(f"  üìà –í—Å–µ–≥–æ feedback: {len(full_history)}")
        print(f"  üéØ AI Response feedback: {len(ai_history)}")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º
        type_distribution = {}
        for feedback in full_history:
            ftype = feedback.feedback_type.value
            type_distribution[ftype] = type_distribution.get(ftype, 0) + 1
        
        print(f"  üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:")
        for ftype, count in type_distribution.items():
            print(f"    {ftype}: {count}")
    
    async def demo_performance_and_caching(self):
        """–î–µ–º–æ 6: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        print("\n" + "="*60)
        print("‚ö° –î–ï–ú–û 6: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("="*60)
        
        content_id = "performance_test_content"
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        print("üìù –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        for i in range(10):
            await self.service.submit_feedback(
                user_id=f"perf_user_{i}",
                content_id=content_id,
                content_type=ContentType.AI_RESPONSE,
                feedback_type=FeedbackType.LIKE,
                value=True
            )
        
        # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏
        print("\n‚è±Ô∏è –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º):")
        
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (—Å–æ–∑–¥–∞–Ω–∏–µ –∫—ç—à–∞)
        start_time = time.time()
        summary1 = await self.service.get_content_feedback(content_id)
        first_request_time = time.time() - start_time
        print(f"  üîÑ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (—Å–æ–∑–¥–∞–Ω–∏–µ –∫—ç—à–∞): {first_request_time*1000:.2f}ms")
        
        # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–∏–∑ –∫—ç—à–∞)
        start_time = time.time()
        summary2 = await self.service.get_content_feedback(content_id)
        cached_request_time = time.time() - start_time
        print(f"  ‚ö° –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–∏–∑ –∫—ç—à–∞): {cached_request_time*1000:.2f}ms")
        
        speedup = first_request_time / cached_request_time if cached_request_time > 0 else float('inf')
        print(f"  üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")
        
        # –¢–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ feedback
        print("\nüèÉ‚Äç‚ôÇÔ∏è –¢–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ feedback:")
        concurrent_content_id = "concurrent_test_content"
        
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        tasks = []
        for i in range(20):
            task = self.service.submit_feedback(
                user_id=f"concurrent_user_{i}",
                content_id=concurrent_content_id,
                content_type=ContentType.AI_RESPONSE,
                feedback_type=FeedbackType.LIKE,
                value=True
            )
            tasks.append(task)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        results = await asyncio.gather(*tasks)
        concurrent_time = time.time() - start_time
        
        print(f"  ‚ö° 20 –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞: {concurrent_time*1000:.2f}ms")
        print(f"  üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—Ä–æ—Å: {concurrent_time*1000/20:.2f}ms")
        print(f"  ‚úÖ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ: {len(results) == 20}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É
        final_summary = await self.service.get_content_feedback(concurrent_content_id)
        print(f"  üìà –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤: {final_summary.total_likes}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        print("\nüóÑÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:")
        status = await self.service.get_service_status()
        cache_stats = status['cache_stats']
        print(f"  üì¶ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–æ–¥–æ–∫: {cache_stats['cached_summaries']}")
        print(f"  üéØ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {cache_stats['cache_hit_potential']}")
    
    async def demo_service_status_and_metrics(self):
        """–î–µ–º–æ 7: –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏"""
        print("\n" + "="*60)
        print("üîç –î–ï–ú–û 7: –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏")
        print("="*60)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
        print("üìä –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å Enhanced Feedback Service...")
        status = await self.service.get_service_status()
        
        print(f"\nüöÄ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞: {status['service_status']}")
        print(f"üì¶ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ feedback: {status['total_feedback_items']}")
        print(f"üìã –°–≤–æ–¥–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {status['total_content_summaries']}")
        print(f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {status['last_updated']}")
        
        print(f"\nüìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        metrics = status['metrics']
        for metric_name, metric_value in metrics.items():
            print(f"  {metric_name}: {metric_value}")
        
        print(f"\n‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞:")
        config = status['configuration']
        for config_key, config_value in config.items():
            print(f"  {config_key}: {config_value}")
        
        print(f"\nüóÑÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:")
        cache_stats = status['cache_stats']
        for cache_key, cache_value in cache_stats.items():
            print(f"  {cache_key}: {cache_value}")
    
    async def run_all_demos(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π"""
        print("üöÄ Enhanced Feedback System - –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
        print("="*80)
        
        if not await self.initialize():
            return
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –¥–µ–º–æ
            await self.demo_basic_feedback_submission()
            await self.demo_moderation_system()
            await self.demo_sentiment_analysis()
            await self.demo_analytics_and_metrics()
            await self.demo_user_feedback_history()
            await self.demo_performance_and_caching()
            await self.demo_service_status_and_metrics()
            
            print("\n" + "="*80)
            print("üéâ –í–°–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("="*80)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            final_status = await self.service.get_service_status()
            print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  üì¶ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ feedback: {final_status['total_feedback_items']}")
            print(f"  üìã –°–≤–æ–¥–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {final_status['total_content_summaries']}")
            print(f"  üéØ –ú–µ—Ç—Ä–∏–∫–∏: {final_status['metrics']}")
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–º–æ: {e}")
            logger.exception("Demo execution failed")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    demo = EnhancedFeedbackDemo()
    await demo.run_all_demos()

if __name__ == "__main__":
    asyncio.run(main())