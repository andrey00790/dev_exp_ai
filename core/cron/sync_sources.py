#!/usr/bin/env python3
"""
Cron —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.

–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –¥–ª—è:
- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Confluence, Jira, GitLab
- –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: –ø—Ä–æ–ø—É—Å–∫ –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python core/cron/sync_sources.py [--source-id SOURCE_ID] [--force-full]
"""

import asyncio
import argparse
import logging
import sys
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(str(Path(__file__).parent.parent.parent))

from domain.integration.data_source_service import get_data_source_service
from models.search import SyncTriggerRequest, SourceType
from app.config import settings
from domain.integration.data_sync_service import DataSyncService
from user_config_manager import UserConfigManager, get_user_config_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/sync_sources.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class SourceSynchronizer:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö."""
    
    def __init__(self):
        self.data_source_service = get_data_source_service()
        self.start_time = datetime.now()
    
    async def sync_all_sources(self, force_full: bool = False) -> bool:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            force_full: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            sources = await self.data_source_service.list_sources(include_disabled=False)
            if not sources:
                logger.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                return True
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(sources)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            sync_request = SyncTriggerRequest(
                source_ids=[],  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ = –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                force_full_sync=force_full
            )
            
            results = await self.data_source_service.trigger_sync(sync_request)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            success_count = 0
            total_docs_processed = 0
            total_docs_added = 0
            total_docs_updated = 0
            total_docs_deleted = 0
            
            for result in results:
                if result.status == "completed":
                    success_count += 1
                    total_docs_processed += result.documents_processed
                    total_docs_added += result.documents_added
                    total_docs_updated += result.documents_updated
                    total_docs_deleted += result.documents_deleted
                    
                    logger.info(
                        f"‚úÖ {result.source_name}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {result.documents_processed}, "
                        f"–¥–æ–±–∞–≤–ª–µ–Ω–æ {result.documents_added}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {result.documents_updated}"
                    )
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {result.source_name}: {result.errors}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
            duration = (datetime.now() - self.start_time).total_seconds()
            logger.info(
                f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {duration:.1f}—Å. "
                f"–£—Å–ø–µ—à–Ω–æ: {success_count}/{len(results)}. "
                f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_docs_processed} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ "
                f"(+{total_docs_added}, ~{total_docs_updated}, -{total_docs_deleted})"
            )
            
            return success_count == len(results)
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}", exc_info=True)
            return False
    
    async def sync_specific_source(self, source_id: str, force_full: bool = False) -> bool:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            source_id: ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            force_full: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source_id}...")
            
            sync_request = SyncTriggerRequest(
                source_ids=[source_id],
                force_full_sync=force_full
            )
            
            results = await self.data_source_service.trigger_sync(sync_request)
            
            if not results:
                logger.error(f"–ò—Å—Ç–æ—á–Ω–∏–∫ {source_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
                return False
            
            result = results[0]
            
            if result.status == "completed":
                duration = result.duration_seconds or 0
                logger.info(
                    f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è {result.source_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {duration:.1f}—Å. "
                    f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.documents_processed}, "
                    f"–¥–æ–±–∞–≤–ª–µ–Ω–æ: {result.documents_added}, "
                    f"–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {result.documents_updated}"
                )
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {result.source_name}: {result.errors}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source_id}: {str(e)}", exc_info=True)
            return False
    
    async def health_check(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π.
        
        Returns:
            True –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
            sources = await self.data_source_service.list_sources()
            logger.info(f"–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏. –î–æ—Å—Ç—É–ø–Ω–æ {len(sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
            return True
            
        except Exception as e:
            logger.error(f"–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è cron —Å–∫—Ä–∏–ø—Ç–∞."""
    parser = argparse.ArgumentParser(
        description="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è AI Assistant"
    )
    parser.add_argument(
        "--source-id", 
        help="ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
    )
    parser.add_argument(
        "--force-full", 
        action="store_true",
        help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–µ—à)"
    )
    parser.add_argument(
        "--health-check-only",
        action="store_true", 
        help="–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"
    )
    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
    
    args = parser.parse_args()
    
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
        logger.debug("–í–∫–ª—é—á–µ–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ cron —Å–∫—Ä–∏–ø—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
    logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: source_id={args.source_id}, force_full={args.force_full}")
    
    synchronizer = SourceSynchronizer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    if not await synchronizer.health_check():
        logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        sys.exit(1)
    
    if args.health_check_only:
        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        sys.exit(0)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    if args.source_id:
        success = await synchronizer.sync_specific_source(args.source_id, args.force_full)
    else:
        success = await synchronizer.sync_all_sources(args.force_full)
    
    if success:
        logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        sys.exit(0)
    else:
        logger.error("‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    Path("logs").mkdir(exist_ok=True)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)  # SIGINT exit code
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        sys.exit(1) 