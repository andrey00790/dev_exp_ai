import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Switch,
  FormControlLabel,
  Button,
  Chip,
  Grid,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Alert,
  LinearProgress,
  IconButton,
  Tooltip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper
} from '@mui/material';
import {
  Sync as SyncIcon,
  Settings as SettingsIcon,
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  PlayArrow as PlayIcon,
  Pause as PauseIcon,
  Info as InfoIcon
} from '@mui/icons-material';
import { apiClient } from '../api/apiClient';

interface DataSource {
  source_type: string;
  source_name: string;
  enabled: boolean;
  last_sync: string | null;
  next_sync: string | null;
  running: boolean;
  documents_count: number;
  sync_schedule: string;
  incremental: boolean;
}

interface SearchSourcesConfig {
  user_id: string;
  enabled_sources: string[];
  search_preferences: Record<string, any>;
}

const DataSourcesManagement: React.FC = () => {
  const [dataSources, setDataSources] = useState<DataSource[]>([]);
  const [searchConfig, setSearchConfig] = useState<SearchSourcesConfig | null>(null);
  const [loading, setLoading] = useState(true);
  const [syncing, setSyncing] = useState<Record<string, boolean>>({});
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  
  // –î–∏–∞–ª–æ–≥–∏
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [addDialogOpen, setAddDialogOpen] = useState(false);
  const [searchConfigDialogOpen, setSearchConfigDialogOpen] = useState(false);
  const [selectedSource, setSelectedSource] = useState<DataSource | null>(null);

  // –§–æ—Ä–º–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  const [newSource, setNewSource] = useState({
    source_type: 'confluence',
    source_name: '',
    enabled: true,
    sync_schedule: '0 2 * * *',
    incremental: true,
    config: {}
  });

  useEffect(() => {
    loadDataSources();
    loadSearchConfig();
  }, []);

  const loadDataSources = async () => {
    try {
      setLoading(true);
      const response = await apiClient.get('/api/v1/data-sources/');
      setDataSources(response.data);
    } catch (err: any) {
      setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  const loadSearchConfig = async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
      const userId = 'current_user'; // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
      const response = await apiClient.get(`/api/v1/data-sources/search-sources/${userId}`);
      setSearchConfig(response.data);
    } catch (err: any) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–∏—Å–∫–∞:', err.message);
    }
  };

  const handleSyncSource = async (sourceType: string, sourceName: string) => {
    const sourceKey = `${sourceType}_${sourceName}`;
    
    try {
      setSyncing(prev => ({ ...prev, [sourceKey]: true }));
      
      await apiClient.post(`/api/v1/data-sources/${sourceType}/${sourceName}/sync`);
      
      setSuccess(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${sourceName} –∑–∞–ø—É—â–µ–Ω–∞`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        loadDataSources();
      }, 2000);
      
    } catch (err: any) {
      setError(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${err.message}`);
    } finally {
      setSyncing(prev => ({ ...prev, [sourceKey]: false }));
    }
  };

  const handleToggleSource = async (source: DataSource) => {
    try {
      const updatedSource = {
        ...source,
        enabled: !source.enabled
      };

      await apiClient.put(
        `/api/v1/data-sources/${source.source_type}/${source.source_name}`,
        updatedSource
      );

      setSuccess(`–ò—Å—Ç–æ—á–Ω–∏–∫ ${source.source_name} ${updatedSource.enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`);
      loadDataSources();
      
    } catch (err: any) {
      setError(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞: ${err.message}`);
    }
  };

  const handleAddSource = async () => {
    try {
      await apiClient.post('/api/v1/data-sources/', newSource);
      
      setSuccess(`–ò—Å—Ç–æ—á–Ω–∏–∫ ${newSource.source_name} —Å–æ–∑–¥–∞–Ω`);
      setAddDialogOpen(false);
      setNewSource({
        source_type: 'confluence',
        source_name: '',
        enabled: true,
        sync_schedule: '0 2 * * *',
        incremental: true,
        config: {}
      });
      loadDataSources();
      
    } catch (err: any) {
      setError(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞: ${err.message}`);
    }
  };

  const handleUpdateSearchSources = async (enabledSources: string[]) => {
    try {
      const userId = 'current_user'; // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
      
      await apiClient.put(`/api/v1/data-sources/search-sources/${userId}`, {
        user_id: userId,
        enabled_sources: enabledSources,
        search_preferences: searchConfig?.search_preferences || {}
      });

      setSuccess('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      setSearchConfigDialogOpen(false);
      loadSearchConfig();
      
    } catch (err: any) {
      setError(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞: ${err.message}`);
    }
  };

  const formatLastSync = (lastSync: string | null) => {
    if (!lastSync) return '–ù–∏–∫–æ–≥–¥–∞';
    return new Date(lastSync).toLocaleString('ru-RU');
  };

  const formatNextSync = (nextSync: string | null) => {
    if (!nextSync) return '–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞';
    return new Date(nextSync).toLocaleString('ru-RU');
  };

  const getSourceTypeIcon = (sourceType: string) => {
    switch (sourceType) {
      case 'confluence': return 'üìö';
      case 'gitlab': return 'ü¶ä';
      case 'jira': return 'üéØ';
      case 'local_files': return 'üìÅ';
      default: return 'üìÑ';
    }
  };

  const getStatusColor = (source: DataSource) => {
    if (source.running) return 'info';
    if (!source.enabled) return 'default';
    if (source.last_sync) return 'success';
    return 'warning';
  };

  const getStatusText = (source: DataSource) => {
    if (source.running) return '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è';
    if (!source.enabled) return '–û—Ç–∫–ª—é—á–µ–Ω';
    if (source.last_sync) return '–ê–∫—Ç–∏–≤–µ–Ω';
    return '–û–∂–∏–¥–∞–µ—Ç';
  };

  if (loading) {
    return (
      <Box sx={{ p: 3 }}>
        <Typography variant="h4" sx={{ mb: 3 }}>
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
        </Typography>
        <LinearProgress />
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h4">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
        </Typography>
        <Box sx={{ display: 'flex', gap: 2 }}>
          <Button
            variant="outlined"
            startIcon={<SettingsIcon />}
            onClick={() => setSearchConfigDialogOpen(true)}
          >
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
          </Button>
          <Button
            variant="contained"
            startIcon={<AddIcon />}
            onClick={() => setAddDialogOpen(true)}
          >
            –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫
          </Button>
        </Box>
      </Box>

      {error && (
        <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError(null)}>
          {error}
        </Alert>
      )}

      {success && (
        <Alert severity="success" sx={{ mb: 2 }} onClose={() => setSuccess(null)}>
          {success}
        </Alert>
      )}

      <Grid container spacing={3}>
        {dataSources.map((source) => {
          const sourceKey = `${source.source_type}_${source.source_name}`;
          const isSyncing = syncing[sourceKey] || source.running;
          
          return (
            <Grid item xs={12} md={6} lg={4} key={sourceKey}>
              <Card>
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <Typography variant="h6">
                        {getSourceTypeIcon(source.source_type)} {source.source_name}
                      </Typography>
                      <Chip
                        label={getStatusText(source)}
                        color={getStatusColor(source)}
                        size="small"
                      />
                    </Box>
                    <FormControlLabel
                      control={
                        <Switch
                          checked={source.enabled}
                          onChange={() => handleToggleSource(source)}
                          size="small"
                        />
                      }
                      label=""
                    />
                  </Box>

                  <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                    –¢–∏–ø: {source.source_type}
                  </Typography>
                  
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                    –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {source.documents_count.toLocaleString()}
                  </Typography>
                  
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                    –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {formatLastSync(source.last_sync)}
                  </Typography>
                  
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                    –°–ª–µ–¥—É—é—â–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {formatNextSync(source.next_sync)}
                  </Typography>

                  <Box sx={{ display: 'flex', gap: 1 }}>
                    <Button
                      size="small"
                      variant="outlined"
                      startIcon={isSyncing ? <PauseIcon /> : <SyncIcon />}
                      onClick={() => handleSyncSource(source.source_type, source.source_name)}
                      disabled={isSyncing || !source.enabled}
                    >
                      {isSyncing ? '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...' : '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å'}
                    </Button>
                    
                    <IconButton
                      size="small"
                      onClick={() => {
                        setSelectedSource(source);
                        setEditDialogOpen(true);
                      }}
                    >
                      <EditIcon />
                    </IconButton>
                  </Box>
                </CardContent>
              </Card>
            </Grid>
          );
        })}
      </Grid>

      {/* –î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞ */}
      <Dialog
        open={searchConfigDialogOpen}
        onClose={() => setSearchConfigDialogOpen(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞</DialogTitle>
        <DialogContent>
          <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
            –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.
            –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.
          </Typography>
          
          <Box sx={{ mt: 2 }}>
            {dataSources.map((source) => {
              const sourceId = `${source.source_type}_${source.source_name}`;
              const isEnabled = searchConfig?.enabled_sources.includes(sourceId) || false;
              
              return (
                <FormControlLabel
                  key={sourceId}
                  control={
                    <Switch
                      checked={isEnabled}
                      onChange={(e) => {
                        if (!searchConfig) return;
                        
                        const newEnabledSources = e.target.checked
                          ? [...searchConfig.enabled_sources, sourceId]
                          : searchConfig.enabled_sources.filter(s => s !== sourceId);
                        
                        setSearchConfig({
                          ...searchConfig,
                          enabled_sources: newEnabledSources
                        });
                      }}
                    />
                  }
                  label={
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <Typography>
                        {getSourceTypeIcon(source.source_type)} {source.source_name}
                      </Typography>
                      <Typography variant="caption" color="text.secondary">
                        ({source.documents_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
                      </Typography>
                    </Box>
                  }
                />
              );
            })}
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setSearchConfigDialogOpen(false)}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button
            onClick={() => handleUpdateSearchSources(searchConfig?.enabled_sources || [])}
            variant="contained"
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </Button>
        </DialogActions>
      </Dialog>

      {/* –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ */}
      <Dialog
        open={addDialogOpen}
        onClose={() => setAddDialogOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>–î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö</DialogTitle>
        <DialogContent>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 1 }}>
            <FormControl fullWidth>
              <InputLabel>–¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞</InputLabel>
              <Select
                value={newSource.source_type}
                label="–¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞"
                onChange={(e) => setNewSource({ ...newSource, source_type: e.target.value })}
              >
                <MenuItem value="confluence">Confluence</MenuItem>
                <MenuItem value="gitlab">GitLab</MenuItem>
                <MenuItem value="jira">Jira</MenuItem>
                <MenuItem value="local_files">–õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã</MenuItem>
              </Select>
            </FormControl>

            <TextField
              fullWidth
              label="–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"
              value={newSource.source_name}
              onChange={(e) => setNewSource({ ...newSource, source_name: e.target.value })}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: main_confluence"
            />

            <TextField
              fullWidth
              label="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (cron)"
              value={newSource.sync_schedule}
              onChange={(e) => setNewSource({ ...newSource, sync_schedule: e.target.value })}
              placeholder="0 2 * * *"
              helperText="–§–æ—Ä–º–∞—Ç cron: –º–∏–Ω—É—Ç—ã —á–∞—Å—ã –¥–Ω–∏ –º–µ—Å—è—Ü—ã –¥–Ω–∏_–Ω–µ–¥–µ–ª–∏"
            />

            <FormControlLabel
              control={
                <Switch
                  checked={newSource.incremental}
                  onChange={(e) => setNewSource({ ...newSource, incremental: e.target.checked })}
                />
              }
              label="–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"
            />

            <FormControlLabel
              control={
                <Switch
                  checked={newSource.enabled}
                  onChange={(e) => setNewSource({ ...newSource, enabled: e.target.checked })}
                />
              }
              label="–í–∫–ª—é—á–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫"
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setAddDialogOpen(false)}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button
            onClick={handleAddSource}
            variant="contained"
            disabled={!newSource.source_name}
          >
            –î–æ–±–∞–≤–∏—Ç—å
          </Button>
        </DialogActions>
      </Dialog>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ */}
      <Card sx={{ mt: 3 }}>
        <CardContent>
          <Typography variant="h6" sx={{ mb: 2 }}>
            –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
          </Typography>
          
          <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
            <InfoIcon sx={{ fontSize: 16, mr: 1, verticalAlign: 'middle' }} />
            –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.
            –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, RFC –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª–Ω–æ—Ç—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
          </Typography>

          <TableContainer component={Paper} variant="outlined">
            <Table size="small">
              <TableHead>
                <TableRow>
                  <TableCell>–ò—Å—Ç–æ—á–Ω–∏–∫</TableCell>
                  <TableCell align="right">–î–æ–∫—É–º–µ–Ω—Ç–æ–≤</TableCell>
                  <TableCell align="center">–ü–æ–∏—Å–∫</TableCell>
                  <TableCell align="center">–ì–µ–Ω–µ—Ä–∞—Ü–∏—è</TableCell>
                  <TableCell align="center">–°—Ç–∞—Ç—É—Å</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {dataSources.map((source) => {
                  const sourceId = `${source.source_type}_${source.source_name}`;
                  const searchEnabled = searchConfig?.enabled_sources.includes(sourceId);
                  
                  return (
                    <TableRow key={sourceId}>
                      <TableCell>
                        {getSourceTypeIcon(source.source_type)} {source.source_name}
                      </TableCell>
                      <TableCell align="right">
                        {source.documents_count.toLocaleString()}
                      </TableCell>
                      <TableCell align="center">
                        {searchEnabled ? '‚úÖ' : '‚ùå'}
                      </TableCell>
                      <TableCell align="center">
                        {source.enabled ? '‚úÖ' : '‚ùå'}
                      </TableCell>
                      <TableCell align="center">
                        <Chip
                          label={getStatusText(source)}
                          color={getStatusColor(source)}
                          size="small"
                        />
                      </TableCell>
                    </TableRow>
                  );
                })}
              </TableBody>
            </Table>
          </TableContainer>
        </CardContent>
      </Card>
    </Box>
  );
};

export default DataSourcesManagement; 