version: '3.8'

services:
  # PostgreSQL для тестов
  test-postgres:
    image: postgres:15-alpine
    container_name: test-postgres
    environment:
      POSTGRES_DB: test_ai_assistant
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
    ports:
      - "5433:5432"
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_ai_assistant"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis для кеширования в тестах
  test-redis:
    image: redis:7-alpine
    container_name: test-redis
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    volumes:
      - test_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant для векторного поиска в тестах
  test-qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: test-qdrant
    ports:
      - "6334:6333"
      - "6335:6334"
    volumes:
      - test_qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Mock OpenAI API Server для тестов
  test-openai-mock:
    image: wiremock/wiremock:3.3.1
    container_name: test-openai-mock
    ports:
      - "8081:8080"
    volumes:
      - ./tests/mocks/wiremock:/home/wiremock
    command: --global-response-templating --verbose
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/__admin/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch для поиска (альтернатива)
  test-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: test-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9201:9200"
    volumes:
      - test_elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Test runner контейнер
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: test-runner
    depends_on:
      test-postgres:
        condition: service_healthy
      test-redis:
        condition: service_healthy
      test-qdrant:
        condition: service_healthy
      test-openai-mock:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql://test_user:test_password@test-postgres:5432/test_ai_assistant
      TEST_DATABASE_URL: postgresql://test_user:test_password@test-postgres:5432/test_ai_assistant
      
      # Redis
      REDIS_URL: redis://test-redis:6379/0
      TEST_REDIS_URL: redis://test-redis:6379/1
      
      # Qdrant
      QDRANT_URL: http://test-qdrant:6333
      QDRANT_API_KEY: ""
      
      # Mock OpenAI
      OPENAI_API_BASE: http://test-openai-mock:8080/v1
      OPENAI_API_KEY: test-key-mock
      
      # Elasticsearch
      ELASTICSEARCH_URL: http://test-elasticsearch:9200
      
      # Test environment
      ENVIRONMENT: test
      TESTING: true
      LOG_LEVEL: INFO
      
    volumes:
      - .:/app
      - test_coverage_data:/app/htmlcov
    working_dir: /app
    command: >
      sh -c "
        echo '🔄 Waiting for services to be ready...' &&
        sleep 10 &&
        echo '🗄️ Setting up test database...' &&
        python -c 'from app.database.session import engine, Base; Base.metadata.create_all(bind=engine)' &&
        echo '🧪 Running comprehensive tests with coverage...' &&
        python -m pytest tests/ --cov=app --cov=models --cov-report=html --cov-report=term-missing --cov-fail-under=90 -v &&
        echo '📊 Coverage report generated in htmlcov/'
      "

volumes:
  test_postgres_data:
  test_redis_data:
  test_qdrant_data:
  test_elasticsearch_data:
  test_coverage_data:

networks:
  default:
    name: test-ai-assistant-network 