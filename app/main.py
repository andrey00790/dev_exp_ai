import logging
from contextlib import asynccontextmanager

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from app.api import health
from app.api.v1 import health as health_v1, documents, generate, search, feedback, learning, llm_management, documentation, auth, vector_search
# –ò–º–ø–æ—Ä—Ç—ã –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
try:
    from app.api.v1 import users, data_sources, sync, configurations
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π –ø–æ–∫–∞ –∏—Ö –Ω–µ—Ç
    users = None
    data_sources = None
    sync = None
    configurations = None
from app.config import settings
from app.security.rate_limiter import setup_rate_limiting_middleware

# Configure logging
logging.basicConfig(
    level=getattr(logging, settings.log_level),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan manager for startup and shutdown events."""
    # Startup
    logger.info(f"Starting {settings.title}...")
    logger.info(f"Environment: {settings.environment}")
    logger.info(f"Debug mode: {settings.debug}")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:
    # - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
    # - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    # - –ó–∞–≥—Ä—É–∑–∫–∞ LLM –º–æ–¥–µ–ª–µ–π
    
    yield
    
    # Shutdown  
    logger.info(f"Shutting down {settings.title}...")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤


def create_app() -> FastAPI:
    """Create and configure FastAPI application."""
    application = FastAPI(
        title=settings.title,
        description="AI Assistant –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
        version=settings.version,
        debug=settings.debug,
        lifespan=lifespan,
        docs_url="/docs",
        redoc_url="/redoc"
    )
    
    # CORS middleware –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    application.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # Setup rate limiting middleware
    setup_rate_limiting_middleware(application)
    
    # –ë–∞–∑–æ–≤—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
    application.include_router(health.router, tags=["Health"])
    
    # Authentication endpoints
    application.include_router(
        auth.router, 
        tags=["Authentication"]
    )
    
    # API v1 routes
    application.include_router(
        health_v1.router, 
        prefix="/api/v1", 
        tags=["Health V1"]
    )
    
    # –ù–æ–≤—ã–µ —Ä–æ—É—Ç–µ—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if users:
        application.include_router(
            users.router,
            prefix="/api/v1",
            tags=["User Management"]
        )
    
    if data_sources:
        application.include_router(
            data_sources.router,
            prefix="/api/v1", 
            tags=["Data Sources"]
        )
    
    if sync:
        application.include_router(
            sync.router,
            prefix="/api/v1",
            tags=["Sync Management"]
        )
    
    if configurations:
        application.include_router(
            configurations.router,
            prefix="/api/v1",
            tags=["Configurations"]
        )
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª AI Assistant
    application.include_router(
        generate.router, 
        prefix="/api/v1", 
        tags=["AI Generation"]
    )
    
    application.include_router(
        search.router, 
        prefix="/api/v1", 
        tags=["Semantic Search"]
    )
    
    # Vector search endpoints (–Ω–æ–≤—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫)
    application.include_router(
        vector_search.router, 
        prefix="/api/v1", 
        tags=["Vector Search"]
    )
    
    application.include_router(
        feedback.router, 
        prefix="/api/v1", 
        tags=["Feedback System"]
    )
    
    application.include_router(
        learning.router, 
        prefix="/api/v1", 
        tags=["Learning Pipeline"]
    )
    
    application.include_router(
        llm_management.router, 
        prefix="/api/v1", 
        tags=["LLM Management"]
    )
    
    application.include_router(
        documentation.router, 
        prefix="/api/v1", 
        tags=["Code Documentation"]
    )
    
    # –°—Ç–∞—Ä—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    application.include_router(
        documents.router, 
        prefix="/api/v1", 
        tags=["Documents (Legacy)"]
    )
    
    @application.get("/", summary="Root", description="–ö–æ—Ä–Ω–µ–≤–æ–π endpoint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± AI Assistant")
    async def root():
        """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ."""
        return {
            "name": settings.title,
            "version": settings.version,
            "description": "AI Assistant –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ RFC –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞",
            "features": [
                "ü§ñ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è RFC –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏",
                "üîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º –¥–∞–Ω–Ω—ã–º —Å Qdrant vector database",
                "üìä –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏",
                "üß† Learning Pipeline —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ–º –Ω–∞ —Ñ–∏–¥–±–µ–∫–µ",
                "üìù AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –∫–æ–¥—É (README, API docs, Technical specs)",
                "üî¨ –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å –≤—ã—è–≤–ª–µ–Ω–∏–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                "üîê JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å role-based –¥–æ—Å—Ç—É–ø–æ–º",
                "‚ö° Rate limiting –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç DDoS –∏ abuse",
                "üõ°Ô∏è Input validation –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è SQL injection –∏ XSS",
                "üí∞ Cost control —Å –±—é–¥–∂–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è LLM calls",
                "üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Confluence, Jira, GitLab",
                "üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF, DOC, TXT –∏ –¥—Ä.)",
                "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö",
                "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º",
                "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
            ],
            "endpoints": {
                "docs": "/docs",
                "redoc": "/redoc",
                "health": "/health",
                "api_v1": "/api/v1"
            },
            "status": "running",
            "environment": settings.environment
        }
    
    logger.info("FastAPI application created successfully")
    logger.info("Available endpoints:")
    logger.info("  - Authentication: POST /api/v1/auth/login")
    logger.info("  - User Profile: GET /api/v1/auth/profile")
    logger.info("  - Budget Info: GET /api/v1/auth/budget")
    logger.info("  - User Management: POST /api/v1/users")
    logger.info("  - User Settings: GET /api/v1/users/current/settings")
    logger.info("  - Data Sources: GET /api/v1/data-sources")
    logger.info("  - Jira Config: POST /api/v1/configurations/jira")
    logger.info("  - Confluence Config: POST /api/v1/configurations/confluence")
    logger.info("  - GitLab Config: POST /api/v1/configurations/gitlab")
    logger.info("  - Sync Tasks: POST /api/v1/sync/tasks")
    logger.info("  - RFC Generation: POST /api/v1/generate")
    logger.info("  - Semantic Search: POST /api/v1/search")
    logger.info("  - Vector Search: POST /api/v1/vector-search/search")
    logger.info("  - Document Indexing: POST /api/v1/vector-search/index")
    logger.info("  - Vector Search Stats: GET /api/v1/vector-search/stats")
    logger.info("  - File Upload & Index: POST /api/v1/vector-search/upload-file")
    logger.info("  - Feedback: POST /api/v1/feedback")
    logger.info("  - Learning Pipeline: POST /api/v1/learning/feedback")
    logger.info("  - LLM Management: GET /api/v1/llm/health")
    logger.info("  - Code Documentation: POST /api/v1/documentation/generate")
    logger.info("  - Code Analysis: POST /api/v1/documentation/analyze")
    logger.info("  - Data Sources: GET /api/v1/sources")
    logger.info("  - File Upload: POST /api/v1/upload")
    
    return application


app = create_app()


if __name__ == '__main__':
    import uvicorn
    
    logger.info(f"Starting server on {settings.host}:{settings.port} (reload={settings.is_development})")
    uvicorn.run(
        'app.main:app', 
        host=settings.host,
        port=settings.port,
        reload=settings.is_development,
        log_level=settings.log_level.lower()
    )
