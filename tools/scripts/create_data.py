#!/usr/bin/env python3
"""
üîß CREATE TEST DATA SCRIPT
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
"""

import asyncio
import logging
import os
import sys
from pathlib import Path
from typing import Dict, List, Any
import json

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent.parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
SAMPLE_DOCUMENTS = [
    {
        "title": "AI Assistant Architecture",
        "content": "This document describes the architecture of the AI Assistant system...",
        "source": "docs/architecture.md",
        "metadata": {"type": "documentation", "category": "architecture"}
    },
    {
        "title": "API Usage Guide", 
        "content": "Learn how to use the AI Assistant API for integrating with your applications...",
        "source": "docs/api_guide.md",
        "metadata": {"type": "documentation", "category": "api"}
    },
    {
        "title": "Deployment Instructions",
        "content": "Step-by-step guide for deploying the AI Assistant in production...",
        "source": "docs/deployment.md", 
        "metadata": {"type": "documentation", "category": "deployment"}
    }
]

SAMPLE_USERS = [
    {
        "username": "admin",
        "email": "admin@example.com",
        "full_name": "System Administrator",
        "is_active": True
    },
    {
        "username": "testuser",
        "email": "test@example.com", 
        "full_name": "Test User",
        "is_active": True
    }
]

SAMPLE_PROJECTS = [
    {
        "name": "AI Assistant Demo",
        "description": "Demonstration project for AI Assistant capabilities",
        "status": "active"
    },
    {
        "name": "Documentation System",
        "description": "Project for managing and searching documentation",
        "status": "active"
    }
]


async def create_test_documents():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
    try:
        logger.info("üìÑ Creating test documents...")
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ë–î
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        for doc in SAMPLE_DOCUMENTS:
            logger.info(f"Would create document: {doc['title']}")
            
        logger.info(f"‚úÖ {len(SAMPLE_DOCUMENTS)} test documents ready")
        return True
    except Exception as e:
        logger.error(f"‚ùå Error creating documents: {e}")
        return False


async def create_test_users():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        logger.info("üë• Creating test users...")
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î
        for user in SAMPLE_USERS:
            logger.info(f"Would create user: {user['username']}")
            
        logger.info(f"‚úÖ {len(SAMPLE_USERS)} test users ready")
        return True
    except Exception as e:
        logger.error(f"‚ùå Error creating users: {e}")
        return False


async def create_test_projects():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã"""
    try:
        logger.info("üìÅ Creating test projects...")
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –ë–î
        for project in SAMPLE_PROJECTS:
            logger.info(f"Would create project: {project['name']}")
            
        logger.info(f"‚úÖ {len(SAMPLE_PROJECTS)} test projects ready")
        return True
    except Exception as e:
        logger.error(f"‚ùå Error creating projects: {e}")
        return False


async def setup_vector_data():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    try:
        logger.info("üîç Setting up vector data...")
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è embeddings –∏ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
        logger.info("Would create vector embeddings for documents")
        logger.info("Would setup search indices")
        
        logger.info("‚úÖ Vector data setup complete")
        return True
    except Exception as e:
        logger.error(f"‚ùå Error setting up vector data: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ Starting test data creation...")
    
    success = True
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    tasks = [
        create_test_documents(),
        create_test_users(),
        create_test_projects(),
        setup_vector_data()
    ]
    
    results = await asyncio.gather(*tasks, return_exceptions=True)
    
    for i, result in enumerate(results):
        if isinstance(result, Exception):
            logger.error(f"‚ùå Task {i+1} failed: {result}")
            success = False
        elif not result:
            logger.error(f"‚ùå Task {i+1} returned False")
            success = False
    
    if success:
        logger.info("üéâ All test data created successfully!")
        return 0
    else:
        logger.error("üí• Some tasks failed!")
        return 1


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        logger.info("üõë Interrupted by user")
        sys.exit(1)
    except Exception as e:
        logger.error(f"üí• Unexpected error: {e}")
        sys.exit(1) 